{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-snippet/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/assets/highlight.pack.js","path":"assets/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/assets/tagcanvas.min.js","path":"assets/tagcanvas.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/branding.png","path":"img/branding.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/head-img.jpg","path":"img/head-img.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/reward-wepay.jpg","path":"img/reward-wepay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/timeline-clock.gif","path":"img/timeline-clock.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/timeline-dot.gif","path":"img/timeline-dot.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/timeline.gif","path":"img/timeline.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/assets/valine.min.js","path":"assets/valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-snippet/.gitignore","hash":"5636464498c54867468ad1459c76b960af9c275c","modified":1545052652014},{"_id":"themes/hexo-theme-snippet/.travis.yml","hash":"c1fab2846fb56e0c444faffecbcd46bf746e9f91","modified":1545052652015},{"_id":"themes/hexo-theme-snippet/LICENSE","hash":"c976aafe3bc44246a978850b18102966afe3eeb5","modified":1545052652016},{"_id":"themes/hexo-theme-snippet/README.md","hash":"b34b5f5fdae62160b3f1a330dc5e76704289ba9e","modified":1545052652017},{"_id":"themes/hexo-theme-snippet/_config.yml","hash":"6bc1eec1fb3843ae13a8cb2049c93bfdea4b9b0f","modified":1545054440019},{"_id":"themes/hexo-theme-snippet/_travis.sh","hash":"030b5b59dc485b5fa7d155a1da30d9c5c4868f6b","modified":1545052652018},{"_id":"themes/hexo-theme-snippet/gulpfile.js","hash":"41ab8395f1aea0af1467c58ecda05ae04145dfd3","modified":1545052652019},{"_id":"themes/hexo-theme-snippet/package.json","hash":"5d914ea40bae7de59fd8c4b04f1f72b328bfd01b","modified":1545052652050},{"_id":"source/_posts/README.md","hash":"3aaceeaa7e240057c7c57604e0a84461e1c3956a","modified":1545054624688},{"_id":"source/_posts/SUMMARY.md","hash":"4601e1c023ce46a92d803296ce787ae9a41fdf52","modified":1545054760358},{"_id":"source/_posts/css3.md","hash":"8351898dfb9a4c64fb70d38d32ec227ca2f60c21","modified":1545053869061},{"_id":"source/_posts/css进阶.md","hash":"d2944ae1fe930c0cf5d19ed736c858cccfe99ed9","modified":1544622059366},{"_id":"source/_posts/flex弹性布局.md","hash":"5379d59a87eefa79946a022ccdd26a93d18716f0","modified":1545053869061},{"_id":"source/_posts/git常用命令.md","hash":"047c8d24daffc06a3244dac1271c7d2014f5c8c7","modified":1545053869062},{"_id":"source/_posts/hello-world.md","hash":"3c3c92c448a4d8b6fba6a01456bc4f55ab54f72c","modified":1545053869063},{"_id":"source/_posts/html5-postmessage窗口之间的通讯.md","hash":"c415ca8088c8b0111f517486c1d1265433eb7346","modified":1545053869064},{"_id":"source/_posts/input-file大全和完全整合.md","hash":"f8bf84e6271f60911c33ed0467a57b021ae6cd24","modified":1545053869065},{"_id":"source/_posts/java.md","hash":"68c61e643ef90ddf03cd6de11ee2b9cc22fb71f2","modified":1543935348828},{"_id":"source/_posts/javascript-utils.md","hash":"29fd7eeef400f0196ed7301355178f7b57d776a6","modified":1544704803681},{"_id":"source/_posts/javascript中对象的深度克隆.md","hash":"7f2995e9677c34cdd501e387796c3de116567c8d","modified":1545053869066},{"_id":"source/_posts/jquery-file-upload.md","hash":"b8c8b7a3e11f484a44a6313cbe65956cc88e297a","modified":1545053869067},{"_id":"source/_posts/jstl.md","hash":"50cfb1b8f29c4e5f3334549c7d4cd76de1565b8d","modified":1543935348828},{"_id":"source/_posts/js高级程序设计.md","hash":"36a7aea7c479903d4535e4b879b87ff6330925f8","modified":1545053869067},{"_id":"source/_posts/linux.md","hash":"e29dfcbcbefa87ba29a6a724dc8c5c79583f1c62","modified":1545053869068},{"_id":"source/_posts/mysql.md","hash":"3b3bfe906f34e1bc4681202b187712d9aaccb81d","modified":1543935348828},{"_id":"source/_posts/php.md","hash":"7e6980606211f36d238e6c2432888c01ca8cbe4d","modified":1545053869069},{"_id":"source/_posts/prototype、__proto__与constructor.md","hash":"b74ae2967a0e62c71ed938392da36b34b1ed6520","modified":1545053869070},{"_id":"source/_posts/vue踩坑.md","hash":"d40c3e88e679e1198477906deb3c63de0df7474c","modified":1545053869071},{"_id":"source/_posts/websocket教程.md","hash":"2488d6d3f31c2b4c9339e95dbecb11bae76f43d9","modified":1545053869072},{"_id":"source/_posts/前端兼容性积累.md","hash":"7154ba56385503ce1484dd951d7bb85eb5747b7b","modified":1545053869072},{"_id":"source/_posts/把es6编译成es5（兼容性）.md","hash":"224217593e6144854a0f80dd8688fdd7ea482037","modified":1545053869073},{"_id":"source/_posts/搭建webpack+react+antd+less+css_modules.md","hash":"b2c31231c320220b0695bd6a0e2e39afb2bf7978","modified":1545053869074},{"_id":"source/_posts/整合react+mobx+axios+react-router4.md","hash":"367b1e7b1374b0315be6f39abfccf0b3a3900c9b","modified":1545055232849},{"_id":"source/_posts/浏览器全屏显示.md","hash":"8a5a1e66ee92670fa7243966b207464d6f24ca56","modified":1545053869076},{"_id":"source/_posts/系统集成项目管理工程师.md","hash":"ab60c0610d2042311ca527d01e9d9cfeee49d643","modified":1545053869076},{"_id":"source/_posts/解决远程连接mysql错误1130.md","hash":"bc4901d84826a0d767008c4264ea006b9b2c9a74","modified":1545053869077},{"_id":"source/about/index.md","hash":"c1aa47242edec1d10ae4b9899cd8e9c49f0a6f24","modified":1530697967576},{"_id":"source/categories/index.md","hash":"fd08ba8e8c30780c16e584707fcc7cae4c4d5567","modified":1530697967576},{"_id":"source/tags/index.md","hash":"7e6886a684da03ed158de1b14cd2fde3ccb7f709","modified":1530697967578},{"_id":"source/images/avatar.png","hash":"5d5d9c9cef2be6330eb0734fb52c8e944b9dc52d","modified":1530697967577},{"_id":"themes/hexo-theme-snippet/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1545052652002},{"_id":"themes/hexo-theme-snippet/.git/config","hash":"df40e1ae5b75cd04f7d476826e76ab7f30de669f","modified":1545052652009},{"_id":"themes/hexo-theme-snippet/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1545052648041},{"_id":"themes/hexo-theme-snippet/.git/index","hash":"383e44548c61ac36e34d9313218a79766e34b05f","modified":1545052652088},{"_id":"themes/hexo-theme-snippet/.git/packed-refs","hash":"73f6ccd4546a826c606c01afa7a6da003efd1aee","modified":1545052651995},{"_id":"themes/hexo-theme-snippet/.github/ISSUE_TEMPLATE.md","hash":"c32422877f786b7a1a35aa59fd9bcbc9c869b583","modified":1545052652012},{"_id":"themes/hexo-theme-snippet/languages/default.yml","hash":"61533eb5f4c3e75da584faa54758ad11af9050f7","modified":1545052652020},{"_id":"themes/hexo-theme-snippet/languages/ja.yml","hash":"c9deaf06b0edffdcc12c3e48fa649bac094e3f8c","modified":1545052652020},{"_id":"themes/hexo-theme-snippet/languages/zh-CN.yml","hash":"f64f65bb89dc7cc8e22a7323f5a36c2beb87a2d7","modified":1545052652021},{"_id":"themes/hexo-theme-snippet/languages/zh-TW.yml","hash":"e440a8a29dc4266d9ae06ed3601796f7ef3dddee","modified":1545052652021},{"_id":"themes/hexo-theme-snippet/layout/archive.ejs","hash":"71d95943fe978f6f85922800e801cfdd3d06b958","modified":1545052652045},{"_id":"themes/hexo-theme-snippet/layout/category.ejs","hash":"91d904f43ae2ad5ec2b05bf1e2473657a8315b5c","modified":1545052652046},{"_id":"themes/hexo-theme-snippet/layout/index.ejs","hash":"b0d49ace1c6333b352a37d54c1448b74c8a6c0b0","modified":1545052652046},{"_id":"themes/hexo-theme-snippet/layout/layout.ejs","hash":"8cd7e22e8dde838f9043dbfab86333de6a4d46e2","modified":1545052652047},{"_id":"themes/hexo-theme-snippet/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1545052652048},{"_id":"themes/hexo-theme-snippet/layout/post.ejs","hash":"5e680b006ee207303443889f263b541150791f9b","modified":1545052652048},{"_id":"themes/hexo-theme-snippet/layout/tag.ejs","hash":"e7062d08cfff13dfe8b8c8915a2eb0fafb0ae567","modified":1545052652049},{"_id":"themes/hexo-theme-snippet/scripts/helper.js","hash":"5502d8b4937be2463cd76ca82dcb8bd23c0090f6","modified":1545052652050},{"_id":"themes/hexo-theme-snippet/scripts/process.js","hash":"3b3ca8da64cacd9070ea8d888872348f301be2ac","modified":1545052652051},{"_id":"themes/hexo-theme-snippet/source/favicon.ico","hash":"65f26147ea3433ffd64d3f18bf281af48dc5d06e","modified":1545052652064},{"_id":"themes/hexo-theme-snippet/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1545052648044},{"_id":"themes/hexo-theme-snippet/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1545052648044},{"_id":"themes/hexo-theme-snippet/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1545052648045},{"_id":"themes/hexo-theme-snippet/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1545052648047},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1545052648047},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1545052648048},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1545052648049},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1545052648050},{"_id":"themes/hexo-theme-snippet/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1545052648051},{"_id":"themes/hexo-theme-snippet/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1545052648051},{"_id":"themes/hexo-theme-snippet/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1545052648052},{"_id":"themes/hexo-theme-snippet/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1545052648054},{"_id":"themes/hexo-theme-snippet/.git/logs/HEAD","hash":"27f1b3d74aa9f815015d1f4788a92f1735c450cc","modified":1545052652004},{"_id":"themes/hexo-theme-snippet/.github/ISSUE_TEMPLATE/bug_report.md","hash":"f3a5af2cdf1eb03ddb349e1948501b648d72eed5","modified":1545052652013},{"_id":"themes/hexo-theme-snippet/.github/ISSUE_TEMPLATE/feature_request.md","hash":"73a98280892b1a46317dad9721b6de5244ded398","modified":1545052652014},{"_id":"themes/hexo-theme-snippet/layout/_partial/archive.ejs","hash":"05d4554e401526919b3fce26ac1d2b40a66ec12e","modified":1545052652025},{"_id":"themes/hexo-theme-snippet/layout/_partial/article-meta.ejs","hash":"9b68192044cee093cff20c52bd55423faf52f071","modified":1545052652025},{"_id":"themes/hexo-theme-snippet/layout/_partial/article.ejs","hash":"5f7c7bdfbc09acf5ae86293a9cf6018c812a3250","modified":1545052652026},{"_id":"themes/hexo-theme-snippet/layout/_partial/busuanzi.ejs","hash":"eaec9cbda41e085e5ea627083116b758ffb14c93","modified":1545052652026},{"_id":"themes/hexo-theme-snippet/layout/_partial/copyright.ejs","hash":"48c64e7f5ecd287b6129ff4920446db46d35f183","modified":1545052652027},{"_id":"themes/hexo-theme-snippet/layout/_partial/footer.ejs","hash":"4985f82693b922e03382af244f4699d5703242a6","modified":1545052652027},{"_id":"themes/hexo-theme-snippet/layout/_partial/gallery.ejs","hash":"aecfcee48528c5e8cbf7d23765e030a3fbdd1baf","modified":1545052652028},{"_id":"themes/hexo-theme-snippet/layout/_partial/head.ejs","hash":"57e37e6560bb201b0e2afaa4b8efd20bebb7f26e","modified":1545052652029},{"_id":"themes/hexo-theme-snippet/layout/_partial/header.ejs","hash":"25625d64245a6e378da030ce77ddf6a53213225b","modified":1545052652029},{"_id":"themes/hexo-theme-snippet/layout/_partial/nav.ejs","hash":"197741d4d213fa560e830da855efae286a9729ec","modified":1545052652030},{"_id":"themes/hexo-theme-snippet/layout/_partial/pagination.ejs","hash":"20eff43ad205febe8fc675d669b2be0b88c7158e","modified":1545052652031},{"_id":"themes/hexo-theme-snippet/layout/_partial/reward.ejs","hash":"654834e99a5fc06577dd7ff660157c2d72c0492e","modified":1545052652031},{"_id":"themes/hexo-theme-snippet/layout/_partial/script.ejs","hash":"19b1a16e070deac7ff3cd21598692566ff8b078f","modified":1545052652032},{"_id":"themes/hexo-theme-snippet/layout/_partial/sidebar.ejs","hash":"7a4dd0aa5a5acf3a56734385152c28591c45602e","modified":1545052652032},{"_id":"themes/hexo-theme-snippet/layout/_partial/toc.ejs","hash":"57a144a4680936731c853a5d79c893584fc6a8f0","modified":1545052652033},{"_id":"themes/hexo-theme-snippet/layout/_vendor/baidu_sitemap.ejs","hash":"6ed45973126cd3fc75810d32216760f7be0ef60f","modified":1545052652036},{"_id":"themes/hexo-theme-snippet/layout/_widget/archive.ejs","hash":"5af5f3b56c90c7ebd015233bce1059754c31befb","modified":1545052652041},{"_id":"themes/hexo-theme-snippet/layout/_widget/category.ejs","hash":"dcdb7a08a2f17beaf610de4e937047c291f39a90","modified":1545052652041},{"_id":"themes/hexo-theme-snippet/layout/_widget/friends.ejs","hash":"26eb71dd79f1e7d222b210ecd3afd2e177e1250e","modified":1545052652042},{"_id":"themes/hexo-theme-snippet/layout/_widget/notification.ejs","hash":"bb64a2149ea88c75419b706877e1d1a94d7f3e01","modified":1545052652043},{"_id":"themes/hexo-theme-snippet/layout/_widget/search.ejs","hash":"f94a530179225d88fbc3a7b23ec63e06da30a972","modified":1545052652043},{"_id":"themes/hexo-theme-snippet/layout/_widget/social.ejs","hash":"83be8c71b5b40b79aed50263c28c99282559c23a","modified":1545052652044},{"_id":"themes/hexo-theme-snippet/layout/_widget/tagcloud.ejs","hash":"e5d4a31e96f91179a23c0487bb86e97e1970c9bb","modified":1545052652045},{"_id":"themes/hexo-theme-snippet/source/assets/highlight.pack.js","hash":"b93558f0b97e233132a8ccf7f0275053f2df4628","modified":1545052652052},{"_id":"themes/hexo-theme-snippet/source/assets/tagcanvas.min.js","hash":"8102d7651a1f65b1bd8f8dd62f2d68cdd6b746dd","modified":1545052652054},{"_id":"themes/hexo-theme-snippet/source/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1545052652057},{"_id":"themes/hexo-theme-snippet/source/css/style.css","hash":"ab4a51912ecd14ec899fa384ba460d8c0bf3a2a3","modified":1545052652063},{"_id":"themes/hexo-theme-snippet/source/img/avatar.jpg","hash":"5d5d9c9cef2be6330eb0734fb52c8e944b9dc52d","modified":1545053764602},{"_id":"themes/hexo-theme-snippet/source/img/branding.png","hash":"18bee49d6a4c521ad230047c0b416245e009c2c9","modified":1545052652079},{"_id":"themes/hexo-theme-snippet/source/img/head-img.jpg","hash":"a318d304665c2f410f79e6d2eb1b98119f675b4b","modified":1545052652080},{"_id":"themes/hexo-theme-snippet/source/img/reward-wepay.jpg","hash":"2a56391f2b6282b49e724b72bf610b0dabf53742","modified":1545052652082},{"_id":"themes/hexo-theme-snippet/source/img/timeline-clock.gif","hash":"2bec1bf5efd948ab2e5942b6da8164faa41b62b2","modified":1545052652083},{"_id":"themes/hexo-theme-snippet/source/img/timeline-dot.gif","hash":"c85ef87be5b631c009e7c5737d33b61dfe580a4d","modified":1545052652084},{"_id":"themes/hexo-theme-snippet/source/img/timeline.gif","hash":"b7c7aac44e618df19626d882dc46db48a4aa3673","modified":1545052652085},{"_id":"themes/hexo-theme-snippet/source/js/app.js","hash":"ea09fee9577cda06f27a57a7a889e758545b05cb","modified":1545052652086},{"_id":"themes/hexo-theme-snippet/source/js/search.js","hash":"f5d4be173934c38be5b6e8561bdcabe91c6cc2d7","modified":1545052652087},{"_id":"themes/hexo-theme-snippet/source/assets/valine.min.js","hash":"61d8a2678c19153cda6bbd45746648816cc3400f","modified":1545052652055},{"_id":"themes/hexo-theme-snippet/source/css/bootstrap.min.css","hash":"224c9f9ad11b495358aa61dbd53e838e9b61015b","modified":1545052652056},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545052652076},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545052652078},{"_id":"themes/hexo-theme-snippet/source/img/loading.gif","hash":"6cea4dc953ac09fb744c7fedc12a1f4736faf8ec","modified":1545052652082},{"_id":"themes/hexo-theme-snippet/.git/objects/pack/pack-0dbf8fdd3bd3338bd3db834fc193d14348f2ebaf.idx","hash":"0e2e0008112864874416a6b371da9a5b16457f44","modified":1545052651931},{"_id":"themes/hexo-theme-snippet/.git/refs/heads/master","hash":"af0c4f69e27b2046185116f017fdc46f0160a2a8","modified":1545052652004},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/IE.ejs","hash":"7cdbf6bc632c135925e00d5e27243d94a44c8031","modified":1545052652023},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/seo.ejs","hash":"1eabe3d23806f659206ee4f5ab51c21818112c07","modified":1545052652023},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/style.ejs","hash":"8ff2d85b26e0a5b844bfbfbdd55a7cf5628cfc03","modified":1545052652024},{"_id":"themes/hexo-theme-snippet/layout/_partial/_head-sections/title.ejs","hash":"0b55f4dcab22788bb5b9b4f0246264278145a424","modified":1545052652024},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/baidu.ejs","hash":"e616c6d618d2aa34baa0f244de770abcee8b56f4","modified":1545052652033},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/cnzz.ejs","hash":"e12c2cba1b0a9447e7a46b88a1c4d175e65bbf98","modified":1545052652034},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/google.ejs","hash":"1ee0f1fadedc00633b3ab30b93bdeffe22b18afe","modified":1545052652034},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/index.ejs","hash":"68b3680acd34f62b0b4e0017e3d8bab20d4e459f","modified":1545052652035},{"_id":"themes/hexo-theme-snippet/layout/_vendor/analytics/tencent.ejs","hash":"52e4f2541482ae473a750921dfc6bf088fd78b33","modified":1545052652036},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/changyan.ejs","hash":"c75ac620d6a336921fa61090d22e5cf0a09019a1","modified":1545052652037},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/disqus.ejs","hash":"0713d00c14a9b5f3b6814f5a9ea6cf21142a511c","modified":1545052652037},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/gitment.ejs","hash":"61572c2616c319d798024597c2fb8ca470767ca5","modified":1545052652038},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/index.ejs","hash":"253e8019dd6ad0dff1fc51640c58869d8efe287e","modified":1545052652038},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/livere.ejs","hash":"084108977f3767b961361495216271972b1ada39","modified":1545052652039},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/uyan.ejs","hash":"4d5e43c69eb28d2f45bba3c1cee25d773b02f0d0","modified":1545052652039},{"_id":"themes/hexo-theme-snippet/layout/_vendor/comments/valine.ejs","hash":"ab1d025b2e3f236dd7cd0f6d366a251b8b5ef9bd","modified":1545052652040},{"_id":"themes/hexo-theme-snippet/source/css/less/_highlight.less","hash":"62e0505c4c1be54291964cfad26ac838cee04e0c","modified":1545052652058},{"_id":"themes/hexo-theme-snippet/source/css/less/_mixins.less","hash":"74f250b8c287ca5840f4d09a87eb23b69a722a8a","modified":1545052652059},{"_id":"themes/hexo-theme-snippet/source/css/less/_reward.less","hash":"77c4b55040e6b8063db1404adf60b7492452be01","modified":1545052652059},{"_id":"themes/hexo-theme-snippet/source/css/less/_scrollbar.less","hash":"d6ef59cac4da4994e925786edff920628fa4fb14","modified":1545052652060},{"_id":"themes/hexo-theme-snippet/source/css/less/_style.less","hash":"650808de8006c28c3f423a019558982d310e4a95","modified":1545052652060},{"_id":"themes/hexo-theme-snippet/source/css/less/_timeline.less","hash":"d5c375ecf21cd276725cb6f367c6230b3a2229d7","modified":1545052652061},{"_id":"themes/hexo-theme-snippet/source/css/less/_variable.less","hash":"6879b512c4777d0dbf9f84ed2f488f3ac79d0d73","modified":1545052652061},{"_id":"themes/hexo-theme-snippet/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545052652066},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545052652069},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545052652075},{"_id":"themes/hexo-theme-snippet/.git/logs/refs/heads/master","hash":"27f1b3d74aa9f815015d1f4788a92f1735c450cc","modified":1545052652006},{"_id":"themes/hexo-theme-snippet/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1545052652000},{"_id":"themes/hexo-theme-snippet/.git/logs/refs/remotes/origin/HEAD","hash":"27f1b3d74aa9f815015d1f4788a92f1735c450cc","modified":1545052652000},{"_id":"themes/hexo-theme-snippet/source/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1545052652073},{"_id":"themes/hexo-theme-snippet/.git/objects/pack/pack-0dbf8fdd3bd3338bd3db834fc193d14348f2ebaf.pack","hash":"5f32da53336e34877a501c86c54da0185ce4c739","modified":1545052651936},{"_id":"public/about/index.html","hash":"76cf58df75189ad1d953b74c2e96944f58eab69c","modified":1545055269472},{"_id":"public/categories/index.html","hash":"df35e248b916d7965e790e0885ff6fdee90a539f","modified":1545055269472},{"_id":"public/tags/index.html","hash":"95a5d6a072d7d28b915862810d42727b1392cc7f","modified":1545055269473},{"_id":"public/2018/07/03/javascript-utils/index.html","hash":"462c1a6d0155e12350ce7baa1187c5f196bee841","modified":1545055269473},{"_id":"public/2018/07/03/jquery-file-upload/index.html","hash":"4203f844a4be1db862cbfefe70e0931b35fc4a49","modified":1545055269473},{"_id":"public/2018/07/03/css进阶/index.html","hash":"4c5f1db857dc08ab5c464cc13cf097c4ead545aa","modified":1545055269473},{"_id":"public/2018/07/03/vue踩坑/index.html","hash":"607bc03d85ce5deb5baf8562801a91312a9992cb","modified":1545055269473},{"_id":"public/2018/07/03/websocket教程/index.html","hash":"ec0e896c87e74814d01898134c431e0595832c03","modified":1545055269473},{"_id":"public/2018/07/03/把es6编译成es5（兼容性）/index.html","hash":"c843dda7cf2c16e0fe3a4e87f0c6fffbcb86f334","modified":1545055269473},{"_id":"public/2018/07/02/浏览器全屏显示/index.html","hash":"196f7b7cac0168778fdf93d48f85d29b4c8c60b2","modified":1545055269473},{"_id":"public/2018/07/02/系统集成项目管理工程师/index.html","hash":"8914ad187d6dbd8078fa2b4496e7e1485675a669","modified":1545055269474},{"_id":"public/2018/07/02/input-file大全和完全整合/index.html","hash":"4f56756ce27464c4be69a63cee098404ae28c8bb","modified":1545055269474},{"_id":"public/2018/06/20/prototype、__proto__与constructor/index.html","hash":"497bf4101dcce213679f4f782078d373c85c0f3a","modified":1545055269474},{"_id":"public/2018/05/03/前端兼容性积累/index.html","hash":"9cc2f6bed68100a033b23883240420752133ffda","modified":1545055269474},{"_id":"public/2018/03/19/解决远程连接mysql错误1130/index.html","hash":"f9cf242631635deb7f35ab03f50093389d627f77","modified":1545055269474},{"_id":"public/2017/08/14/html5-postmessage窗口之间的通讯/index.html","hash":"397e82c77d3d12410121b5d1283ce1baab796058","modified":1545055269474},{"_id":"public/2017/04/26/jstl/index.html","hash":"5563d1dbbf3727b6c3a40da07c8095d61cde7105","modified":1545055269474},{"_id":"public/2016/11/04/java/index.html","hash":"9bb9499f7eaf40b7073e718157412e96a80ca267","modified":1545055269474},{"_id":"public/2016/05/09/css3/index.html","hash":"dbccf8f5992d6a770e36e94f0bce96781a0f05f8","modified":1545055269474},{"_id":"public/2016/04/01/php/index.html","hash":"7e1112e67e80d919deeb4f97d9b5a0438be09c00","modified":1545055269475},{"_id":"public/2015/11/25/SUMMARY/index.html","hash":"7a767cf7386f6db3a76f0e9d4e2eddbd8a0764e2","modified":1545055269475},{"_id":"public/2015/11/25/README/index.html","hash":"54b5d44722eb771d7d8916338c5dae2e9b8b8f10","modified":1545055269475},{"_id":"public/categories/工具/index.html","hash":"93b80f529ddb03559064cf9899d5a97614395070","modified":1545055269475},{"_id":"public/categories/数据库/index.html","hash":"bdbe80768d46944e400c3f16179bfbe2b88dc8d7","modified":1545055269475},{"_id":"public/categories/管理/index.html","hash":"20b3baaa36496b61b43f459edaa05d6b787fa8c5","modified":1545055269475},{"_id":"public/tags/建站/index.html","hash":"fa21c103aa64ee0fbbfb96ff817b39818813e479","modified":1545055269476},{"_id":"public/tags/html5/index.html","hash":"af210f1881d6a9d98d5966c1209e0e5557a1d0bf","modified":1545055269476},{"_id":"public/tags/DOM/index.html","hash":"68dade1a8a3669d95937d4b38445bd73ef59781d","modified":1545055269476},{"_id":"public/tags/MIME/index.html","hash":"8b3d69c0065f0061f04f11ca53950568824f5014","modified":1545055269476},{"_id":"public/tags/java/index.html","hash":"3793869a26adaa738737ba0e6ccfc3bcd220bb5c","modified":1545055269476},{"_id":"public/tags/jquery/index.html","hash":"29b968737e2127626d812c16d1c30facefafc071","modified":1545055269476},{"_id":"public/tags/jstl/index.html","hash":"f012a16e35872f52d7aa93ca61e39805a336eade","modified":1545055269476},{"_id":"public/tags/耶鲁表达式/index.html","hash":"6ab4d410c608207b863c740b62fe98711264e3a7","modified":1545055269476},{"_id":"public/tags/继承/index.html","hash":"ce6323320a988d9fc9d87226b9d743f7f2db364e","modified":1545055269477},{"_id":"public/tags/闭包/index.html","hash":"7fefd8be47210cf692f323022c8c1db09f63f11b","modified":1545055269477},{"_id":"public/tags/vue双向绑定原理/index.html","hash":"1dafd0c74cbaa73f24041d9d87d980cdf5ad3b3c","modified":1545055269477},{"_id":"public/tags/linux/index.html","hash":"2f7ff68a5b54cd90194a1e87949a24dd97e291ea","modified":1545055269477},{"_id":"public/tags/mysql/index.html","hash":"5264791e65031f13d1dbd62e240e74fdcaaad4ac","modified":1545055269477},{"_id":"public/tags/php/index.html","hash":"f276d61cf0dbdf20d2cc5270d43d60fe300f7074","modified":1545055269477},{"_id":"public/tags/原型/index.html","hash":"f7f6246cff9f160b75996cdd583a0d0c1970fcac","modified":1545055269477},{"_id":"public/tags/框架/index.html","hash":"722a44715f779b3263719a6961ee88c3cb5eba2e","modified":1545055269478},{"_id":"public/tags/http/index.html","hash":"a3b27414251002aa2423a40e117292dbdd9d25a2","modified":1545055269478},{"_id":"public/tags/聊天通讯/index.html","hash":"866d08c137634d44c78b0874a63ddfe426111b07","modified":1545055269478},{"_id":"public/tags/兼容性/index.html","hash":"fe4881bf00d67b9c725574910d6976f33053cdee","modified":1545055269478},{"_id":"public/tags/软考/index.html","hash":"b787bccc7ead245624153c69508e060f0ee02d71","modified":1545055269478},{"_id":"public/2018/12/01/整合react+mobx+axios+react-router4/index.html","hash":"eae121e1898c81aed37534fb656cc039e9fa4043","modified":1545055269478},{"_id":"public/2018/11/25/搭建webpack+react+antd+less+css_modules/index.html","hash":"e14dc92f668598d717334b6e48f7342cd103fdfa","modified":1545055269478},{"_id":"public/2018/11/02/git常用命令/index.html","hash":"d6257707ea0614d34844bd908fe2a4da3948c4b8","modified":1545055269478},{"_id":"public/2018/07/03/javascript中对象的深度克隆/index.html","hash":"f5e58975fd41c38201d294ea81af9f54c2ef4062","modified":1545055269478},{"_id":"public/2018/07/02/flex弹性布局/index.html","hash":"d95b9ad2a7f613823c4aa0e686c7342e6d1e82e9","modified":1545055269478},{"_id":"public/2018/06/30/hello-world/index.html","hash":"fe30927f202d6e41529e17f665d4d2efe1e94e55","modified":1545055269478},{"_id":"public/2018/06/20/js高级程序设计/index.html","hash":"59265c6316cfc442b5c27297c0e966c268e37501","modified":1545055269479},{"_id":"public/2016/10/10/mysql/index.html","hash":"753309270d74a61ef08e2c1d5461a61718002f15","modified":1545055269479},{"_id":"public/2016/01/27/linux/index.html","hash":"5650379a14ad2bf1d312417deaf4b133b6444f1b","modified":1545055269479},{"_id":"public/archives/index.html","hash":"2073760fbafad068a89971e85cbebaab16cdadbe","modified":1545055269479},{"_id":"public/archives/page/2/index.html","hash":"2073760fbafad068a89971e85cbebaab16cdadbe","modified":1545055269479},{"_id":"public/archives/page/3/index.html","hash":"2073760fbafad068a89971e85cbebaab16cdadbe","modified":1545055269479},{"_id":"public/archives/2015/index.html","hash":"c6670b80819433e234b1ef613c33eb988c32dac8","modified":1545055269479},{"_id":"public/archives/2015/11/index.html","hash":"d4411d0be46b55b32486ff0c2abc9a97b8b5af89","modified":1545055269479},{"_id":"public/archives/2016/index.html","hash":"82591df6cd82ffcc7bcbc550c01da76424fbfe78","modified":1545055269480},{"_id":"public/archives/2016/01/index.html","hash":"408d8365a1d1d927a6bac862262fc64bd258748a","modified":1545055269480},{"_id":"public/archives/2016/04/index.html","hash":"bb018aa42f748fb88be3a4584b1978739eced9d7","modified":1545055269480},{"_id":"public/archives/2016/05/index.html","hash":"b1ef4de4fe86b64e9d13d119c9c1b05e3831c958","modified":1545055269480},{"_id":"public/archives/2016/10/index.html","hash":"e6f3080b8495b94d8629ddd6f82a94b96039cd94","modified":1545055269480},{"_id":"public/archives/2016/11/index.html","hash":"db2d9b9ff6752c944c05b51451e3c26eb46ce180","modified":1545055269480},{"_id":"public/archives/2017/index.html","hash":"53b71ada670c848d189fb39db3ef1aa5a8e367aa","modified":1545055269480},{"_id":"public/archives/2017/04/index.html","hash":"885cab24ef589bd66ca4abc77e68e45002bf6857","modified":1545055269480},{"_id":"public/archives/2017/08/index.html","hash":"3bc8d9b1464c23f75a32807f94af59e62289785c","modified":1545055269480},{"_id":"public/archives/2018/index.html","hash":"136e99c8ba802686534c2974d374b49180e2b78d","modified":1545055269481},{"_id":"public/archives/2018/page/2/index.html","hash":"136e99c8ba802686534c2974d374b49180e2b78d","modified":1545055269481},{"_id":"public/archives/2018/03/index.html","hash":"8152171a6f86645bb5e485bb1c642a0e4a2d2787","modified":1545055269481},{"_id":"public/archives/2018/05/index.html","hash":"a835ec931fa995f49a431941d7ca78a4a950936d","modified":1545055269481},{"_id":"public/archives/2018/06/index.html","hash":"6df00eab829e201a06f146d63585ccd924c1c811","modified":1545055269481},{"_id":"public/archives/2018/07/index.html","hash":"a0004b7e14878c432eaf78d1601c8fead88b9232","modified":1545055269481},{"_id":"public/archives/2018/07/page/2/index.html","hash":"a0004b7e14878c432eaf78d1601c8fead88b9232","modified":1545055269481},{"_id":"public/archives/2018/11/index.html","hash":"9078bd4561afa80963e81015f40bad5c23d3644e","modified":1545055269481},{"_id":"public/archives/2018/12/index.html","hash":"f14276e91f9ee2325343ca5dd2340f84feb20067","modified":1545055269481},{"_id":"public/categories/前端/index.html","hash":"1854f3afe72ffc824643f7d686b248041e61ad1c","modified":1545055269481},{"_id":"public/categories/前端/page/2/index.html","hash":"59d1ab6e4aa41ef532169f694a422aa2bd3c25b9","modified":1545055269482},{"_id":"public/categories/后端/index.html","hash":"607b5b6d9221d139782bd08676dc2d9aaf549e03","modified":1545055269482},{"_id":"public/index.html","hash":"a089ec3f85defb1180740a223c86c2986c991d81","modified":1545055269482},{"_id":"public/page/2/index.html","hash":"5b20885788f165367b0b40eea107e20cefa6bf0a","modified":1545055269482},{"_id":"public/page/3/index.html","hash":"36e26c74436be8a339e9d553d78bc1cc2a966cc9","modified":1545055269482},{"_id":"public/tags/css/index.html","hash":"1e9a1f726bb2bb2f5c70a6fd79712cefcd9e4a16","modified":1545055269482},{"_id":"public/tags/js/index.html","hash":"7b2f7ab04cfc7d042f27dfe9823982de4992491c","modified":1545055269482},{"_id":"public/tags/架构/index.html","hash":"42a7001ea53f834d8c62d745a8dfc56d03e7a6c2","modified":1545055269482},{"_id":"public/images/avatar.png","hash":"5d5d9c9cef2be6330eb0734fb52c8e944b9dc52d","modified":1545055269506},{"_id":"public/favicon.ico","hash":"65f26147ea3433ffd64d3f18bf281af48dc5d06e","modified":1545055269506},{"_id":"public/img/avatar.jpg","hash":"5d5d9c9cef2be6330eb0734fb52c8e944b9dc52d","modified":1545055269506},{"_id":"public/img/branding.png","hash":"18bee49d6a4c521ad230047c0b416245e009c2c9","modified":1545055269506},{"_id":"public/img/head-img.jpg","hash":"a318d304665c2f410f79e6d2eb1b98119f675b4b","modified":1545055269506},{"_id":"public/img/reward-wepay.jpg","hash":"2a56391f2b6282b49e724b72bf610b0dabf53742","modified":1545055269506},{"_id":"public/img/timeline-clock.gif","hash":"2bec1bf5efd948ab2e5942b6da8164faa41b62b2","modified":1545055269506},{"_id":"public/img/timeline-dot.gif","hash":"c85ef87be5b631c009e7c5737d33b61dfe580a4d","modified":1545055269506},{"_id":"public/img/timeline.gif","hash":"b7c7aac44e618df19626d882dc46db48a4aa3673","modified":1545055269507},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545055269518},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545055269520},{"_id":"public/img/loading.gif","hash":"6cea4dc953ac09fb744c7fedc12a1f4736faf8ec","modified":1545055269521},{"_id":"public/assets/highlight.pack.js","hash":"f39840759ec9afe56ec1ca30579d1f1c9d1f6026","modified":1545055269531},{"_id":"public/js/search.js","hash":"a6c7ac73821e5c7db7d4ae6de2d00f44367a858e","modified":1545055269531},{"_id":"public/js/app.js","hash":"eca509fc5b45dcd1a0007c62f740529ca31a122f","modified":1545055269531},{"_id":"public/assets/tagcanvas.min.js","hash":"a14280f4e924428ac0cdbac7635a7279cab1b6bf","modified":1545055269531},{"_id":"public/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1545055269532},{"_id":"public/css/style.css","hash":"2edc5ac5eb44118c44f7e29c4dbbbd0c5c84d113","modified":1545055269532},{"_id":"public/assets/valine.min.js","hash":"d9d4a8f81f288b77b3d0a3866d004e2b5eb30038","modified":1545055269532},{"_id":"public/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1545055269532},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545055269532},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545055269532},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545055269533},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1545055269573}],"Category":[{"name":"前端","_id":"cjpse0ibn00071wu03544fnoo"},{"name":"工具","_id":"cjpse0ich000q1wu08dcj5dpa"},{"name":"后端","_id":"cjpse0icn000x1wu0ofw1pfbx"},{"name":"数据库","_id":"cjpse0id0001d1wu0ulc690s9"},{"name":"管理","_id":"cjpse0ie000271wu0vsiif6l0"}],"Data":[],"Page":[{"title":"about","date":"2018-06-30T16:24:46.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-07-01 00:24:46\n---\n","updated":"2018-07-04T09:52:47.576Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjpse0ib900011wu0kpf8iq0p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-06-30T16:06:59.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-07-01 00:06:59\ntype: \"categories\"\n---\n","updated":"2018-07-04T09:52:47.576Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjpse0ibd00031wu0sg3yc52y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-06-30T08:12:54.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-06-30 16:12:54\ntype: \"tags\"\n---\n","updated":"2018-07-04T09:52:47.578Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjpse0ibh00051wu084xl72wy","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"date":"2015-11-25T02:27:12.000Z","_content":"\n# \n<div align=center><img src=\"https://i.imgur.com/ZlCEbXe.jpg\" /> \n\n\n<p>\n\t<font size=\"4\" weight=\"sold\">个人github主页：</font>\n\t<a href=\"https://github.com/TsangTszKin\" target=\"_blank\"><img height=\"20px\" src=\"https://i.imgur.com/a4zwM3c.jpg\" />\n\t\t<img height=\"20px\" src=\"https://i.imgur.com/bniEcgL.png\" />\n\t</a>\n</p>\n\n\n<p>\n\t<font size=\"4\" weight=\"sold\">个人搭建的博客主页：</font>\n\t<a href=\"https://tsangtszkin.github.io/\" target=\"_blank\">\n\t\t<img height=\"20px\" src=\"https://i.imgur.com/eRoRKX3.gif\" />\n\t</a>\n</p>\n\n<p>\n\t<font size=\"4\" weight=\"sold\">个人instagram主页：</font>\n\t<a href=\"https://www.instagram.com/tsang_tszkin\" target=\"_blank\">\n\t\t<img height=\"20px\" src=\"https://i.imgur.com/xzTRvoT.png\" />\n\t</a>\n</p>\n\n</div>","source":"_posts/README.md","raw":"---\ndate: 2015-11-25 10:27:12\n\n---\n\n# \n<div align=center><img src=\"https://i.imgur.com/ZlCEbXe.jpg\" /> \n\n\n<p>\n\t<font size=\"4\" weight=\"sold\">个人github主页：</font>\n\t<a href=\"https://github.com/TsangTszKin\" target=\"_blank\"><img height=\"20px\" src=\"https://i.imgur.com/a4zwM3c.jpg\" />\n\t\t<img height=\"20px\" src=\"https://i.imgur.com/bniEcgL.png\" />\n\t</a>\n</p>\n\n\n<p>\n\t<font size=\"4\" weight=\"sold\">个人搭建的博客主页：</font>\n\t<a href=\"https://tsangtszkin.github.io/\" target=\"_blank\">\n\t\t<img height=\"20px\" src=\"https://i.imgur.com/eRoRKX3.gif\" />\n\t</a>\n</p>\n\n<p>\n\t<font size=\"4\" weight=\"sold\">个人instagram主页：</font>\n\t<a href=\"https://www.instagram.com/tsang_tszkin\" target=\"_blank\">\n\t\t<img height=\"20px\" src=\"https://i.imgur.com/xzTRvoT.png\" />\n\t</a>\n</p>\n\n</div>","slug":"README","published":1,"updated":"2018-12-17T13:50:24.688Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ib100001wu0e6e2n31z","content":"<p># </p>\n<div align=\"center\"><img src=\"https://i.imgur.com/ZlCEbXe.jpg\"><br><br><br><p><br>    <font size=\"4\" weight=\"sold\">个人github主页：</font><br>    <a href=\"https://github.com/TsangTszKin\" target=\"_blank\"><img height=\"20px\" src=\"https://i.imgur.com/a4zwM3c.jpg\"><br>        <img height=\"20px\" src=\"https://i.imgur.com/bniEcgL.png\"><br>    </a><br></p><br><br><br><p><br>    <font size=\"4\" weight=\"sold\">个人搭建的博客主页：</font><br>    <a href=\"https://tsangtszkin.github.io/\" target=\"_blank\"><br>        <img height=\"20px\" src=\"https://i.imgur.com/eRoRKX3.gif\"><br>    </a><br></p><br><br><p><br>    <font size=\"4\" weight=\"sold\">个人instagram主页：</font><br>    <a href=\"https://www.instagram.com/tsang_tszkin\" target=\"_blank\"><br>        <img height=\"20px\" src=\"https://i.imgur.com/xzTRvoT.png\"><br>    </a><br></p><br><br></div>","site":{"data":{}},"excerpt":"","more":"<p># </p>\n<div align=\"center\"><img src=\"https://i.imgur.com/ZlCEbXe.jpg\"><br><br><br><p><br>    <font size=\"4\" weight=\"sold\">个人github主页：</font><br>    <a href=\"https://github.com/TsangTszKin\" target=\"_blank\"><img height=\"20px\" src=\"https://i.imgur.com/a4zwM3c.jpg\"><br>        <img height=\"20px\" src=\"https://i.imgur.com/bniEcgL.png\"><br>    </a><br></p><br><br><br><p><br>    <font size=\"4\" weight=\"sold\">个人搭建的博客主页：</font><br>    <a href=\"https://tsangtszkin.github.io/\" target=\"_blank\"><br>        <img height=\"20px\" src=\"https://i.imgur.com/eRoRKX3.gif\"><br>    </a><br></p><br><br><p><br>    <font size=\"4\" weight=\"sold\">个人instagram主页：</font><br>    <a href=\"https://www.instagram.com/tsang_tszkin\" target=\"_blank\"><br>        <img height=\"20px\" src=\"https://i.imgur.com/xzTRvoT.png\"><br>    </a><br></p><br><br></div>"},{"date":"2015-11-25T02:27:12.000Z","_content":"\n# Summary\n\n* [前言](README.md)\n* 前端\n    * [css进阶](css进阶.md)\n    * [css3](css3.md)\n    * [flex弹性布局](flex弹性布局.md)\n    * [html5-postmessage窗口之间的通讯](html5-postmessage窗口之间的通讯.md)\n    * [input-file大全和完全整合](input-file大全和完全整合.md)\n    * [javascript中对象的深度克隆](javascript中对象的深度克隆.md)\n    * [jquery-file-upload](jquery-file-upload.md)\n    * [js高级程序设计](js高级程序设计.md)\n    * [javascript-utils](javascript-utils.md)\n    * [前端兼容性积累](前端兼容性积累.md)\n    * [vue踩坑](vue踩坑.md)\n    * [把es6编译成es5（兼容性）](把es6编译成es5（兼容性）.md)\n    * [浏览器全屏显示](浏览器全屏显示.md)\n    * [整合react+mobx+axios+react-router4](整合react+mobx+axios+react-router4.md)\n    * [搭建webpack+react+antd+less+css_modules](搭建webpack+react+antd+less+css_modules.md)\n    * [prototype、 proto 与constructor](prototype、__proto__与constructor.md)\n    * [websocket教程](websocket教程.md)\n* 后端\n    * [linux](linux.md)\n    * [java](java.md)\n    * [jstl](jstl.md)\n    * [php](php.md)\n* 工具\n    * [git常用命令](git常用命令.md)\n    * [HEXO搭建个人博客](hello-world.md)\n* 数据库\n    * [解决远程连接mysql错误1130](解决远程连接mysql错误1130.md)\n    * [mysql](mysql.md)\n* 项目管理\n    * [系统集成项目管理工程师](系统集成项目管理工程师.md)\n\n","source":"_posts/SUMMARY.md","raw":"---\ndate: 2015-11-25 10:27:12\n\n---\n\n# Summary\n\n* [前言](README.md)\n* 前端\n    * [css进阶](css进阶.md)\n    * [css3](css3.md)\n    * [flex弹性布局](flex弹性布局.md)\n    * [html5-postmessage窗口之间的通讯](html5-postmessage窗口之间的通讯.md)\n    * [input-file大全和完全整合](input-file大全和完全整合.md)\n    * [javascript中对象的深度克隆](javascript中对象的深度克隆.md)\n    * [jquery-file-upload](jquery-file-upload.md)\n    * [js高级程序设计](js高级程序设计.md)\n    * [javascript-utils](javascript-utils.md)\n    * [前端兼容性积累](前端兼容性积累.md)\n    * [vue踩坑](vue踩坑.md)\n    * [把es6编译成es5（兼容性）](把es6编译成es5（兼容性）.md)\n    * [浏览器全屏显示](浏览器全屏显示.md)\n    * [整合react+mobx+axios+react-router4](整合react+mobx+axios+react-router4.md)\n    * [搭建webpack+react+antd+less+css_modules](搭建webpack+react+antd+less+css_modules.md)\n    * [prototype、 proto 与constructor](prototype、__proto__与constructor.md)\n    * [websocket教程](websocket教程.md)\n* 后端\n    * [linux](linux.md)\n    * [java](java.md)\n    * [jstl](jstl.md)\n    * [php](php.md)\n* 工具\n    * [git常用命令](git常用命令.md)\n    * [HEXO搭建个人博客](hello-world.md)\n* 数据库\n    * [解决远程连接mysql错误1130](解决远程连接mysql错误1130.md)\n    * [mysql](mysql.md)\n* 项目管理\n    * [系统集成项目管理工程师](系统集成项目管理工程师.md)\n\n","slug":"SUMMARY","published":1,"updated":"2018-12-17T13:52:40.358Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ibb00021wu047gcjkfr","content":"<h1 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h1><ul>\n<li><a href=\"README.md\">前言</a></li>\n<li>前端<ul>\n<li><a href=\"css进阶.md\">css进阶</a></li>\n<li><a href=\"css3.md\">css3</a></li>\n<li><a href=\"flex弹性布局.md\">flex弹性布局</a></li>\n<li><a href=\"html5-postmessage窗口之间的通讯.md\">html5-postmessage窗口之间的通讯</a></li>\n<li><a href=\"input-file大全和完全整合.md\">input-file大全和完全整合</a></li>\n<li><a href=\"javascript中对象的深度克隆.md\">javascript中对象的深度克隆</a></li>\n<li><a href=\"jquery-file-upload.md\">jquery-file-upload</a></li>\n<li><a href=\"js高级程序设计.md\">js高级程序设计</a></li>\n<li><a href=\"javascript-utils.md\">javascript-utils</a></li>\n<li><a href=\"前端兼容性积累.md\">前端兼容性积累</a></li>\n<li><a href=\"vue踩坑.md\">vue踩坑</a></li>\n<li><a href=\"把es6编译成es5（兼容性）.md\">把es6编译成es5（兼容性）</a></li>\n<li><a href=\"浏览器全屏显示.md\">浏览器全屏显示</a></li>\n<li><a href=\"整合react+mobx+axios+react-router4.md\">整合react+mobx+axios+react-router4</a></li>\n<li><a href=\"搭建webpack+react+antd+less+css_modules.md\">搭建webpack+react+antd+less+css_modules</a></li>\n<li><a href=\"prototype、__proto__与constructor.md\">prototype、 proto 与constructor</a></li>\n<li><a href=\"websocket教程.md\">websocket教程</a></li>\n</ul>\n</li>\n<li>后端<ul>\n<li><a href=\"linux.md\">linux</a></li>\n<li><a href=\"java.md\">java</a></li>\n<li><a href=\"jstl.md\">jstl</a></li>\n<li><a href=\"php.md\">php</a></li>\n</ul>\n</li>\n<li>工具<ul>\n<li><a href=\"git常用命令.md\">git常用命令</a></li>\n<li><a href=\"hello-world.md\">HEXO搭建个人博客</a></li>\n</ul>\n</li>\n<li>数据库<ul>\n<li><a href=\"解决远程连接mysql错误1130.md\">解决远程连接mysql错误1130</a></li>\n<li><a href=\"mysql.md\">mysql</a></li>\n</ul>\n</li>\n<li>项目管理<ul>\n<li><a href=\"系统集成项目管理工程师.md\">系统集成项目管理工程师</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h1><ul>\n<li><a href=\"README.md\">前言</a></li>\n<li>前端<ul>\n<li><a href=\"css进阶.md\">css进阶</a></li>\n<li><a href=\"css3.md\">css3</a></li>\n<li><a href=\"flex弹性布局.md\">flex弹性布局</a></li>\n<li><a href=\"html5-postmessage窗口之间的通讯.md\">html5-postmessage窗口之间的通讯</a></li>\n<li><a href=\"input-file大全和完全整合.md\">input-file大全和完全整合</a></li>\n<li><a href=\"javascript中对象的深度克隆.md\">javascript中对象的深度克隆</a></li>\n<li><a href=\"jquery-file-upload.md\">jquery-file-upload</a></li>\n<li><a href=\"js高级程序设计.md\">js高级程序设计</a></li>\n<li><a href=\"javascript-utils.md\">javascript-utils</a></li>\n<li><a href=\"前端兼容性积累.md\">前端兼容性积累</a></li>\n<li><a href=\"vue踩坑.md\">vue踩坑</a></li>\n<li><a href=\"把es6编译成es5（兼容性）.md\">把es6编译成es5（兼容性）</a></li>\n<li><a href=\"浏览器全屏显示.md\">浏览器全屏显示</a></li>\n<li><a href=\"整合react+mobx+axios+react-router4.md\">整合react+mobx+axios+react-router4</a></li>\n<li><a href=\"搭建webpack+react+antd+less+css_modules.md\">搭建webpack+react+antd+less+css_modules</a></li>\n<li><a href=\"prototype、__proto__与constructor.md\">prototype、 proto 与constructor</a></li>\n<li><a href=\"websocket教程.md\">websocket教程</a></li>\n</ul>\n</li>\n<li>后端<ul>\n<li><a href=\"linux.md\">linux</a></li>\n<li><a href=\"java.md\">java</a></li>\n<li><a href=\"jstl.md\">jstl</a></li>\n<li><a href=\"php.md\">php</a></li>\n</ul>\n</li>\n<li>工具<ul>\n<li><a href=\"git常用命令.md\">git常用命令</a></li>\n<li><a href=\"hello-world.md\">HEXO搭建个人博客</a></li>\n</ul>\n</li>\n<li>数据库<ul>\n<li><a href=\"解决远程连接mysql错误1130.md\">解决远程连接mysql错误1130</a></li>\n<li><a href=\"mysql.md\">mysql</a></li>\n</ul>\n</li>\n<li>项目管理<ul>\n<li><a href=\"系统集成项目管理工程师.md\">系统集成项目管理工程师</a></li>\n</ul>\n</li>\n</ul>\n"},{"title":"css3","date":"2016-05-09T15:02:16.000Z","description":"一下关于css3的效果汇集","_content":"\n### 鼠标移上去有动画变化，放大等\n\n\t.img {\n\t    -webkit-transform: scale(1.0);\n\t    -moz-transform: scale(1.0);\n\t    -o-transform: scale(1.0);\n\t    -ms-transform: scale(1.0);\n\t    transform: scale(1.0);\n\t    -webkit-transition: all .5s eas;\n\t    -moz-transition: all .5s ease;\n\t    -o-transition: all .5s ease;\n\t    -ms-transition: all .5s ease;\n\t    transition: all .5s ease;\n\t}\n\t\n\t.img : hover {\n\t    -webkit-transform: scale(1.1);\n\t    -moz-transform: scale(1.1);\n\t    -o-transform: scale(1.1);\n\t    -ms-transform: scale(1.1);\n\t    transform: scale(1.1);\n\t    -webkit-transition: all .5s ease;\n\t    -moz-transition: all .5s ease;\n\t    -o-transition: all .5s ease;\n\t    -ms-transition: all .5s ease;\n\t    transition: all .5s ease;\n\t}\n\n---\n\n### 淡入淡出\n\n\t{\n\t\t-webkit-animation-name: fadeIn; /*动画名称*/\n\t\t-webkit-animation-duration: 1s; /*动画持续时间*/\n\t\t-webkit-animation-iteration-count: 1; /*动画次数*/\n\t\t-webkit-animation-delay: 0s; /*延迟时间*/\n\t}","source":"_posts/css3.md","raw":"---\ntitle: css3\ndate: 2016-05-09 23:02:16\ndescription: '一下关于css3的效果汇集'\ntags: 'css'\ncategories: '前端'\n\n---\n\n### 鼠标移上去有动画变化，放大等\n\n\t.img {\n\t    -webkit-transform: scale(1.0);\n\t    -moz-transform: scale(1.0);\n\t    -o-transform: scale(1.0);\n\t    -ms-transform: scale(1.0);\n\t    transform: scale(1.0);\n\t    -webkit-transition: all .5s eas;\n\t    -moz-transition: all .5s ease;\n\t    -o-transition: all .5s ease;\n\t    -ms-transition: all .5s ease;\n\t    transition: all .5s ease;\n\t}\n\t\n\t.img : hover {\n\t    -webkit-transform: scale(1.1);\n\t    -moz-transform: scale(1.1);\n\t    -o-transform: scale(1.1);\n\t    -ms-transform: scale(1.1);\n\t    transform: scale(1.1);\n\t    -webkit-transition: all .5s ease;\n\t    -moz-transition: all .5s ease;\n\t    -o-transition: all .5s ease;\n\t    -ms-transition: all .5s ease;\n\t    transition: all .5s ease;\n\t}\n\n---\n\n### 淡入淡出\n\n\t{\n\t\t-webkit-animation-name: fadeIn; /*动画名称*/\n\t\t-webkit-animation-duration: 1s; /*动画持续时间*/\n\t\t-webkit-animation-iteration-count: 1; /*动画次数*/\n\t\t-webkit-animation-delay: 0s; /*延迟时间*/\n\t}","slug":"css3","published":1,"updated":"2018-12-17T13:37:49.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ibg00041wu0xpswbkvs","content":"<h3 id=\"鼠标移上去有动画变化，放大等\"><a href=\"#鼠标移上去有动画变化，放大等\" class=\"headerlink\" title=\"鼠标移上去有动画变化，放大等\"></a>鼠标移上去有动画变化，放大等</h3><pre><code>.img {\n    -webkit-transform: scale(1.0);\n    -moz-transform: scale(1.0);\n    -o-transform: scale(1.0);\n    -ms-transform: scale(1.0);\n    transform: scale(1.0);\n    -webkit-transition: all .5s eas;\n    -moz-transition: all .5s ease;\n    -o-transition: all .5s ease;\n    -ms-transition: all .5s ease;\n    transition: all .5s ease;\n}\n\n.img : hover {\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    transform: scale(1.1);\n    -webkit-transition: all .5s ease;\n    -moz-transition: all .5s ease;\n    -o-transition: all .5s ease;\n    -ms-transition: all .5s ease;\n    transition: all .5s ease;\n}\n</code></pre><hr>\n<h3 id=\"淡入淡出\"><a href=\"#淡入淡出\" class=\"headerlink\" title=\"淡入淡出\"></a>淡入淡出</h3><pre><code>{\n    -webkit-animation-name: fadeIn; /*动画名称*/\n    -webkit-animation-duration: 1s; /*动画持续时间*/\n    -webkit-animation-iteration-count: 1; /*动画次数*/\n    -webkit-animation-delay: 0s; /*延迟时间*/\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"鼠标移上去有动画变化，放大等\"><a href=\"#鼠标移上去有动画变化，放大等\" class=\"headerlink\" title=\"鼠标移上去有动画变化，放大等\"></a>鼠标移上去有动画变化，放大等</h3><pre><code>.img {\n    -webkit-transform: scale(1.0);\n    -moz-transform: scale(1.0);\n    -o-transform: scale(1.0);\n    -ms-transform: scale(1.0);\n    transform: scale(1.0);\n    -webkit-transition: all .5s eas;\n    -moz-transition: all .5s ease;\n    -o-transition: all .5s ease;\n    -ms-transition: all .5s ease;\n    transition: all .5s ease;\n}\n\n.img : hover {\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -o-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    transform: scale(1.1);\n    -webkit-transition: all .5s ease;\n    -moz-transition: all .5s ease;\n    -o-transition: all .5s ease;\n    -ms-transition: all .5s ease;\n    transition: all .5s ease;\n}\n</code></pre><hr>\n<h3 id=\"淡入淡出\"><a href=\"#淡入淡出\" class=\"headerlink\" title=\"淡入淡出\"></a>淡入淡出</h3><pre><code>{\n    -webkit-animation-name: fadeIn; /*动画名称*/\n    -webkit-animation-duration: 1s; /*动画持续时间*/\n    -webkit-animation-iteration-count: 1; /*动画次数*/\n    -webkit-animation-delay: 0s; /*延迟时间*/\n}\n</code></pre>"},{"title":"css","date":"2018-07-03T02:56:37.000Z","description":"css样式的积累","_content":"\n##chrome   冲掉它自带的表单样式\n\n\tinput:-webkit-autofill {\n\t-webkit-box-shadow: 0 0 0px 1000px white inset;\n\t-webkit-text-fill-color: black;\n\t}\n\n## 长文本自动换行 样式\n\t｛ \n\t\tword-wrap: break-word;\n\t\tword-break: break-all;\n\t｝\n\n##长文本不换行\n\n\twhite-space: nowrap;\n\n##div等没有disabled属性的标签元素 禁止点击事件 直接样式  \n\n\tpointer-events:none;\n\n##text-overflow:ellipsis的巧妙运用\n\n注意：overflow: hidden; text-overflow:ellipsis;white-space:nowrap;一定要一起用    max-width: 100px;\n\n- 1.一定要给容器定义宽度.\n- 2.如果少了overflow: hidden;文字会横向撑到容易的外面\n- 3.如果少了white-space:nowrap;文字会把容器的高度往下撑；即使你定义了高度，省略号也不会出现，多余的文字会被裁切掉\n- 4.如果少了text-overflow:ellipsis;多余的文字会被裁切掉，就相当于你这样定义text-overflow:clip.\n\n如果容器是table，当文字内容过多时，不换行，而是出现...\n\n##placeholder的样式修改\n\t\n\t   /*placeholder字体颜色*/  \n\t   ::-webkit-input-placeholder { /* WebKit browsers */  \n\t       color:#ccc;  \n\t   }  \n\t   :-moz-placeholder { /* Mozilla Firefox 4 to 18 */  \n\t       color:#ccc;  \n\t   }  \n\t   ::-moz-placeholder { /* Mozilla Firefox 19+ */  \n\t       color:#ccc;opacity:1;  \n\t   }  \n\t   :-ms-input-placeholder { /* Internet Explorer 10+ */  \n\t       color:#ccc !important;  \n\t   }  \n\n##动画，从下到上出现\n\tdiv{\n\t        /*动画*/\n\t       display: block;\n\t       height: 0px;\n\t       animation: myfirst 0.25s;\n\t       -webkit-animation: myfirst 0.25s;\n\t       animation-fill-mode: forwards;\n\t  }\n\t @-webkit-keyframes myfirst\n\t /* Safari and Chrome */\n\t1%{height:0px;}\n\t2%{height:1px;}\n\t4%{height:2px;}\n\t6%{height:3px;}\n\t8%{height:4px;}\n\t10%{height:5px;}\n\t12%{height:6px;}\n\t14%{height:7px;}\n\t16%{height:8px;}\n\t18%{height:9px;}\n\t20%{height:10px;}\n\t22%{height:11px;}\n\t24%{height:12px;}\n\t26%{height:13px;}\n\t28%{height:14px;}\n\t30%{height:15px;}\n\t32%{height:16px;}\n\t34%{height:17px;}\n\t36%{height:18px;}\n\t38%{height:19px;}\n\t40%{height:20px;}\n\t42%{height:21px;}\n\t44%{height:22px;}\n\t46%{height:23px;}\n\t48%{height:24px;}\n\t50%{height:25px;}\n\t52%{height:26px;}\n\t54%{height:27px;}\n\t56%{height:28px;}\n\t58%{height:29px;}\n\t60%{height:30px;}\n\t62%{height:31px;}\n\t64%{height:32px;}\n\t66%{height:33px;}\n\t68%{height:34px;}\n\t70%{height:35px;}\n\t72%{height:36px;}\n\t74%{height:37px;}\n\t76%{height:38px;}\n\t78%{height:39px;}\n\t80%{height:40px;}\n\t82%{height:41px;}\n\t84%{height:42px;}\n\t86%{height:43px;}\n\t88%{height:44px;}\n\t90%{height:45px;}\n\t92%{height:46px;}\n\t94%{height:47px;}\n\t96%{height:48px;}\n\t98%{height:49px;}\n\t100%{height:50px;}\n\t }\n\n## 图片居中显示\n\tdiv {\n\t\tmax-height: 180px;\n\t\tdisplay: -webkit-flex;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\toverflow: hidden;\n\t\talign-items: center;\n\t}\n\timg{\n\t    width: 100%;\n\t}\n\t\n\t<div>\n\t    <img src=\"...\">\n\t</div>\n\n##图片自适应居中显示不变形\n\t.ui-img-div {\n\t\tdisplay: webkit-flex;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\toverflow: hidden;\n\t\talign-items: center;\n\t}\n\t.ui-img-div img {\n\t    width:100%;\n\t}\n\t<div class=\"ui-img-div\" style=\"height: 100%;\">\n\t    <img src=\"\">\n\t</div>\n\n##定义行数多余省略 \n\n\tword-break: break-all;\n\tdisplay: -webkit-box;   \n\t-webkit-line-clamp: 4;//四行\n\t-webkit-box-orient: vertical;\n\toverflow: hidden;","source":"_posts/css进阶.md","raw":"---\ntitle: css\ndate: 2018-07-03 10:56:37\ntags: css\ncategories: '前端'\ndescription: 'css样式的积累'\n\n---\n\n##chrome   冲掉它自带的表单样式\n\n\tinput:-webkit-autofill {\n\t-webkit-box-shadow: 0 0 0px 1000px white inset;\n\t-webkit-text-fill-color: black;\n\t}\n\n## 长文本自动换行 样式\n\t｛ \n\t\tword-wrap: break-word;\n\t\tword-break: break-all;\n\t｝\n\n##长文本不换行\n\n\twhite-space: nowrap;\n\n##div等没有disabled属性的标签元素 禁止点击事件 直接样式  \n\n\tpointer-events:none;\n\n##text-overflow:ellipsis的巧妙运用\n\n注意：overflow: hidden; text-overflow:ellipsis;white-space:nowrap;一定要一起用    max-width: 100px;\n\n- 1.一定要给容器定义宽度.\n- 2.如果少了overflow: hidden;文字会横向撑到容易的外面\n- 3.如果少了white-space:nowrap;文字会把容器的高度往下撑；即使你定义了高度，省略号也不会出现，多余的文字会被裁切掉\n- 4.如果少了text-overflow:ellipsis;多余的文字会被裁切掉，就相当于你这样定义text-overflow:clip.\n\n如果容器是table，当文字内容过多时，不换行，而是出现...\n\n##placeholder的样式修改\n\t\n\t   /*placeholder字体颜色*/  \n\t   ::-webkit-input-placeholder { /* WebKit browsers */  \n\t       color:#ccc;  \n\t   }  \n\t   :-moz-placeholder { /* Mozilla Firefox 4 to 18 */  \n\t       color:#ccc;  \n\t   }  \n\t   ::-moz-placeholder { /* Mozilla Firefox 19+ */  \n\t       color:#ccc;opacity:1;  \n\t   }  \n\t   :-ms-input-placeholder { /* Internet Explorer 10+ */  \n\t       color:#ccc !important;  \n\t   }  \n\n##动画，从下到上出现\n\tdiv{\n\t        /*动画*/\n\t       display: block;\n\t       height: 0px;\n\t       animation: myfirst 0.25s;\n\t       -webkit-animation: myfirst 0.25s;\n\t       animation-fill-mode: forwards;\n\t  }\n\t @-webkit-keyframes myfirst\n\t /* Safari and Chrome */\n\t1%{height:0px;}\n\t2%{height:1px;}\n\t4%{height:2px;}\n\t6%{height:3px;}\n\t8%{height:4px;}\n\t10%{height:5px;}\n\t12%{height:6px;}\n\t14%{height:7px;}\n\t16%{height:8px;}\n\t18%{height:9px;}\n\t20%{height:10px;}\n\t22%{height:11px;}\n\t24%{height:12px;}\n\t26%{height:13px;}\n\t28%{height:14px;}\n\t30%{height:15px;}\n\t32%{height:16px;}\n\t34%{height:17px;}\n\t36%{height:18px;}\n\t38%{height:19px;}\n\t40%{height:20px;}\n\t42%{height:21px;}\n\t44%{height:22px;}\n\t46%{height:23px;}\n\t48%{height:24px;}\n\t50%{height:25px;}\n\t52%{height:26px;}\n\t54%{height:27px;}\n\t56%{height:28px;}\n\t58%{height:29px;}\n\t60%{height:30px;}\n\t62%{height:31px;}\n\t64%{height:32px;}\n\t66%{height:33px;}\n\t68%{height:34px;}\n\t70%{height:35px;}\n\t72%{height:36px;}\n\t74%{height:37px;}\n\t76%{height:38px;}\n\t78%{height:39px;}\n\t80%{height:40px;}\n\t82%{height:41px;}\n\t84%{height:42px;}\n\t86%{height:43px;}\n\t88%{height:44px;}\n\t90%{height:45px;}\n\t92%{height:46px;}\n\t94%{height:47px;}\n\t96%{height:48px;}\n\t98%{height:49px;}\n\t100%{height:50px;}\n\t }\n\n## 图片居中显示\n\tdiv {\n\t\tmax-height: 180px;\n\t\tdisplay: -webkit-flex;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\toverflow: hidden;\n\t\talign-items: center;\n\t}\n\timg{\n\t    width: 100%;\n\t}\n\t\n\t<div>\n\t    <img src=\"...\">\n\t</div>\n\n##图片自适应居中显示不变形\n\t.ui-img-div {\n\t\tdisplay: webkit-flex;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\toverflow: hidden;\n\t\talign-items: center;\n\t}\n\t.ui-img-div img {\n\t    width:100%;\n\t}\n\t<div class=\"ui-img-div\" style=\"height: 100%;\">\n\t    <img src=\"\">\n\t</div>\n\n##定义行数多余省略 \n\n\tword-break: break-all;\n\tdisplay: -webkit-box;   \n\t-webkit-line-clamp: 4;//四行\n\t-webkit-box-orient: vertical;\n\toverflow: hidden;","slug":"css进阶","published":1,"updated":"2018-12-12T13:40:59.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ibk00061wu03eh7ipk5","content":"<p>##chrome   冲掉它自带的表单样式</p>\n<pre><code>input:-webkit-autofill {\n-webkit-box-shadow: 0 0 0px 1000px white inset;\n-webkit-text-fill-color: black;\n}\n</code></pre><h2 id=\"长文本自动换行-样式\"><a href=\"#长文本自动换行-样式\" class=\"headerlink\" title=\"长文本自动换行 样式\"></a>长文本自动换行 样式</h2><pre><code>｛ \n    word-wrap: break-word;\n    word-break: break-all;\n｝\n</code></pre><p>##长文本不换行</p>\n<pre><code>white-space: nowrap;\n</code></pre><p>##div等没有disabled属性的标签元素 禁止点击事件 直接样式  </p>\n<pre><code>pointer-events:none;\n</code></pre><p>##text-overflow:ellipsis的巧妙运用</p>\n<p>注意：overflow: hidden; text-overflow:ellipsis;white-space:nowrap;一定要一起用    max-width: 100px;</p>\n<ul>\n<li>1.一定要给容器定义宽度.</li>\n<li>2.如果少了overflow: hidden;文字会横向撑到容易的外面</li>\n<li>3.如果少了white-space:nowrap;文字会把容器的高度往下撑；即使你定义了高度，省略号也不会出现，多余的文字会被裁切掉</li>\n<li>4.如果少了text-overflow:ellipsis;多余的文字会被裁切掉，就相当于你这样定义text-overflow:clip.</li>\n</ul>\n<p>如果容器是table，当文字内容过多时，不换行，而是出现…</p>\n<p>##placeholder的样式修改</p>\n<pre><code>/*placeholder字体颜色*/  \n::-webkit-input-placeholder { /* WebKit browsers */  \n    color:#ccc;  \n}  \n:-moz-placeholder { /* Mozilla Firefox 4 to 18 */  \n    color:#ccc;  \n}  \n::-moz-placeholder { /* Mozilla Firefox 19+ */  \n    color:#ccc;opacity:1;  \n}  \n:-ms-input-placeholder { /* Internet Explorer 10+ */  \n    color:#ccc !important;  \n}  \n</code></pre><p>##动画，从下到上出现<br>    div{<br>            /<em>动画</em>/<br>           display: block;<br>           height: 0px;<br>           animation: myfirst 0.25s;<br>           -webkit-animation: myfirst 0.25s;<br>           animation-fill-mode: forwards;<br>      }<br>     @-webkit-keyframes myfirst<br>     /<em> Safari and Chrome </em>/<br>    1%{height:0px;}<br>    2%{height:1px;}<br>    4%{height:2px;}<br>    6%{height:3px;}<br>    8%{height:4px;}<br>    10%{height:5px;}<br>    12%{height:6px;}<br>    14%{height:7px;}<br>    16%{height:8px;}<br>    18%{height:9px;}<br>    20%{height:10px;}<br>    22%{height:11px;}<br>    24%{height:12px;}<br>    26%{height:13px;}<br>    28%{height:14px;}<br>    30%{height:15px;}<br>    32%{height:16px;}<br>    34%{height:17px;}<br>    36%{height:18px;}<br>    38%{height:19px;}<br>    40%{height:20px;}<br>    42%{height:21px;}<br>    44%{height:22px;}<br>    46%{height:23px;}<br>    48%{height:24px;}<br>    50%{height:25px;}<br>    52%{height:26px;}<br>    54%{height:27px;}<br>    56%{height:28px;}<br>    58%{height:29px;}<br>    60%{height:30px;}<br>    62%{height:31px;}<br>    64%{height:32px;}<br>    66%{height:33px;}<br>    68%{height:34px;}<br>    70%{height:35px;}<br>    72%{height:36px;}<br>    74%{height:37px;}<br>    76%{height:38px;}<br>    78%{height:39px;}<br>    80%{height:40px;}<br>    82%{height:41px;}<br>    84%{height:42px;}<br>    86%{height:43px;}<br>    88%{height:44px;}<br>    90%{height:45px;}<br>    92%{height:46px;}<br>    94%{height:47px;}<br>    96%{height:48px;}<br>    98%{height:49px;}<br>    100%{height:50px;}<br>     }</p>\n<h2 id=\"图片居中显示\"><a href=\"#图片居中显示\" class=\"headerlink\" title=\"图片居中显示\"></a>图片居中显示</h2><pre><code>div {\n    max-height: 180px;\n    display: -webkit-flex;\n    display: flex;\n    justify-content: center;\n    overflow: hidden;\n    align-items: center;\n}\nimg{\n    width: 100%;\n}\n\n&lt;div&gt;\n    &lt;img src=&quot;...&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>##图片自适应居中显示不变形<br>    .ui-img-div {<br>        display: webkit-flex;<br>        display: flex;<br>        justify-content: center;<br>        overflow: hidden;<br>        align-items: center;<br>    }<br>    .ui-img-div img {<br>        width:100%;<br>    }<br>    <div class=\"ui-img-div\" style=\"height: 100%;\"><br>        <img src=\"\"><br>    </div></p>\n<p>##定义行数多余省略 </p>\n<pre><code>word-break: break-all;\ndisplay: -webkit-box;   \n-webkit-line-clamp: 4;//四行\n-webkit-box-orient: vertical;\noverflow: hidden;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>##chrome   冲掉它自带的表单样式</p>\n<pre><code>input:-webkit-autofill {\n-webkit-box-shadow: 0 0 0px 1000px white inset;\n-webkit-text-fill-color: black;\n}\n</code></pre><h2 id=\"长文本自动换行-样式\"><a href=\"#长文本自动换行-样式\" class=\"headerlink\" title=\"长文本自动换行 样式\"></a>长文本自动换行 样式</h2><pre><code>｛ \n    word-wrap: break-word;\n    word-break: break-all;\n｝\n</code></pre><p>##长文本不换行</p>\n<pre><code>white-space: nowrap;\n</code></pre><p>##div等没有disabled属性的标签元素 禁止点击事件 直接样式  </p>\n<pre><code>pointer-events:none;\n</code></pre><p>##text-overflow:ellipsis的巧妙运用</p>\n<p>注意：overflow: hidden; text-overflow:ellipsis;white-space:nowrap;一定要一起用    max-width: 100px;</p>\n<ul>\n<li>1.一定要给容器定义宽度.</li>\n<li>2.如果少了overflow: hidden;文字会横向撑到容易的外面</li>\n<li>3.如果少了white-space:nowrap;文字会把容器的高度往下撑；即使你定义了高度，省略号也不会出现，多余的文字会被裁切掉</li>\n<li>4.如果少了text-overflow:ellipsis;多余的文字会被裁切掉，就相当于你这样定义text-overflow:clip.</li>\n</ul>\n<p>如果容器是table，当文字内容过多时，不换行，而是出现…</p>\n<p>##placeholder的样式修改</p>\n<pre><code>/*placeholder字体颜色*/  \n::-webkit-input-placeholder { /* WebKit browsers */  \n    color:#ccc;  \n}  \n:-moz-placeholder { /* Mozilla Firefox 4 to 18 */  \n    color:#ccc;  \n}  \n::-moz-placeholder { /* Mozilla Firefox 19+ */  \n    color:#ccc;opacity:1;  \n}  \n:-ms-input-placeholder { /* Internet Explorer 10+ */  \n    color:#ccc !important;  \n}  \n</code></pre><p>##动画，从下到上出现<br>    div{<br>            /<em>动画</em>/<br>           display: block;<br>           height: 0px;<br>           animation: myfirst 0.25s;<br>           -webkit-animation: myfirst 0.25s;<br>           animation-fill-mode: forwards;<br>      }<br>     @-webkit-keyframes myfirst<br>     /<em> Safari and Chrome </em>/<br>    1%{height:0px;}<br>    2%{height:1px;}<br>    4%{height:2px;}<br>    6%{height:3px;}<br>    8%{height:4px;}<br>    10%{height:5px;}<br>    12%{height:6px;}<br>    14%{height:7px;}<br>    16%{height:8px;}<br>    18%{height:9px;}<br>    20%{height:10px;}<br>    22%{height:11px;}<br>    24%{height:12px;}<br>    26%{height:13px;}<br>    28%{height:14px;}<br>    30%{height:15px;}<br>    32%{height:16px;}<br>    34%{height:17px;}<br>    36%{height:18px;}<br>    38%{height:19px;}<br>    40%{height:20px;}<br>    42%{height:21px;}<br>    44%{height:22px;}<br>    46%{height:23px;}<br>    48%{height:24px;}<br>    50%{height:25px;}<br>    52%{height:26px;}<br>    54%{height:27px;}<br>    56%{height:28px;}<br>    58%{height:29px;}<br>    60%{height:30px;}<br>    62%{height:31px;}<br>    64%{height:32px;}<br>    66%{height:33px;}<br>    68%{height:34px;}<br>    70%{height:35px;}<br>    72%{height:36px;}<br>    74%{height:37px;}<br>    76%{height:38px;}<br>    78%{height:39px;}<br>    80%{height:40px;}<br>    82%{height:41px;}<br>    84%{height:42px;}<br>    86%{height:43px;}<br>    88%{height:44px;}<br>    90%{height:45px;}<br>    92%{height:46px;}<br>    94%{height:47px;}<br>    96%{height:48px;}<br>    98%{height:49px;}<br>    100%{height:50px;}<br>     }</p>\n<h2 id=\"图片居中显示\"><a href=\"#图片居中显示\" class=\"headerlink\" title=\"图片居中显示\"></a>图片居中显示</h2><pre><code>div {\n    max-height: 180px;\n    display: -webkit-flex;\n    display: flex;\n    justify-content: center;\n    overflow: hidden;\n    align-items: center;\n}\nimg{\n    width: 100%;\n}\n\n&lt;div&gt;\n    &lt;img src=&quot;...&quot;&gt;\n&lt;/div&gt;\n</code></pre><p>##图片自适应居中显示不变形<br>    .ui-img-div {<br>        display: webkit-flex;<br>        display: flex;<br>        justify-content: center;<br>        overflow: hidden;<br>        align-items: center;<br>    }<br>    .ui-img-div img {<br>        width:100%;<br>    }<br>    <div class=\"ui-img-div\" style=\"height: 100%;\"><br>        <img src=\"\"><br>    </div></p>\n<p>##定义行数多余省略 </p>\n<pre><code>word-break: break-all;\ndisplay: -webkit-box;   \n-webkit-line-clamp: 4;//四行\n-webkit-box-orient: vertical;\noverflow: hidden;\n</code></pre>"},{"title":"git常用命令","date":"2018-11-02T13:46:09.000Z","description":"git常用命令","_content":"\n# git常用命令\n--- \n![](https://i.imgur.com/NVbxiNJ.png)\n\n- Workspace：工作区\n- Index / Stage：暂存区\n- Repository：仓库区（或本地仓库）\n- Remote：远程仓库\n\n## 一、新建代码库\n\n\t# 在当前目录新建一个Git代码库\n\t$ git init\n\t\n\t# 新建一个目录，将其初始化为Git代码库\n\t$ git init [project-name]\n\t\n\t# 下载一个项目和它的整个代码历史\n\t$ git clone [url]\n\n## 二、配置\n### Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n\t# 显示当前的Git配置\n\t$ git config --list\n\t\n\t# 编辑Git配置文件\n\t$ git config -e [--global]\n\t\n\t# 设置提交代码时的用户信息\n\t$ git config [--global] user.name \"[name]\"\n\t$ git config [--global] user.email \"[email address]\"\n\n## 三、增加/删除文件\n\n\t# 添加指定文件到暂存区\n\t$ git add [file1] [file2] ...\n\t\n\t# 添加指定目录到暂存区，包括子目录\n\t$ git add [dir]\n\t\n\t# 添加当前目录的所有文件到暂存区\n\t$ git add .\n\t\n\t# 添加每个变化前，都会要求确认\n\t# 对于同一个文件的多处变化，可以实现分次提交\n\t$ git add -p\n\t\n\t# 删除工作区文件，并且将这次删除放入暂存区\n\t$ git rm [file1] [file2] ...\n\t\n\t# 停止追踪指定文件，但该文件会保留在工作区\n\t$ git rm --cached [file]\n\t\n\t# 改名文件，并且将这个改名放入暂存区\n\t$ git mv [file-original] [file-renamed]\n\n## 四、代码提交\n\n\t# 提交暂存区到仓库区\n\t$ git commit -m [message]\n\t\n\t# 提交暂存区的指定文件到仓库区\n\t$ git commit [file1] [file2] ... -m [message]\n\t\n\t# 提交工作区自上次commit之后的变化，直接到仓库区\n\t$ git commit -a\n\t\n\t# 提交时显示所有diff信息\n\t$ git commit -v\n\t\n\t# 使用一次新的commit，替代上一次提交\n\t# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\t$ git commit --amend -m [message]\n\t\n\t# 重做上一次commit，并包括指定文件的新变化\n\t$ git commit --amend [file1] [file2] ...\n\t\n\n## 五、分支\n\n\t# 列出所有本地分支\n\t$ git branch\n\t\n\t# 列出所有远程分支\n\t$ git branch -r\n\t\n\t# 列出所有本地分支和远程分支\n\t$ git branch -a\n\t\n\t# 新建一个分支，但依然停留在当前分支\n\t$ git branch [branch-name]\n\t\n\t# 新建一个分支，并切换到该分支\n\t$ git checkout -b [branch]\n\t\n\t# 新建一个分支，指向指定commit\n\t$ git branch [branch] [commit]\n\t\n\t# 新建一个分支，与指定的远程分支建立追踪关系\n\t$ git branch --track [branch] [remote-branch]\n\t\n\t# 切换到指定分支，并更新工作区\n\t$ git checkout [branch-name]\n\t\n\t# 切换到上一个分支\n\t$ git checkout -\n\t\n\t# 建立追踪关系，在现有分支与指定的远程分支之间\n\t$ git branch --set-upstream [branch] [remote-branch]\n\t\n\t# 合并指定分支到当前分支\n\t$ git merge [branch]\n\t\n\t# 选择一个commit，合并进当前分支\n\t$ git cherry-pick [commit]\n\t\n\t# 删除分支\n\t$ git branch -d [branch-name]\n\t\n\t# 删除远程分支\n\t$ git push origin --delete [branch-name]\n\t$ git branch -dr [remote/branch]\n\n## 六、标签\n\n\t# 列出所有tag\n\t$ git tag\n\t\n\t# 新建一个tag在当前commit\n\t$ git tag [tag]\n\t\n\t# 新建一个tag在指定commit\n\t$ git tag [tag] [commit]\n\t\n\t# 删除本地tag\n\t$ git tag -d [tag]\n\t\n\t# 删除远程tag\n\t$ git push origin :refs/tags/[tagName]\n\t\n\t# 查看tag信息\n\t$ git show [tag]\n\t\n\t# 提交指定tag\n\t$ git push [remote] [tag]\n\t\n\t# 提交所有tag\n\t$ git push [remote] --tags\n\t\n\t# 新建一个分支，指向某个tag\n\t$ git checkout -b [branch] [tag]\n\n\n## 七、查看信息\n\n\t# 显示有变更的文件\n\t$ git status\n\t\n\t# 显示当前分支的版本历史\n\t$ git log\n\t\n\t# 显示commit历史，以及每次commit发生变更的文件\n\t$ git log --stat\n\t\n\t# 搜索提交历史，根据关键词\n\t$ git log -S [keyword]\n\t\n\t# 显示某个commit之后的所有变动，每个commit占据一行\n\t$ git log [tag] HEAD --pretty=format:%s\n\t\n\t# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\t$ git log [tag] HEAD --grep feature\n\t\n\t# 显示某个文件的版本历史，包括文件改名\n\t$ git log --follow [file]\n\t$ git whatchanged [file]\n\t\n\t# 显示指定文件相关的每一次diff\n\t$ git log -p [file]\n\t\n\t# 显示过去5次提交\n\t$ git log -5 --pretty --oneline\n\t\n\t# 显示所有提交过的用户，按提交次数排序\n\t$ git shortlog -sn\n\t\n\t# 显示指定文件是什么人在什么时间修改过\n\t$ git blame [file]\n\t\n\t# 显示暂存区和工作区的差异\n\t$ git diff\n\t\n\t# 显示暂存区和上一个commit的差异\n\t$ git diff --cached [file]\n\t\n\t# 显示工作区与当前分支最新commit之间的差异\n\t$ git diff HEAD\n\t\n\t# 显示两次提交之间的差异\n\t$ git diff [first-branch]...[second-branch]\n\t\n\t# 显示今天你写了多少行代码\n\t$ git diff --shortstat \"@{0 day ago}\"\n\t\n\t# 显示某次提交的元数据和内容变化\n\t$ git show [commit]\n\t\n\t# 显示某次提交发生变化的文件\n\t$ git show --name-only [commit]\n\t\n\t# 显示某次提交时，某个文件的内容\n\t$ git show [commit]:[filename]\n\t\n\t# 显示当前分支的最近几次提交\n\t$ git reflog\n\n## 八、远程同步\n\n\t# 下载远程仓库的所有变动\n\t$ git fetch [remote]\n\t\n\t# 显示所有远程仓库\n\t$ git remote -v\n\t\n\t# 显示某个远程仓库的信息\n\t$ git remote show [remote]\n\t\n\t# 增加一个新的远程仓库，并命名\n\t$ git remote add [shortname] [url]\n\t\n\t# 取回远程仓库的变化，并与本地分支合并\n\t$ git pull [remote] [branch]\n\t\n\t# 上传本地指定分支到远程仓库\n\t$ git push [remote] [branch]\n\t\n\t# 强行推送当前分支到远程仓库，即使有冲突\n\t$ git push [remote] --force 或者 git push [remote] -f\n\t\n\t# 推送所有分支到远程仓库\n\t$ git push [remote] --all\n\n\t# 强制覆盖本地命令（单条执行）\n\t$ git fetch --all && git reset --hard origin/master && git pull\n\n### git push延伸\n\n在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。\n\ngit push的一般形式为 \n\n\tgit push <远程主机名> <本地分支名>  <远程分支名> \n\n例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，\n\n第一个master是本地分支名，第二个master是远程分支名。\n\n1. ### git push origin master\n \n\t如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建\n\n2. ### git push origin ：refs/for/master\n\t如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin --delete master\n\n3. ### git push origin\n\t如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 \n\n4. ### git push\n\n\t如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名\n\n5. ### git push 的其他命令\n\n\t这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：\n\n　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，\n\n　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式\n\n　　　　　　如果想更改设置，可以使用git config命令。git config --global push.default matching OR git config --global push.default simple；可以使用git config -l 查看配置\n\n　　（2） git push --all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项\n\n　　（3） git push --force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。\n\n　　（4） git push origin --tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令\n\n\n## 九、撤销\n\n\t# 恢复暂存区的指定文件到工作区\n\t$ git checkout [file]\n\t\n\t# 恢复某个commit的指定文件到暂存区和工作区\n\t$ git checkout [commit] [file]\n\t\n\t# 恢复暂存区的所有文件到工作区\n\t$ git checkout .\n\t\n\t# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\t$ git reset [file]\n\t\n\t# 重置暂存区与工作区，与上一次commit保持一致\n\t$ git reset --hard\n\t\n\t# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\t$ git reset [commit]\n\t\n\t# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\t$ git reset --hard [commit]\n\t\n\t# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\t$ git reset --keep [commit]\n\t\n\t# 新建一个commit，用来撤销指定commit\n\t# 后者的所有变化都将被前者抵消，并且应用到当前分支\n\t$ git revert [commit]\n\t\n\t# 暂时将未提交的变化移除，稍后再移入\n\t$ git stash\n\t$ git stash pop\n\n## 十、其他\n\n\t# 生成一个可供发布的压缩包\n\t$ git archive\n\n# （完）","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ndate: 2018-11-02 21:46:09\ntags: 'css'\ncategories: '前端'\ndescription: 'git常用命令'\n\n---\n\n# git常用命令\n--- \n![](https://i.imgur.com/NVbxiNJ.png)\n\n- Workspace：工作区\n- Index / Stage：暂存区\n- Repository：仓库区（或本地仓库）\n- Remote：远程仓库\n\n## 一、新建代码库\n\n\t# 在当前目录新建一个Git代码库\n\t$ git init\n\t\n\t# 新建一个目录，将其初始化为Git代码库\n\t$ git init [project-name]\n\t\n\t# 下载一个项目和它的整个代码历史\n\t$ git clone [url]\n\n## 二、配置\n### Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n\t# 显示当前的Git配置\n\t$ git config --list\n\t\n\t# 编辑Git配置文件\n\t$ git config -e [--global]\n\t\n\t# 设置提交代码时的用户信息\n\t$ git config [--global] user.name \"[name]\"\n\t$ git config [--global] user.email \"[email address]\"\n\n## 三、增加/删除文件\n\n\t# 添加指定文件到暂存区\n\t$ git add [file1] [file2] ...\n\t\n\t# 添加指定目录到暂存区，包括子目录\n\t$ git add [dir]\n\t\n\t# 添加当前目录的所有文件到暂存区\n\t$ git add .\n\t\n\t# 添加每个变化前，都会要求确认\n\t# 对于同一个文件的多处变化，可以实现分次提交\n\t$ git add -p\n\t\n\t# 删除工作区文件，并且将这次删除放入暂存区\n\t$ git rm [file1] [file2] ...\n\t\n\t# 停止追踪指定文件，但该文件会保留在工作区\n\t$ git rm --cached [file]\n\t\n\t# 改名文件，并且将这个改名放入暂存区\n\t$ git mv [file-original] [file-renamed]\n\n## 四、代码提交\n\n\t# 提交暂存区到仓库区\n\t$ git commit -m [message]\n\t\n\t# 提交暂存区的指定文件到仓库区\n\t$ git commit [file1] [file2] ... -m [message]\n\t\n\t# 提交工作区自上次commit之后的变化，直接到仓库区\n\t$ git commit -a\n\t\n\t# 提交时显示所有diff信息\n\t$ git commit -v\n\t\n\t# 使用一次新的commit，替代上一次提交\n\t# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\t$ git commit --amend -m [message]\n\t\n\t# 重做上一次commit，并包括指定文件的新变化\n\t$ git commit --amend [file1] [file2] ...\n\t\n\n## 五、分支\n\n\t# 列出所有本地分支\n\t$ git branch\n\t\n\t# 列出所有远程分支\n\t$ git branch -r\n\t\n\t# 列出所有本地分支和远程分支\n\t$ git branch -a\n\t\n\t# 新建一个分支，但依然停留在当前分支\n\t$ git branch [branch-name]\n\t\n\t# 新建一个分支，并切换到该分支\n\t$ git checkout -b [branch]\n\t\n\t# 新建一个分支，指向指定commit\n\t$ git branch [branch] [commit]\n\t\n\t# 新建一个分支，与指定的远程分支建立追踪关系\n\t$ git branch --track [branch] [remote-branch]\n\t\n\t# 切换到指定分支，并更新工作区\n\t$ git checkout [branch-name]\n\t\n\t# 切换到上一个分支\n\t$ git checkout -\n\t\n\t# 建立追踪关系，在现有分支与指定的远程分支之间\n\t$ git branch --set-upstream [branch] [remote-branch]\n\t\n\t# 合并指定分支到当前分支\n\t$ git merge [branch]\n\t\n\t# 选择一个commit，合并进当前分支\n\t$ git cherry-pick [commit]\n\t\n\t# 删除分支\n\t$ git branch -d [branch-name]\n\t\n\t# 删除远程分支\n\t$ git push origin --delete [branch-name]\n\t$ git branch -dr [remote/branch]\n\n## 六、标签\n\n\t# 列出所有tag\n\t$ git tag\n\t\n\t# 新建一个tag在当前commit\n\t$ git tag [tag]\n\t\n\t# 新建一个tag在指定commit\n\t$ git tag [tag] [commit]\n\t\n\t# 删除本地tag\n\t$ git tag -d [tag]\n\t\n\t# 删除远程tag\n\t$ git push origin :refs/tags/[tagName]\n\t\n\t# 查看tag信息\n\t$ git show [tag]\n\t\n\t# 提交指定tag\n\t$ git push [remote] [tag]\n\t\n\t# 提交所有tag\n\t$ git push [remote] --tags\n\t\n\t# 新建一个分支，指向某个tag\n\t$ git checkout -b [branch] [tag]\n\n\n## 七、查看信息\n\n\t# 显示有变更的文件\n\t$ git status\n\t\n\t# 显示当前分支的版本历史\n\t$ git log\n\t\n\t# 显示commit历史，以及每次commit发生变更的文件\n\t$ git log --stat\n\t\n\t# 搜索提交历史，根据关键词\n\t$ git log -S [keyword]\n\t\n\t# 显示某个commit之后的所有变动，每个commit占据一行\n\t$ git log [tag] HEAD --pretty=format:%s\n\t\n\t# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\t$ git log [tag] HEAD --grep feature\n\t\n\t# 显示某个文件的版本历史，包括文件改名\n\t$ git log --follow [file]\n\t$ git whatchanged [file]\n\t\n\t# 显示指定文件相关的每一次diff\n\t$ git log -p [file]\n\t\n\t# 显示过去5次提交\n\t$ git log -5 --pretty --oneline\n\t\n\t# 显示所有提交过的用户，按提交次数排序\n\t$ git shortlog -sn\n\t\n\t# 显示指定文件是什么人在什么时间修改过\n\t$ git blame [file]\n\t\n\t# 显示暂存区和工作区的差异\n\t$ git diff\n\t\n\t# 显示暂存区和上一个commit的差异\n\t$ git diff --cached [file]\n\t\n\t# 显示工作区与当前分支最新commit之间的差异\n\t$ git diff HEAD\n\t\n\t# 显示两次提交之间的差异\n\t$ git diff [first-branch]...[second-branch]\n\t\n\t# 显示今天你写了多少行代码\n\t$ git diff --shortstat \"@{0 day ago}\"\n\t\n\t# 显示某次提交的元数据和内容变化\n\t$ git show [commit]\n\t\n\t# 显示某次提交发生变化的文件\n\t$ git show --name-only [commit]\n\t\n\t# 显示某次提交时，某个文件的内容\n\t$ git show [commit]:[filename]\n\t\n\t# 显示当前分支的最近几次提交\n\t$ git reflog\n\n## 八、远程同步\n\n\t# 下载远程仓库的所有变动\n\t$ git fetch [remote]\n\t\n\t# 显示所有远程仓库\n\t$ git remote -v\n\t\n\t# 显示某个远程仓库的信息\n\t$ git remote show [remote]\n\t\n\t# 增加一个新的远程仓库，并命名\n\t$ git remote add [shortname] [url]\n\t\n\t# 取回远程仓库的变化，并与本地分支合并\n\t$ git pull [remote] [branch]\n\t\n\t# 上传本地指定分支到远程仓库\n\t$ git push [remote] [branch]\n\t\n\t# 强行推送当前分支到远程仓库，即使有冲突\n\t$ git push [remote] --force 或者 git push [remote] -f\n\t\n\t# 推送所有分支到远程仓库\n\t$ git push [remote] --all\n\n\t# 强制覆盖本地命令（单条执行）\n\t$ git fetch --all && git reset --hard origin/master && git pull\n\n### git push延伸\n\n在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。\n\ngit push的一般形式为 \n\n\tgit push <远程主机名> <本地分支名>  <远程分支名> \n\n例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，\n\n第一个master是本地分支名，第二个master是远程分支名。\n\n1. ### git push origin master\n \n\t如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建\n\n2. ### git push origin ：refs/for/master\n\t如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin --delete master\n\n3. ### git push origin\n\t如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 \n\n4. ### git push\n\n\t如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名\n\n5. ### git push 的其他命令\n\n\t这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：\n\n　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，\n\n　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式\n\n　　　　　　如果想更改设置，可以使用git config命令。git config --global push.default matching OR git config --global push.default simple；可以使用git config -l 查看配置\n\n　　（2） git push --all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项\n\n　　（3） git push --force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。\n\n　　（4） git push origin --tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令\n\n\n## 九、撤销\n\n\t# 恢复暂存区的指定文件到工作区\n\t$ git checkout [file]\n\t\n\t# 恢复某个commit的指定文件到暂存区和工作区\n\t$ git checkout [commit] [file]\n\t\n\t# 恢复暂存区的所有文件到工作区\n\t$ git checkout .\n\t\n\t# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\t$ git reset [file]\n\t\n\t# 重置暂存区与工作区，与上一次commit保持一致\n\t$ git reset --hard\n\t\n\t# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\t$ git reset [commit]\n\t\n\t# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\t$ git reset --hard [commit]\n\t\n\t# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\t$ git reset --keep [commit]\n\t\n\t# 新建一个commit，用来撤销指定commit\n\t# 后者的所有变化都将被前者抵消，并且应用到当前分支\n\t$ git revert [commit]\n\t\n\t# 暂时将未提交的变化移除，稍后再移入\n\t$ git stash\n\t$ git stash pop\n\n## 十、其他\n\n\t# 生成一个可供发布的压缩包\n\t$ git archive\n\n# （完）","slug":"git常用命令","published":1,"updated":"2018-12-17T13:37:49.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ibs00091wu0vqfqmj6q","content":"<h1 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h1><hr>\n<p><img src=\"https://i.imgur.com/NVbxiNJ.png\" alt=\"\"></p>\n<ul>\n<li>Workspace：工作区</li>\n<li>Index / Stage：暂存区</li>\n<li>Repository：仓库区（或本地仓库）</li>\n<li>Remote：远程仓库</li>\n</ul>\n<h2 id=\"一、新建代码库\"><a href=\"#一、新建代码库\" class=\"headerlink\" title=\"一、新建代码库\"></a>一、新建代码库</h2><pre><code># 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n</code></pre><h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h2><h3 id=\"Git的设置文件为-gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\"><a href=\"#Git的设置文件为-gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\" class=\"headerlink\" title=\"Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\"></a>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</h3><pre><code># 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name &quot;[name]&quot;\n$ git config [--global] user.email &quot;[email address]&quot;\n</code></pre><h2 id=\"三、增加-删除文件\"><a href=\"#三、增加-删除文件\" class=\"headerlink\" title=\"三、增加/删除文件\"></a>三、增加/删除文件</h2><pre><code># 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n</code></pre><h2 id=\"四、代码提交\"><a href=\"#四、代码提交\" class=\"headerlink\" title=\"四、代码提交\"></a>四、代码提交</h2><pre><code># 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n</code></pre><h2 id=\"五、分支\"><a href=\"#五、分支\" class=\"headerlink\" title=\"五、分支\"></a>五、分支</h2><pre><code># 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n</code></pre><h2 id=\"六、标签\"><a href=\"#六、标签\" class=\"headerlink\" title=\"六、标签\"></a>六、标签</h2><pre><code># 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n</code></pre><h2 id=\"七、查看信息\"><a href=\"#七、查看信息\" class=\"headerlink\" title=\"七、查看信息\"></a>七、查看信息</h2><pre><code># 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat &quot;@{0 day ago}&quot;\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n</code></pre><h2 id=\"八、远程同步\"><a href=\"#八、远程同步\" class=\"headerlink\" title=\"八、远程同步\"></a>八、远程同步</h2><pre><code># 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force 或者 git push [remote] -f\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n# 强制覆盖本地命令（单条执行）\n$ git fetch --all &amp;&amp; git reset --hard origin/master &amp;&amp; git pull\n</code></pre><h3 id=\"git-push延伸\"><a href=\"#git-push延伸\" class=\"headerlink\" title=\"git push延伸\"></a>git push延伸</h3><p>在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。</p>\n<p>git push的一般形式为 </p>\n<pre><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt; \n</code></pre><p>例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，</p>\n<p>第一个master是本地分支名，第二个master是远程分支名。</p>\n<ol>\n<li><h3 id=\"git-push-origin-master\"><a href=\"#git-push-origin-master\" class=\"headerlink\" title=\"git push origin master\"></a>git push origin master</h3><p> 如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</p>\n</li>\n<li><h3 id=\"git-push-origin-：refs-for-master\"><a href=\"#git-push-origin-：refs-for-master\" class=\"headerlink\" title=\"git push origin ：refs/for/master\"></a>git push origin ：refs/for/master</h3><p> 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin –delete master</p>\n</li>\n<li><h3 id=\"git-push-origin\"><a href=\"#git-push-origin\" class=\"headerlink\" title=\"git push origin\"></a>git push origin</h3><p> 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 </p>\n</li>\n<li><h3 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h3><p> 如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名</p>\n</li>\n<li><h3 id=\"git-push-的其他命令\"><a href=\"#git-push-的其他命令\" class=\"headerlink\" title=\"git push 的其他命令\"></a>git push 的其他命令</h3><p> 这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：</p>\n</li>\n</ol>\n<p>　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，</p>\n<p>　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式</p>\n<p>　　　　　　如果想更改设置，可以使用git config命令。git config –global push.default matching OR git config –global push.default simple；可以使用git config -l 查看配置</p>\n<p>　　（2） git push –all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项</p>\n<p>　　（3） git push –force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。</p>\n<p>　　（4） git push origin –tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令</p>\n<h2 id=\"九、撤销\"><a href=\"#九、撤销\" class=\"headerlink\" title=\"九、撤销\"></a>九、撤销</h2><pre><code># 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n</code></pre><h2 id=\"十、其他\"><a href=\"#十、其他\" class=\"headerlink\" title=\"十、其他\"></a>十、其他</h2><pre><code># 生成一个可供发布的压缩包\n$ git archive\n</code></pre><h1 id=\"（完）\"><a href=\"#（完）\" class=\"headerlink\" title=\"（完）\"></a>（完）</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h1><hr>\n<p><img src=\"https://i.imgur.com/NVbxiNJ.png\" alt=\"\"></p>\n<ul>\n<li>Workspace：工作区</li>\n<li>Index / Stage：暂存区</li>\n<li>Repository：仓库区（或本地仓库）</li>\n<li>Remote：远程仓库</li>\n</ul>\n<h2 id=\"一、新建代码库\"><a href=\"#一、新建代码库\" class=\"headerlink\" title=\"一、新建代码库\"></a>一、新建代码库</h2><pre><code># 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n</code></pre><h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h2><h3 id=\"Git的设置文件为-gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\"><a href=\"#Git的设置文件为-gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\" class=\"headerlink\" title=\"Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\"></a>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</h3><pre><code># 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name &quot;[name]&quot;\n$ git config [--global] user.email &quot;[email address]&quot;\n</code></pre><h2 id=\"三、增加-删除文件\"><a href=\"#三、增加-删除文件\" class=\"headerlink\" title=\"三、增加/删除文件\"></a>三、增加/删除文件</h2><pre><code># 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n</code></pre><h2 id=\"四、代码提交\"><a href=\"#四、代码提交\" class=\"headerlink\" title=\"四、代码提交\"></a>四、代码提交</h2><pre><code># 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n</code></pre><h2 id=\"五、分支\"><a href=\"#五、分支\" class=\"headerlink\" title=\"五、分支\"></a>五、分支</h2><pre><code># 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n</code></pre><h2 id=\"六、标签\"><a href=\"#六、标签\" class=\"headerlink\" title=\"六、标签\"></a>六、标签</h2><pre><code># 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n</code></pre><h2 id=\"七、查看信息\"><a href=\"#七、查看信息\" class=\"headerlink\" title=\"七、查看信息\"></a>七、查看信息</h2><pre><code># 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat &quot;@{0 day ago}&quot;\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n</code></pre><h2 id=\"八、远程同步\"><a href=\"#八、远程同步\" class=\"headerlink\" title=\"八、远程同步\"></a>八、远程同步</h2><pre><code># 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force 或者 git push [remote] -f\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n# 强制覆盖本地命令（单条执行）\n$ git fetch --all &amp;&amp; git reset --hard origin/master &amp;&amp; git pull\n</code></pre><h3 id=\"git-push延伸\"><a href=\"#git-push延伸\" class=\"headerlink\" title=\"git push延伸\"></a>git push延伸</h3><p>在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。</p>\n<p>git push的一般形式为 </p>\n<pre><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;  &lt;远程分支名&gt; \n</code></pre><p>例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，</p>\n<p>第一个master是本地分支名，第二个master是远程分支名。</p>\n<ol>\n<li><h3 id=\"git-push-origin-master\"><a href=\"#git-push-origin-master\" class=\"headerlink\" title=\"git push origin master\"></a>git push origin master</h3><p> 如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</p>\n</li>\n<li><h3 id=\"git-push-origin-：refs-for-master\"><a href=\"#git-push-origin-：refs-for-master\" class=\"headerlink\" title=\"git push origin ：refs/for/master\"></a>git push origin ：refs/for/master</h3><p> 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin –delete master</p>\n</li>\n<li><h3 id=\"git-push-origin\"><a href=\"#git-push-origin\" class=\"headerlink\" title=\"git push origin\"></a>git push origin</h3><p> 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 </p>\n</li>\n<li><h3 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h3><p> 如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名</p>\n</li>\n<li><h3 id=\"git-push-的其他命令\"><a href=\"#git-push-的其他命令\" class=\"headerlink\" title=\"git push 的其他命令\"></a>git push 的其他命令</h3><p> 这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：</p>\n</li>\n</ol>\n<p>　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，</p>\n<p>　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式</p>\n<p>　　　　　　如果想更改设置，可以使用git config命令。git config –global push.default matching OR git config –global push.default simple；可以使用git config -l 查看配置</p>\n<p>　　（2） git push –all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项</p>\n<p>　　（3） git push –force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。</p>\n<p>　　（4） git push origin –tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令</p>\n<h2 id=\"九、撤销\"><a href=\"#九、撤销\" class=\"headerlink\" title=\"九、撤销\"></a>九、撤销</h2><pre><code># 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n</code></pre><h2 id=\"十、其他\"><a href=\"#十、其他\" class=\"headerlink\" title=\"十、其他\"></a>十、其他</h2><pre><code># 生成一个可供发布的压缩包\n$ git archive\n</code></pre><h1 id=\"（完）\"><a href=\"#（完）\" class=\"headerlink\" title=\"（完）\"></a>（完）</h1>"},{"title":"flex弹性布局","date":"2018-07-02T13:46:09.000Z","description":"Flex 布局教程：语法篇 作者： 阮一峰 日期： 2015年7月10日","_content":"\n\n网页布局（layout）是 CSS 的一个重点应用。\n\n![](https://i.imgur.com/76tJ32D.gif)\n\n布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n\n2009年，W3C 提出了一种新的方案----Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。\n\n![](https://i.imgur.com/eQyXvLz.jpg)\n\nFlex 布局将成为未来布局的首选方案。本文介绍它的语法，下一篇文章给出常见布局的 Flex 写法。网友 JailBreak 为本文的所有示例制作了 Demo，也可以参考。\n以下内容主要参考了下面两篇文章：A Complete Guide to Flexbox 和 A Visual Guide to CSS3 Flexbox Properties。\n\n\n##一、Flex 布局是什么？\nFlex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n任何一个容器都可以指定为 Flex 布局。\n\n\t.box{\n\t  display: flex;\n\t}\n\n行内元素也可以使用 Flex 布局。\n\n\t.box{\n\t  display: inline-flex;\n\t}\n\nWebkit 内核的浏览器，必须加上-webkit前缀。\n\n\t.box{\n\t  display: -webkit-flex; /* Safari */\n\t  display: flex;\n\t}\n\n注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。\n##二、基本概念\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n![](https://i.imgur.com/5Fv8XMF.png)\n\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。\n项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。\n##三、容器的属性\n以下6个属性设置在容器上。\n\n- flex-direction\n- flex-wrap\n- flex-flow\n- justify-content\n- align-items\n- align-content\n###3.1 flex-direction属性\nflex-direction属性决定主轴的方向（即项目的排列方向）。\n\n\t.box {\n\t  flex-direction: row | row-reverse | column | column-reverse;\n\t}\n\n![](https://i.imgur.com/hb86mKr.png)\n\n\n它可能有4个值。\n\n- row（默认值）：主轴为水平方向，起点在左端。\n- row-reverse：主轴为水平方向，起点在右端。\n- column：主轴为垂直方向，起点在上沿。\n- column-reverse：主轴为垂直方向，起点在下沿。\n###3.2 flex-wrap属性\n默认情况下，项目都排在一条线（又称\"轴线\"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\n\n![](https://i.imgur.com/3cNuqTd.png)\n\n\n\t.box{\n\t  flex-wrap: nowrap | wrap | wrap-reverse;\n\t}\n\n它可能取三个值。\n\n- （1）nowrap（默认）：不换行。\n![](https://i.imgur.com/By5ESfI.png)\n- （2）wrap：换行，第一行在上方。\n![](https://i.imgur.com/3ekxcWd.jpg)\n- （3）wrap-reverse：换行，第一行在下方。\n![](https://i.imgur.com/vZYkNBG.jpg)\n###3.3 flex-flow\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n\n\t.box {\n\t  flex-flow: <flex-direction> || <flex-wrap>;\n\t}\n\n###3.4 justify-content属性\njustify-content属性定义了项目在主轴上的对齐方式。\n\n\t.box {\n\t  justify-content: flex-start | flex-end | center | space-between | space-around;\n\t}\n\n![](https://i.imgur.com/3TSVcUq.png)\n\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\n\n- flex-start（默认值）：左对齐\n- flex-end：右对齐\n- center： 居中\n- space-between：两端对齐，项目之间的间隔都相等。\n- space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n###3.5 align-items属性\nalign-items属性定义项目在交叉轴上如何对齐。\n\n\t.box {\n\t  align-items: flex-start | flex-end | center | baseline | stretch;\n\t}\n\n![](https://i.imgur.com/FhUIfm7.png)\n\n它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。\n\n- flex-start：交叉轴的起点对齐。\n- flex-end：交叉轴的终点对齐。\n- center：交叉轴的中点对齐。\n- baseline: 项目的第一行文字的基线对齐。\n- stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n###3.6 align-content属性\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n\t.box {\n\t  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n\t}\n\n![](https://i.imgur.com/f7KvseB.png)\n\n该属性可能取6个值。\n\n- flex-start：与交叉轴的起点对齐。\n- flex-end：与交叉轴的终点对齐。\n- center：与交叉轴的中点对齐。\n- space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n- space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n- stretch（默认值）：轴线占满整个交叉轴。\n##四、项目的属性\n以下6个属性设置在项目上。\n\n- order\n- flex-grow\n- flex-shrink\n- flex-basis\n- flex\n- align-self\n\n\n####4.1 order属性\norder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n\t.item {\n\t  order: <integer>;\n\t}\n\n![](https://i.imgur.com/N3qRQfW.png)\n\n####4.2 flex-grow属性\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n\n\t.item {\n\t  flex-grow: <number>; /* default 0 */\n\t}\n\n![](https://i.imgur.com/hOHVOph.png)\n\n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n####4.3 flex-shrink属性\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n\t.item {\n\t  flex-shrink: <number>; /* default 1 */\n\t}\n\n![](https://i.imgur.com/MAEyBy4.jpg)\n\n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n负值对该属性无效。\n####4.4 flex-basis属性\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n\n\t.item {\n\t  flex-basis: <length> | auto; /* default auto */\n\t}\n\n它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n####4.5 flex属性\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n\n\t.item {\n\t  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n\t}\n\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n####4.6 align-self属性\nalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n\t.item {\n\t  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n\t}\n\n![](https://i.imgur.com/S7qhyMr.png)\n\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n","source":"_posts/flex弹性布局.md","raw":"---\ntitle: flex弹性布局\ndate: 2018-07-02 21:46:09\ntags: 'css'\ncategories: '前端'\ndescription: 'Flex 布局教程：语法篇\n作者： 阮一峰\n日期： 2015年7月10日'\n\n---\n\n\n网页布局（layout）是 CSS 的一个重点应用。\n\n![](https://i.imgur.com/76tJ32D.gif)\n\n布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n\n2009年，W3C 提出了一种新的方案----Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。\n\n![](https://i.imgur.com/eQyXvLz.jpg)\n\nFlex 布局将成为未来布局的首选方案。本文介绍它的语法，下一篇文章给出常见布局的 Flex 写法。网友 JailBreak 为本文的所有示例制作了 Demo，也可以参考。\n以下内容主要参考了下面两篇文章：A Complete Guide to Flexbox 和 A Visual Guide to CSS3 Flexbox Properties。\n\n\n##一、Flex 布局是什么？\nFlex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n任何一个容器都可以指定为 Flex 布局。\n\n\t.box{\n\t  display: flex;\n\t}\n\n行内元素也可以使用 Flex 布局。\n\n\t.box{\n\t  display: inline-flex;\n\t}\n\nWebkit 内核的浏览器，必须加上-webkit前缀。\n\n\t.box{\n\t  display: -webkit-flex; /* Safari */\n\t  display: flex;\n\t}\n\n注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。\n##二、基本概念\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n![](https://i.imgur.com/5Fv8XMF.png)\n\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。\n项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。\n##三、容器的属性\n以下6个属性设置在容器上。\n\n- flex-direction\n- flex-wrap\n- flex-flow\n- justify-content\n- align-items\n- align-content\n###3.1 flex-direction属性\nflex-direction属性决定主轴的方向（即项目的排列方向）。\n\n\t.box {\n\t  flex-direction: row | row-reverse | column | column-reverse;\n\t}\n\n![](https://i.imgur.com/hb86mKr.png)\n\n\n它可能有4个值。\n\n- row（默认值）：主轴为水平方向，起点在左端。\n- row-reverse：主轴为水平方向，起点在右端。\n- column：主轴为垂直方向，起点在上沿。\n- column-reverse：主轴为垂直方向，起点在下沿。\n###3.2 flex-wrap属性\n默认情况下，项目都排在一条线（又称\"轴线\"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\n\n![](https://i.imgur.com/3cNuqTd.png)\n\n\n\t.box{\n\t  flex-wrap: nowrap | wrap | wrap-reverse;\n\t}\n\n它可能取三个值。\n\n- （1）nowrap（默认）：不换行。\n![](https://i.imgur.com/By5ESfI.png)\n- （2）wrap：换行，第一行在上方。\n![](https://i.imgur.com/3ekxcWd.jpg)\n- （3）wrap-reverse：换行，第一行在下方。\n![](https://i.imgur.com/vZYkNBG.jpg)\n###3.3 flex-flow\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n\n\t.box {\n\t  flex-flow: <flex-direction> || <flex-wrap>;\n\t}\n\n###3.4 justify-content属性\njustify-content属性定义了项目在主轴上的对齐方式。\n\n\t.box {\n\t  justify-content: flex-start | flex-end | center | space-between | space-around;\n\t}\n\n![](https://i.imgur.com/3TSVcUq.png)\n\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\n\n- flex-start（默认值）：左对齐\n- flex-end：右对齐\n- center： 居中\n- space-between：两端对齐，项目之间的间隔都相等。\n- space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n###3.5 align-items属性\nalign-items属性定义项目在交叉轴上如何对齐。\n\n\t.box {\n\t  align-items: flex-start | flex-end | center | baseline | stretch;\n\t}\n\n![](https://i.imgur.com/FhUIfm7.png)\n\n它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。\n\n- flex-start：交叉轴的起点对齐。\n- flex-end：交叉轴的终点对齐。\n- center：交叉轴的中点对齐。\n- baseline: 项目的第一行文字的基线对齐。\n- stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n###3.6 align-content属性\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n\t.box {\n\t  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n\t}\n\n![](https://i.imgur.com/f7KvseB.png)\n\n该属性可能取6个值。\n\n- flex-start：与交叉轴的起点对齐。\n- flex-end：与交叉轴的终点对齐。\n- center：与交叉轴的中点对齐。\n- space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n- space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n- stretch（默认值）：轴线占满整个交叉轴。\n##四、项目的属性\n以下6个属性设置在项目上。\n\n- order\n- flex-grow\n- flex-shrink\n- flex-basis\n- flex\n- align-self\n\n\n####4.1 order属性\norder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n\t.item {\n\t  order: <integer>;\n\t}\n\n![](https://i.imgur.com/N3qRQfW.png)\n\n####4.2 flex-grow属性\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n\n\t.item {\n\t  flex-grow: <number>; /* default 0 */\n\t}\n\n![](https://i.imgur.com/hOHVOph.png)\n\n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n####4.3 flex-shrink属性\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n\t.item {\n\t  flex-shrink: <number>; /* default 1 */\n\t}\n\n![](https://i.imgur.com/MAEyBy4.jpg)\n\n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n负值对该属性无效。\n####4.4 flex-basis属性\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n\n\t.item {\n\t  flex-basis: <length> | auto; /* default auto */\n\t}\n\n它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n####4.5 flex属性\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n\n\t.item {\n\t  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n\t}\n\n该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n####4.6 align-self属性\nalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n\t.item {\n\t  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n\t}\n\n![](https://i.imgur.com/S7qhyMr.png)\n\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n","slug":"flex弹性布局","published":1,"updated":"2018-12-17T13:37:49.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ibv000a1wu0l875cmqd","content":"<p>网页布局（layout）是 CSS 的一个重点应用。</p>\n<p><img src=\"https://i.imgur.com/76tJ32D.gif\" alt=\"\"></p>\n<p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>\n<p><img src=\"https://i.imgur.com/eQyXvLz.jpg\" alt=\"\"></p>\n<p>Flex 布局将成为未来布局的首选方案。本文介绍它的语法，下一篇文章给出常见布局的 Flex 写法。网友 JailBreak 为本文的所有示例制作了 Demo，也可以参考。<br>以下内容主要参考了下面两篇文章：A Complete Guide to Flexbox 和 A Visual Guide to CSS3 Flexbox Properties。</p>\n<p>##一、Flex 布局是什么？<br>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为 Flex 布局。</p>\n<pre><code>.box{\n  display: flex;\n}\n</code></pre><p>行内元素也可以使用 Flex 布局。</p>\n<pre><code>.box{\n  display: inline-flex;\n}\n</code></pre><p>Webkit 内核的浏览器，必须加上-webkit前缀。</p>\n<pre><code>.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n</code></pre><p>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</p>\n<p>##二、基本概念<br>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<p><img src=\"https://i.imgur.com/5Fv8XMF.png\" alt=\"\"></p>\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>\n<p>##三、容器的属性<br>以下6个属性设置在容器上。</p>\n<ul>\n<li>flex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li><p>align-content<br>###3.1 flex-direction属性<br>flex-direction属性决定主轴的方向（即项目的排列方向）。</p>\n<p>  .box {</p>\n<pre><code>flex-direction: row | row-reverse | column | column-reverse;\n</code></pre><p>  }</p>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/hb86mKr.png\" alt=\"\"></p>\n<p>它可能有4个值。</p>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。<br>###3.2 flex-wrap属性<br>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</li>\n</ul>\n<p><img src=\"https://i.imgur.com/3cNuqTd.png\" alt=\"\"></p>\n<pre><code>.box{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n</code></pre><p>它可能取三个值。</p>\n<ul>\n<li>（1）nowrap（默认）：不换行。<br><img src=\"https://i.imgur.com/By5ESfI.png\" alt=\"\"></li>\n<li>（2）wrap：换行，第一行在上方。<br><img src=\"https://i.imgur.com/3ekxcWd.jpg\" alt=\"\"></li>\n<li><p>（3）wrap-reverse：换行，第一行在下方。<br><img src=\"https://i.imgur.com/vZYkNBG.jpg\" alt=\"\"><br>###3.3 flex-flow<br>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>\n<p>  .box {</p>\n<pre><code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;\n</code></pre><p>  }</p>\n</li>\n</ul>\n<p>###3.4 justify-content属性<br>justify-content属性定义了项目在主轴上的对齐方式。</p>\n<pre><code>.box {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n</code></pre><p><img src=\"https://i.imgur.com/3TSVcUq.png\" alt=\"\"></p>\n<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>\n<ul>\n<li>flex-start（默认值）：左对齐</li>\n<li>flex-end：右对齐</li>\n<li>center： 居中</li>\n<li>space-between：两端对齐，项目之间的间隔都相等。</li>\n<li><p>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<br>###3.5 align-items属性<br>align-items属性定义项目在交叉轴上如何对齐。</p>\n<p>  .box {</p>\n<pre><code>align-items: flex-start | flex-end | center | baseline | stretch;\n</code></pre><p>  }</p>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/FhUIfm7.png\" alt=\"\"></p>\n<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>\n<ul>\n<li>flex-start：交叉轴的起点对齐。</li>\n<li>flex-end：交叉轴的终点对齐。</li>\n<li>center：交叉轴的中点对齐。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li><p>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。<br>###3.6 align-content属性<br>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<p>  .box {</p>\n<pre><code>align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n</code></pre><p>  }</p>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/f7KvseB.png\" alt=\"\"></p>\n<p>该属性可能取6个值。</p>\n<ul>\n<li>flex-start：与交叉轴的起点对齐。</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li><p>stretch（默认值）：轴线占满整个交叉轴。<br>##四、项目的属性<br>以下6个属性设置在项目上。</p>\n</li>\n<li><p>order</p>\n</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self</li>\n</ul>\n<p>####4.1 order属性<br>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>\n<pre><code>.item {\n  order: &lt;integer&gt;;\n}\n</code></pre><p><img src=\"https://i.imgur.com/N3qRQfW.png\" alt=\"\"></p>\n<p>####4.2 flex-grow属性<br>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>\n<pre><code>.item {\n  flex-grow: &lt;number&gt;; /* default 0 */\n}\n</code></pre><p><img src=\"https://i.imgur.com/hOHVOph.png\" alt=\"\"></p>\n<p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<p>####4.3 flex-shrink属性<br>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<pre><code>.item {\n  flex-shrink: &lt;number&gt;; /* default 1 */\n}\n</code></pre><p><img src=\"https://i.imgur.com/MAEyBy4.jpg\" alt=\"\"></p>\n<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p>\n<p>####4.4 flex-basis属性<br>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>\n<pre><code>.item {\n  flex-basis: &lt;length&gt; | auto; /* default auto */\n}\n</code></pre><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>\n<p>####4.5 flex属性<br>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>\n<pre><code>.item {\n  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]\n}\n</code></pre><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>\n<p>####4.6 align-self属性<br>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>\n<pre><code>.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n</code></pre><p><img src=\"https://i.imgur.com/S7qhyMr.png\" alt=\"\"></p>\n<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>网页布局（layout）是 CSS 的一个重点应用。</p>\n<p><img src=\"https://i.imgur.com/76tJ32D.gif\" alt=\"\"></p>\n<p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>\n<p><img src=\"https://i.imgur.com/eQyXvLz.jpg\" alt=\"\"></p>\n<p>Flex 布局将成为未来布局的首选方案。本文介绍它的语法，下一篇文章给出常见布局的 Flex 写法。网友 JailBreak 为本文的所有示例制作了 Demo，也可以参考。<br>以下内容主要参考了下面两篇文章：A Complete Guide to Flexbox 和 A Visual Guide to CSS3 Flexbox Properties。</p>\n<p>##一、Flex 布局是什么？<br>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为 Flex 布局。</p>\n<pre><code>.box{\n  display: flex;\n}\n</code></pre><p>行内元素也可以使用 Flex 布局。</p>\n<pre><code>.box{\n  display: inline-flex;\n}\n</code></pre><p>Webkit 内核的浏览器，必须加上-webkit前缀。</p>\n<pre><code>.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n</code></pre><p>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</p>\n<p>##二、基本概念<br>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<p><img src=\"https://i.imgur.com/5Fv8XMF.png\" alt=\"\"></p>\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>\n<p>##三、容器的属性<br>以下6个属性设置在容器上。</p>\n<ul>\n<li>flex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li><p>align-content<br>###3.1 flex-direction属性<br>flex-direction属性决定主轴的方向（即项目的排列方向）。</p>\n<p>  .box {</p>\n<pre><code>flex-direction: row | row-reverse | column | column-reverse;\n</code></pre><p>  }</p>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/hb86mKr.png\" alt=\"\"></p>\n<p>它可能有4个值。</p>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。<br>###3.2 flex-wrap属性<br>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</li>\n</ul>\n<p><img src=\"https://i.imgur.com/3cNuqTd.png\" alt=\"\"></p>\n<pre><code>.box{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n</code></pre><p>它可能取三个值。</p>\n<ul>\n<li>（1）nowrap（默认）：不换行。<br><img src=\"https://i.imgur.com/By5ESfI.png\" alt=\"\"></li>\n<li>（2）wrap：换行，第一行在上方。<br><img src=\"https://i.imgur.com/3ekxcWd.jpg\" alt=\"\"></li>\n<li><p>（3）wrap-reverse：换行，第一行在下方。<br><img src=\"https://i.imgur.com/vZYkNBG.jpg\" alt=\"\"><br>###3.3 flex-flow<br>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>\n<p>  .box {</p>\n<pre><code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;\n</code></pre><p>  }</p>\n</li>\n</ul>\n<p>###3.4 justify-content属性<br>justify-content属性定义了项目在主轴上的对齐方式。</p>\n<pre><code>.box {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n</code></pre><p><img src=\"https://i.imgur.com/3TSVcUq.png\" alt=\"\"></p>\n<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>\n<ul>\n<li>flex-start（默认值）：左对齐</li>\n<li>flex-end：右对齐</li>\n<li>center： 居中</li>\n<li>space-between：两端对齐，项目之间的间隔都相等。</li>\n<li><p>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<br>###3.5 align-items属性<br>align-items属性定义项目在交叉轴上如何对齐。</p>\n<p>  .box {</p>\n<pre><code>align-items: flex-start | flex-end | center | baseline | stretch;\n</code></pre><p>  }</p>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/FhUIfm7.png\" alt=\"\"></p>\n<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>\n<ul>\n<li>flex-start：交叉轴的起点对齐。</li>\n<li>flex-end：交叉轴的终点对齐。</li>\n<li>center：交叉轴的中点对齐。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li><p>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。<br>###3.6 align-content属性<br>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<p>  .box {</p>\n<pre><code>align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n</code></pre><p>  }</p>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/f7KvseB.png\" alt=\"\"></p>\n<p>该属性可能取6个值。</p>\n<ul>\n<li>flex-start：与交叉轴的起点对齐。</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li><p>stretch（默认值）：轴线占满整个交叉轴。<br>##四、项目的属性<br>以下6个属性设置在项目上。</p>\n</li>\n<li><p>order</p>\n</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self</li>\n</ul>\n<p>####4.1 order属性<br>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>\n<pre><code>.item {\n  order: &lt;integer&gt;;\n}\n</code></pre><p><img src=\"https://i.imgur.com/N3qRQfW.png\" alt=\"\"></p>\n<p>####4.2 flex-grow属性<br>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>\n<pre><code>.item {\n  flex-grow: &lt;number&gt;; /* default 0 */\n}\n</code></pre><p><img src=\"https://i.imgur.com/hOHVOph.png\" alt=\"\"></p>\n<p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<p>####4.3 flex-shrink属性<br>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<pre><code>.item {\n  flex-shrink: &lt;number&gt;; /* default 1 */\n}\n</code></pre><p><img src=\"https://i.imgur.com/MAEyBy4.jpg\" alt=\"\"></p>\n<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p>\n<p>####4.4 flex-basis属性<br>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>\n<pre><code>.item {\n  flex-basis: &lt;length&gt; | auto; /* default auto */\n}\n</code></pre><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>\n<p>####4.5 flex属性<br>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>\n<pre><code>.item {\n  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]\n}\n</code></pre><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>\n<p>####4.6 align-self属性<br>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>\n<pre><code>.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n</code></pre><p><img src=\"https://i.imgur.com/S7qhyMr.png\" alt=\"\"></p>\n<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>\n"},{"title":"HEXO搭建个人博客","date":"2018-06-30T07:06:33.000Z","description":"HEXO配置，HEXO+Github，搭建自己的博客","_content":"\n\n　　经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。     \n\n　　本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：1499065178　，或者给我发邮件：[leopardpan@icloud.com](mailto:leopardpan@icloud.com)  ，都可以，如果你已经搭建完成了，可以看看我的另一篇博客[HEXO进阶](http://baixin.io/2016/06/HEXO_Advanced/)，有讲如何能百度搜索你的博客、多台电脑使用HEXO发布博客等。我现在的博客是使用 Jekyll 搭建的，如果你想使用我现在的模板请看[Jekyll搭建个人博客](http://baixin.io/2016/10/jekyll_tutorials1/) \n \n\n## 正文：\n　这边教程是针对与Mac的，[参考链接](http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool)，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。\n\n　之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。\n \n## 配置环境     \n\n### 安装Node（必须）         \n\n作用：用来生成静态页面的\n到Node.js[官网](https://nodejs.org/)下载相应平台的最新版本，一路安装即可。\n\n### 安装Git（必须）     \n作用：把本地的hexo内容提交到github上去.\n安装Xcode就自带有Git，我就不多说了。\n\n### 申请GitHub（必须）\n作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。\n[github](https://github.com/)账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。\n\n### 正式安装HEXO　\nNode和Git都安装好后，可执行如下命令安装hexo：\n\n\t$ sudo npm install -g hexo\n\n### 初始化\n创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令：\n\n\n\thexo init\n\n\n好啦，至此，全部安装工作已经完成！\n\n### 生成静态页面\n继续再Blog目录下执行如下命令，生成静态页面\n\n\thexo generate （hexo g  也可以）   \n\n### 本地启动\n启动本地服务，进行文章预览调试，命令：\n\n\thexo server   \n\n浏览器输入[http://localhost:4000](就可以看到最原始的效果了)\n我不知道你们能不能，反正我不能，因为我还有环境没配置好\n\n### 常见的HEXO配置错误：\n\n```\nERROR Plugin load failed: hexo-server\n\n原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n\n解决方法，执行命令：$ sudo npm install hexo-server\n\n```\n\n```\n执行命令hexo server，提示：Usage: hexo<Command> ....\n\n原因：我认为是没有生成本地服务\n\n解决方法，执行命令：$ npm install hexo-server --save\n\n提示：hexo-server@0.1.2 node_modules/hexo-server\n.... \n\n表示成功了[参考](https://hexo.io/zh-cn/docs/server.html)\n\n```\n\n这个时候再执行：$ hexo-server\n\n得到: INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n\n这个时候再点击[http://0.0.0.0:4000](http://0.0.0.0:4000)，正常情况下应该是最原始的画面，但是我看到的是：\n白板和Cannot GET /   几个字\n原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n\n\tnpm install hexo-renderer-ejs --save\n\tnpm install hexo-renderer-stylus --save\n\tnpm install hexo-renderer-marked --save\n\n这个时候再重新生成静态文件，命令：\n\n\thexo generate （或hexo g）\n\n启动本地服务器：\n\n\thexo server （或hexo s）\n\n再点击网址[http://0.0.0.0:4000](http://0.0.0.0:4000) OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。[参考链接](https://disqus.com/home/discussion/bsspirit/hexogithubweb/)，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。\n\n\n## 配置Github          \n   \n### 建立Repository     \n\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法\n然后建立关联，我的Blog在本地/Users/leopard/Blog，Blog是我之前建的东西也全在这里面，有：\n\n> Blog        \n> 　｜        \n> 　｜－－ _config.yml       \n> 　｜－－ node_modules      \n> 　｜－－ public                \n> 　｜－－ source                                                  \n> 　｜－－ db.json\t          \n> 　｜－－ package.json          \n> 　｜－－ scaffolds          \n> 　｜－－ themes          　　　　　\n　　　\n\n现在我们需要_config.yml文件，来建立关联，命令：\n\n\tvim _config.yml\n\n翻到最下面，改成我这样子的，注意： `: 后面要有空格`\n\n\tdeploy:\n\t  type: git\n\t  repository: https://github.com/leopardpan/leopardpan.github.io.git\n\t  branch: master\n\n执行如下命令才能使用git部署\n\n\tnpm install hexo-deployer-git --save\n\n网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。\n忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。\n然后，执行配置命令：\n\n\thexo deploy\n\n　然后再浏览器中输入[http://leopardpan.github.io/](http://leopardpan.github.io/)就行了，我的 github 的账户叫 leopardpan ,把这个改成你 github 的账户名就行了\n\n### 部署步骤\n\n每次部署的步骤，可按以下三步来进行。\n \n\thexo clean\n\thexo generate\n\thexo deploy\n\n一些常用命令：\n\n\thexo new \"postName\" #新建文章\n\thexo new page \"pageName\" #新建页面\n\thexo generate #生成静态页面至public目录\n\thexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\thexo deploy #将.deploy目录部署到GitHub\n\thexo help  #查看帮助\n\thexo version  #查看Hexo的版本\n\n这里有大量的[主题列表](https://github.com/hexojs/hexo/wiki/Themes)使用方法里面\n都有详细的介绍，我就不多说了。      \n我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，?         \n　[Cover](https://github.com/daisygao/hexo-themes-cover) - A chic theme with facebook-like cover photo      \n　[Oishi](https://github.com/henryhuang/oishi) - A white theme based on Landscape plus and Writing.      \n　[Sidebar](https://github.com/hardywu/hexo-theme-sidebar) - Another theme based on Light with a simple sidebar    \n　[TKL](https://github.com/SuperKieran/TKL) - A responsive design theme for Hexo. 一个设计优雅的响应式主题    \n　[Tinnypp](https://github.com/levonlin/Tinnypp) - A clean, simple theme based on Tinny     \n　[Writing](https://github.com/yunlzheng/hexo-themes-writing) - A small and simple hexo theme based on Light     \n　[Yilia](https://github.com/litten/hexo-theme-yilia) - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。    \n　[Pacman voidy](https://github.com/Voidly/pacman) - A theme with dynamic tagcloud and dynamic snow      \n\n### 一些基本路径\n　文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里，修改名字在 public/index.html 里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。\n\nMarkdown语法参考链接: [作业部落](https://www.zybuluo.com/mdeditor)\n\n\n### Q&A\n\n> 问：如何让文章想只显示一部分和一个 `阅读全文` 的按钮？       \n> 答：在文章中加一个 `<!--more-->` ， `<!--more-->` 后面的内容就不会显示出来了。\n\n<p> </p>\n\n> 问：本地部署成功了，也能预览效果，但使用 username.github.io 访问，`出现 404 ` .      \n> 答：首先确认 hexo d 命令执行是否报错，如果没有报错，再查看一下你的 github 的 username.github.io 仓库，你的博客是否已经成功提交了，你的 github 邮箱也要通过验证才行。\n\n<p> </p>\n\n转载请注明原地址，潘柏信的博客：[http://leopardpan.github.io](http://leopardpan.github.io) 谢谢！\n","source":"_posts/hello-world.md","raw":"---\ntitle: \"HEXO搭建个人博客\"\ndate: 2018-06-30 15:06:33\ndescription: \"HEXO配置，HEXO+Github，搭建自己的博客\"\ntags: \"建站\"\ncategories: \"工具\"\n\n---\n\n\n　　经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。     \n\n　　本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：1499065178　，或者给我发邮件：[leopardpan@icloud.com](mailto:leopardpan@icloud.com)  ，都可以，如果你已经搭建完成了，可以看看我的另一篇博客[HEXO进阶](http://baixin.io/2016/06/HEXO_Advanced/)，有讲如何能百度搜索你的博客、多台电脑使用HEXO发布博客等。我现在的博客是使用 Jekyll 搭建的，如果你想使用我现在的模板请看[Jekyll搭建个人博客](http://baixin.io/2016/10/jekyll_tutorials1/) \n \n\n## 正文：\n　这边教程是针对与Mac的，[参考链接](http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool)，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。\n\n　之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。\n \n## 配置环境     \n\n### 安装Node（必须）         \n\n作用：用来生成静态页面的\n到Node.js[官网](https://nodejs.org/)下载相应平台的最新版本，一路安装即可。\n\n### 安装Git（必须）     \n作用：把本地的hexo内容提交到github上去.\n安装Xcode就自带有Git，我就不多说了。\n\n### 申请GitHub（必须）\n作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。\n[github](https://github.com/)账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。\n\n### 正式安装HEXO　\nNode和Git都安装好后，可执行如下命令安装hexo：\n\n\t$ sudo npm install -g hexo\n\n### 初始化\n创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令：\n\n\n\thexo init\n\n\n好啦，至此，全部安装工作已经完成！\n\n### 生成静态页面\n继续再Blog目录下执行如下命令，生成静态页面\n\n\thexo generate （hexo g  也可以）   \n\n### 本地启动\n启动本地服务，进行文章预览调试，命令：\n\n\thexo server   \n\n浏览器输入[http://localhost:4000](就可以看到最原始的效果了)\n我不知道你们能不能，反正我不能，因为我还有环境没配置好\n\n### 常见的HEXO配置错误：\n\n```\nERROR Plugin load failed: hexo-server\n\n原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n\n解决方法，执行命令：$ sudo npm install hexo-server\n\n```\n\n```\n执行命令hexo server，提示：Usage: hexo<Command> ....\n\n原因：我认为是没有生成本地服务\n\n解决方法，执行命令：$ npm install hexo-server --save\n\n提示：hexo-server@0.1.2 node_modules/hexo-server\n.... \n\n表示成功了[参考](https://hexo.io/zh-cn/docs/server.html)\n\n```\n\n这个时候再执行：$ hexo-server\n\n得到: INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n\n这个时候再点击[http://0.0.0.0:4000](http://0.0.0.0:4000)，正常情况下应该是最原始的画面，但是我看到的是：\n白板和Cannot GET /   几个字\n原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n\n\tnpm install hexo-renderer-ejs --save\n\tnpm install hexo-renderer-stylus --save\n\tnpm install hexo-renderer-marked --save\n\n这个时候再重新生成静态文件，命令：\n\n\thexo generate （或hexo g）\n\n启动本地服务器：\n\n\thexo server （或hexo s）\n\n再点击网址[http://0.0.0.0:4000](http://0.0.0.0:4000) OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。[参考链接](https://disqus.com/home/discussion/bsspirit/hexogithubweb/)，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。\n\n\n## 配置Github          \n   \n### 建立Repository     \n\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法\n然后建立关联，我的Blog在本地/Users/leopard/Blog，Blog是我之前建的东西也全在这里面，有：\n\n> Blog        \n> 　｜        \n> 　｜－－ _config.yml       \n> 　｜－－ node_modules      \n> 　｜－－ public                \n> 　｜－－ source                                                  \n> 　｜－－ db.json\t          \n> 　｜－－ package.json          \n> 　｜－－ scaffolds          \n> 　｜－－ themes          　　　　　\n　　　\n\n现在我们需要_config.yml文件，来建立关联，命令：\n\n\tvim _config.yml\n\n翻到最下面，改成我这样子的，注意： `: 后面要有空格`\n\n\tdeploy:\n\t  type: git\n\t  repository: https://github.com/leopardpan/leopardpan.github.io.git\n\t  branch: master\n\n执行如下命令才能使用git部署\n\n\tnpm install hexo-deployer-git --save\n\n网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。\n忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。\n然后，执行配置命令：\n\n\thexo deploy\n\n　然后再浏览器中输入[http://leopardpan.github.io/](http://leopardpan.github.io/)就行了，我的 github 的账户叫 leopardpan ,把这个改成你 github 的账户名就行了\n\n### 部署步骤\n\n每次部署的步骤，可按以下三步来进行。\n \n\thexo clean\n\thexo generate\n\thexo deploy\n\n一些常用命令：\n\n\thexo new \"postName\" #新建文章\n\thexo new page \"pageName\" #新建页面\n\thexo generate #生成静态页面至public目录\n\thexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\thexo deploy #将.deploy目录部署到GitHub\n\thexo help  #查看帮助\n\thexo version  #查看Hexo的版本\n\n这里有大量的[主题列表](https://github.com/hexojs/hexo/wiki/Themes)使用方法里面\n都有详细的介绍，我就不多说了。      \n我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，?         \n　[Cover](https://github.com/daisygao/hexo-themes-cover) - A chic theme with facebook-like cover photo      \n　[Oishi](https://github.com/henryhuang/oishi) - A white theme based on Landscape plus and Writing.      \n　[Sidebar](https://github.com/hardywu/hexo-theme-sidebar) - Another theme based on Light with a simple sidebar    \n　[TKL](https://github.com/SuperKieran/TKL) - A responsive design theme for Hexo. 一个设计优雅的响应式主题    \n　[Tinnypp](https://github.com/levonlin/Tinnypp) - A clean, simple theme based on Tinny     \n　[Writing](https://github.com/yunlzheng/hexo-themes-writing) - A small and simple hexo theme based on Light     \n　[Yilia](https://github.com/litten/hexo-theme-yilia) - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。    \n　[Pacman voidy](https://github.com/Voidly/pacman) - A theme with dynamic tagcloud and dynamic snow      \n\n### 一些基本路径\n　文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里，修改名字在 public/index.html 里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。\n\nMarkdown语法参考链接: [作业部落](https://www.zybuluo.com/mdeditor)\n\n\n### Q&A\n\n> 问：如何让文章想只显示一部分和一个 `阅读全文` 的按钮？       \n> 答：在文章中加一个 `<!--more-->` ， `<!--more-->` 后面的内容就不会显示出来了。\n\n<p> </p>\n\n> 问：本地部署成功了，也能预览效果，但使用 username.github.io 访问，`出现 404 ` .      \n> 答：首先确认 hexo d 命令执行是否报错，如果没有报错，再查看一下你的 github 的 username.github.io 仓库，你的博客是否已经成功提交了，你的 github 邮箱也要通过验证才行。\n\n<p> </p>\n\n转载请注明原地址，潘柏信的博客：[http://leopardpan.github.io](http://leopardpan.github.io) 谢谢！\n","slug":"hello-world","published":1,"updated":"2018-12-17T13:37:49.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ibz000b1wu0uwa9x01s","content":"<p>　　经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。     </p>\n<p>　　本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：1499065178　，或者给我发邮件：<a href=\"mailto:leopardpan@icloud.com\" target=\"_blank\" rel=\"noopener\">leopardpan@icloud.com</a>  ，都可以，如果你已经搭建完成了，可以看看我的另一篇博客<a href=\"http://baixin.io/2016/06/HEXO_Advanced/\" target=\"_blank\" rel=\"noopener\">HEXO进阶</a>，有讲如何能百度搜索你的博客、多台电脑使用HEXO发布博客等。我现在的博客是使用 Jekyll 搭建的，如果你想使用我现在的模板请看<a href=\"http://baixin.io/2016/10/jekyll_tutorials1/\" target=\"_blank\" rel=\"noopener\">Jekyll搭建个人博客</a> </p>\n<h2 id=\"正文：\"><a href=\"#正文：\" class=\"headerlink\" title=\"正文：\"></a>正文：</h2><p>　这边教程是针对与Mac的，<a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool\" target=\"_blank\" rel=\"noopener\">参考链接</a>，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。</p>\n<p>　之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。</p>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"安装Node（必须）\"><a href=\"#安装Node（必须）\" class=\"headerlink\" title=\"安装Node（必须）\"></a>安装Node（必须）</h3><p>作用：用来生成静态页面的<br>到Node.js<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">官网</a>下载相应平台的最新版本，一路安装即可。</p>\n<h3 id=\"安装Git（必须）\"><a href=\"#安装Git（必须）\" class=\"headerlink\" title=\"安装Git（必须）\"></a>安装Git（必须）</h3><p>作用：把本地的hexo内容提交到github上去.<br>安装Xcode就自带有Git，我就不多说了。</p>\n<h3 id=\"申请GitHub（必须）\"><a href=\"#申请GitHub（必须）\" class=\"headerlink\" title=\"申请GitHub（必须）\"></a>申请GitHub（必须）</h3><p>作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。<br><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。</p>\n<h3 id=\"正式安装HEXO\"><a href=\"#正式安装HEXO\" class=\"headerlink\" title=\"正式安装HEXO　\"></a>正式安装HEXO　</h3><p>Node和Git都安装好后，可执行如下命令安装hexo：</p>\n<pre><code>$ sudo npm install -g hexo\n</code></pre><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令：</p>\n<pre><code>hexo init\n</code></pre><p>好啦，至此，全部安装工作已经完成！</p>\n<h3 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h3><p>继续再Blog目录下执行如下命令，生成静态页面</p>\n<pre><code>hexo generate （hexo g  也可以）   \n</code></pre><h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><p>启动本地服务，进行文章预览调试，命令：</p>\n<pre><code>hexo server   \n</code></pre><p>浏览器输入<a href=\"就可以看到最原始的效果了\">http://localhost:4000</a><br>我不知道你们能不能，反正我不能，因为我还有环境没配置好</p>\n<h3 id=\"常见的HEXO配置错误：\"><a href=\"#常见的HEXO配置错误：\" class=\"headerlink\" title=\"常见的HEXO配置错误：\"></a>常见的HEXO配置错误：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR Plugin load failed: hexo-server</span><br><span class=\"line\"></span><br><span class=\"line\">原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法，执行命令：$ sudo npm install hexo-server</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行命令hexo server，提示：Usage: hexo&lt;Command&gt; ....</span><br><span class=\"line\"></span><br><span class=\"line\">原因：我认为是没有生成本地服务</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法，执行命令：$ npm install hexo-server --save</span><br><span class=\"line\"></span><br><span class=\"line\">提示：hexo-server@0.1.2 node_modules/hexo-server</span><br><span class=\"line\">.... </span><br><span class=\"line\"></span><br><span class=\"line\">表示成功了[参考](https://hexo.io/zh-cn/docs/server.html)</span><br></pre></td></tr></table></figure>\n<p>这个时候再执行：$ hexo-server</p>\n<p>得到: INFO  Hexo is running at <a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>\n<p>这个时候再点击<a href=\"http://0.0.0.0:4000\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000</a>，正常情况下应该是最原始的画面，但是我看到的是：<br>白板和Cannot GET /   几个字<br>原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>\n<pre><code>npm install hexo-renderer-ejs --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-renderer-marked --save\n</code></pre><p>这个时候再重新生成静态文件，命令：</p>\n<pre><code>hexo generate （或hexo g）\n</code></pre><p>启动本地服务器：</p>\n<pre><code>hexo server （或hexo s）\n</code></pre><p>再点击网址<a href=\"http://0.0.0.0:4000\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000</a> OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。<a href=\"https://disqus.com/home/discussion/bsspirit/hexogithubweb/\" target=\"_blank\" rel=\"noopener\">参考链接</a>，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。</p>\n<h2 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h2><h3 id=\"建立Repository\"><a href=\"#建立Repository\" class=\"headerlink\" title=\"建立Repository\"></a>建立Repository</h3><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法<br>然后建立关联，我的Blog在本地/Users/leopard/Blog，Blog是我之前建的东西也全在这里面，有：</p>\n<blockquote>\n<p>Blog<br>　｜<br>　｜－－ _config.yml<br>　｜－－ node_modules<br>　｜－－ public<br>　｜－－ source<br>　｜－－ db.json<br>　｜－－ package.json<br>　｜－－ scaffolds<br>　｜－－ themes          　　　　　\n　　　</p>\n</blockquote>\n<p>现在我们需要_config.yml文件，来建立关联，命令：</p>\n<pre><code>vim _config.yml\n</code></pre><p>翻到最下面，改成我这样子的，注意： <code>: 后面要有空格</code></p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/leopardpan/leopardpan.github.io.git\n  branch: master\n</code></pre><p>执行如下命令才能使用git部署</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。<br>忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。<br>然后，执行配置命令：</p>\n<pre><code>hexo deploy\n</code></pre><p>　然后再浏览器中输入<a href=\"http://leopardpan.github.io/\" target=\"_blank\" rel=\"noopener\">http://leopardpan.github.io/</a>就行了，我的 github 的账户叫 leopardpan ,把这个改成你 github 的账户名就行了</p>\n<h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。</p>\n<pre><code>hexo clean\nhexo generate\nhexo deploy\n</code></pre><p>一些常用命令：</p>\n<pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help  #查看帮助\nhexo version  #查看Hexo的版本\n</code></pre><p>这里有大量的<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"noopener\">主题列表</a>使用方法里面<br>都有详细的介绍，我就不多说了。<br>我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，?<br>　<a href=\"https://github.com/daisygao/hexo-themes-cover\" target=\"_blank\" rel=\"noopener\">Cover</a> - A chic theme with facebook-like cover photo<br>　<a href=\"https://github.com/henryhuang/oishi\" target=\"_blank\" rel=\"noopener\">Oishi</a> - A white theme based on Landscape plus and Writing.<br>　<a href=\"https://github.com/hardywu/hexo-theme-sidebar\" target=\"_blank\" rel=\"noopener\">Sidebar</a> - Another theme based on Light with a simple sidebar<br>　<a href=\"https://github.com/SuperKieran/TKL\" target=\"_blank\" rel=\"noopener\">TKL</a> - A responsive design theme for Hexo. 一个设计优雅的响应式主题<br>　<a href=\"https://github.com/levonlin/Tinnypp\" target=\"_blank\" rel=\"noopener\">Tinnypp</a> - A clean, simple theme based on Tinny<br>　<a href=\"https://github.com/yunlzheng/hexo-themes-writing\" target=\"_blank\" rel=\"noopener\">Writing</a> - A small and simple hexo theme based on Light<br>　<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">Yilia</a> - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。<br>　<a href=\"https://github.com/Voidly/pacman\" target=\"_blank\" rel=\"noopener\">Pacman voidy</a> - A theme with dynamic tagcloud and dynamic snow      </p>\n<h3 id=\"一些基本路径\"><a href=\"#一些基本路径\" class=\"headerlink\" title=\"一些基本路径\"></a>一些基本路径</h3><p>　文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里，修改名字在 public/index.html 里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。</p>\n<p>Markdown语法参考链接: <a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">作业部落</a></p>\n<h3 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h3><blockquote>\n<p>问：如何让文章想只显示一部分和一个 <code>阅读全文</code> 的按钮？<br>答：在文章中加一个 <code>&lt;!--more--&gt;</code> ， <code>&lt;!--more--&gt;</code> 后面的内容就不会显示出来了。</p>\n</blockquote>\n<p> </p>\n\n<blockquote>\n<p>问：本地部署成功了，也能预览效果，但使用 username.github.io 访问，<code>出现 404</code> .<br>答：首先确认 hexo d 命令执行是否报错，如果没有报错，再查看一下你的 github 的 username.github.io 仓库，你的博客是否已经成功提交了，你的 github 邮箱也要通过验证才行。</p>\n</blockquote>\n<p> </p>\n\n<p>转载请注明原地址，潘柏信的博客：<a href=\"http://leopardpan.github.io\" target=\"_blank\" rel=\"noopener\">http://leopardpan.github.io</a> 谢谢！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。     </p>\n<p>　　本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：1499065178　，或者给我发邮件：<a href=\"mailto:leopardpan@icloud.com\" target=\"_blank\" rel=\"noopener\">leopardpan@icloud.com</a>  ，都可以，如果你已经搭建完成了，可以看看我的另一篇博客<a href=\"http://baixin.io/2016/06/HEXO_Advanced/\" target=\"_blank\" rel=\"noopener\">HEXO进阶</a>，有讲如何能百度搜索你的博客、多台电脑使用HEXO发布博客等。我现在的博客是使用 Jekyll 搭建的，如果你想使用我现在的模板请看<a href=\"http://baixin.io/2016/10/jekyll_tutorials1/\" target=\"_blank\" rel=\"noopener\">Jekyll搭建个人博客</a> </p>\n<h2 id=\"正文：\"><a href=\"#正文：\" class=\"headerlink\" title=\"正文：\"></a>正文：</h2><p>　这边教程是针对与Mac的，<a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool\" target=\"_blank\" rel=\"noopener\">参考链接</a>，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。</p>\n<p>　之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。</p>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"安装Node（必须）\"><a href=\"#安装Node（必须）\" class=\"headerlink\" title=\"安装Node（必须）\"></a>安装Node（必须）</h3><p>作用：用来生成静态页面的<br>到Node.js<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">官网</a>下载相应平台的最新版本，一路安装即可。</p>\n<h3 id=\"安装Git（必须）\"><a href=\"#安装Git（必须）\" class=\"headerlink\" title=\"安装Git（必须）\"></a>安装Git（必须）</h3><p>作用：把本地的hexo内容提交到github上去.<br>安装Xcode就自带有Git，我就不多说了。</p>\n<h3 id=\"申请GitHub（必须）\"><a href=\"#申请GitHub（必须）\" class=\"headerlink\" title=\"申请GitHub（必须）\"></a>申请GitHub（必须）</h3><p>作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。<br><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。</p>\n<h3 id=\"正式安装HEXO\"><a href=\"#正式安装HEXO\" class=\"headerlink\" title=\"正式安装HEXO　\"></a>正式安装HEXO　</h3><p>Node和Git都安装好后，可执行如下命令安装hexo：</p>\n<pre><code>$ sudo npm install -g hexo\n</code></pre><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令：</p>\n<pre><code>hexo init\n</code></pre><p>好啦，至此，全部安装工作已经完成！</p>\n<h3 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h3><p>继续再Blog目录下执行如下命令，生成静态页面</p>\n<pre><code>hexo generate （hexo g  也可以）   \n</code></pre><h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><p>启动本地服务，进行文章预览调试，命令：</p>\n<pre><code>hexo server   \n</code></pre><p>浏览器输入<a href=\"就可以看到最原始的效果了\">http://localhost:4000</a><br>我不知道你们能不能，反正我不能，因为我还有环境没配置好</p>\n<h3 id=\"常见的HEXO配置错误：\"><a href=\"#常见的HEXO配置错误：\" class=\"headerlink\" title=\"常见的HEXO配置错误：\"></a>常见的HEXO配置错误：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR Plugin load failed: hexo-server</span><br><span class=\"line\"></span><br><span class=\"line\">原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法，执行命令：$ sudo npm install hexo-server</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行命令hexo server，提示：Usage: hexo&lt;Command&gt; ....</span><br><span class=\"line\"></span><br><span class=\"line\">原因：我认为是没有生成本地服务</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法，执行命令：$ npm install hexo-server --save</span><br><span class=\"line\"></span><br><span class=\"line\">提示：hexo-server@0.1.2 node_modules/hexo-server</span><br><span class=\"line\">.... </span><br><span class=\"line\"></span><br><span class=\"line\">表示成功了[参考](https://hexo.io/zh-cn/docs/server.html)</span><br></pre></td></tr></table></figure>\n<p>这个时候再执行：$ hexo-server</p>\n<p>得到: INFO  Hexo is running at <a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>\n<p>这个时候再点击<a href=\"http://0.0.0.0:4000\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000</a>，正常情况下应该是最原始的画面，但是我看到的是：<br>白板和Cannot GET /   几个字<br>原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>\n<pre><code>npm install hexo-renderer-ejs --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-renderer-marked --save\n</code></pre><p>这个时候再重新生成静态文件，命令：</p>\n<pre><code>hexo generate （或hexo g）\n</code></pre><p>启动本地服务器：</p>\n<pre><code>hexo server （或hexo s）\n</code></pre><p>再点击网址<a href=\"http://0.0.0.0:4000\" target=\"_blank\" rel=\"noopener\">http://0.0.0.0:4000</a> OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。<a href=\"https://disqus.com/home/discussion/bsspirit/hexogithubweb/\" target=\"_blank\" rel=\"noopener\">参考链接</a>，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。</p>\n<h2 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h2><h3 id=\"建立Repository\"><a href=\"#建立Repository\" class=\"headerlink\" title=\"建立Repository\"></a>建立Repository</h3><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法<br>然后建立关联，我的Blog在本地/Users/leopard/Blog，Blog是我之前建的东西也全在这里面，有：</p>\n<blockquote>\n<p>Blog<br>　｜<br>　｜－－ _config.yml<br>　｜－－ node_modules<br>　｜－－ public<br>　｜－－ source<br>　｜－－ db.json<br>　｜－－ package.json<br>　｜－－ scaffolds<br>　｜－－ themes          　　　　　\n　　　</p>\n</blockquote>\n<p>现在我们需要_config.yml文件，来建立关联，命令：</p>\n<pre><code>vim _config.yml\n</code></pre><p>翻到最下面，改成我这样子的，注意： <code>: 后面要有空格</code></p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/leopardpan/leopardpan.github.io.git\n  branch: master\n</code></pre><p>执行如下命令才能使用git部署</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。<br>忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。<br>然后，执行配置命令：</p>\n<pre><code>hexo deploy\n</code></pre><p>　然后再浏览器中输入<a href=\"http://leopardpan.github.io/\" target=\"_blank\" rel=\"noopener\">http://leopardpan.github.io/</a>就行了，我的 github 的账户叫 leopardpan ,把这个改成你 github 的账户名就行了</p>\n<h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。</p>\n<pre><code>hexo clean\nhexo generate\nhexo deploy\n</code></pre><p>一些常用命令：</p>\n<pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help  #查看帮助\nhexo version  #查看Hexo的版本\n</code></pre><p>这里有大量的<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"noopener\">主题列表</a>使用方法里面<br>都有详细的介绍，我就不多说了。<br>我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，?<br>　<a href=\"https://github.com/daisygao/hexo-themes-cover\" target=\"_blank\" rel=\"noopener\">Cover</a> - A chic theme with facebook-like cover photo<br>　<a href=\"https://github.com/henryhuang/oishi\" target=\"_blank\" rel=\"noopener\">Oishi</a> - A white theme based on Landscape plus and Writing.<br>　<a href=\"https://github.com/hardywu/hexo-theme-sidebar\" target=\"_blank\" rel=\"noopener\">Sidebar</a> - Another theme based on Light with a simple sidebar<br>　<a href=\"https://github.com/SuperKieran/TKL\" target=\"_blank\" rel=\"noopener\">TKL</a> - A responsive design theme for Hexo. 一个设计优雅的响应式主题<br>　<a href=\"https://github.com/levonlin/Tinnypp\" target=\"_blank\" rel=\"noopener\">Tinnypp</a> - A clean, simple theme based on Tinny<br>　<a href=\"https://github.com/yunlzheng/hexo-themes-writing\" target=\"_blank\" rel=\"noopener\">Writing</a> - A small and simple hexo theme based on Light<br>　<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">Yilia</a> - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。<br>　<a href=\"https://github.com/Voidly/pacman\" target=\"_blank\" rel=\"noopener\">Pacman voidy</a> - A theme with dynamic tagcloud and dynamic snow      </p>\n<h3 id=\"一些基本路径\"><a href=\"#一些基本路径\" class=\"headerlink\" title=\"一些基本路径\"></a>一些基本路径</h3><p>　文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里，修改名字在 public/index.html 里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。</p>\n<p>Markdown语法参考链接: <a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">作业部落</a></p>\n<h3 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h3><blockquote>\n<p>问：如何让文章想只显示一部分和一个 <code>阅读全文</code> 的按钮？<br>答：在文章中加一个 <code>&lt;!--more--&gt;</code> ， <code>&lt;!--more--&gt;</code> 后面的内容就不会显示出来了。</p>\n</blockquote>\n<p> </p>\n\n<blockquote>\n<p>问：本地部署成功了，也能预览效果，但使用 username.github.io 访问，<code>出现 404</code> .<br>答：首先确认 hexo d 命令执行是否报错，如果没有报错，再查看一下你的 github 的 username.github.io 仓库，你的博客是否已经成功提交了，你的 github 邮箱也要通过验证才行。</p>\n</blockquote>\n<p> </p>\n\n<p>转载请注明原地址，潘柏信的博客：<a href=\"http://leopardpan.github.io\" target=\"_blank\" rel=\"noopener\">http://leopardpan.github.io</a> 谢谢！</p>\n"},{"title":"H5 postmessage通讯","date":"2017-08-14T03:20:12.000Z","description":"html5 postmessage窗口之间的通讯","_content":"\n父窗口监听\nIE:\n\n\twindow.attachEvent('message', function(e) {\n\t\tvar msg = e.data;\t\t\t\t\t\n\t}, false);\n\n其它：\n\n\twindow.addEventListener('message', function(e) {\n\t\tvar msg = e.data;\t\t\t\t\t\n\t}, false);\n\n子窗口发送消息：\n\n\twindow.parent.postMessage(\"hello word:\", \"*\");\n","source":"_posts/html5-postmessage窗口之间的通讯.md","raw":"---\ntitle: H5 postmessage通讯\ndate: 2017-08-14 11:20:12\ntags: 'html5'\ncategories: '前端'\ndescription: 'html5 postmessage窗口之间的通讯'\n\n---\n\n父窗口监听\nIE:\n\n\twindow.attachEvent('message', function(e) {\n\t\tvar msg = e.data;\t\t\t\t\t\n\t}, false);\n\n其它：\n\n\twindow.addEventListener('message', function(e) {\n\t\tvar msg = e.data;\t\t\t\t\t\n\t}, false);\n\n子窗口发送消息：\n\n\twindow.parent.postMessage(\"hello word:\", \"*\");\n","slug":"html5-postmessage窗口之间的通讯","published":1,"updated":"2018-12-17T13:37:49.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ic5000f1wu0xz52z8rd","content":"<p>父窗口监听<br>IE:</p>\n<pre><code>window.attachEvent(&apos;message&apos;, function(e) {\n    var msg = e.data;                    \n}, false);\n</code></pre><p>其它：</p>\n<pre><code>window.addEventListener(&apos;message&apos;, function(e) {\n    var msg = e.data;                    \n}, false);\n</code></pre><p>子窗口发送消息：</p>\n<pre><code>window.parent.postMessage(&quot;hello word:&quot;, &quot;*&quot;);\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>父窗口监听<br>IE:</p>\n<pre><code>window.attachEvent(&apos;message&apos;, function(e) {\n    var msg = e.data;                    \n}, false);\n</code></pre><p>其它：</p>\n<pre><code>window.addEventListener(&apos;message&apos;, function(e) {\n    var msg = e.data;                    \n}, false);\n</code></pre><p>子窗口发送消息：</p>\n<pre><code>window.parent.postMessage(&quot;hello word:&quot;, &quot;*&quot;);\n</code></pre>"},{"title":"HTML input 标签的 accept 属性 常用的例子","date":"2018-07-02T02:45:58.000Z","description":"input[file]标签的accept属性可用于指定上传文件的 MIME类型 。 例如，想要实现默认上传图片文件的代码，代码可如下： accept=\"image/*\" 但是！ 这段代码在Chrome和Safari等Webkit浏览器下却出现了响应滞慢的问题，可能要等 6~10s 才能弹出文件选择对话框。简直不能忍呀。","_content":"\n在IE和Firefox中使用 accept=”image/*” 属性则没有发现响应延迟的问题。\n于是几经尝试后，发现是 accept=”image/*” 属性的问题，删掉它或者将 * 通配符修改为指定的MIME类型，就可以解决Webkit浏览器下的对话框显示滞慢的问题。\n解决办法如下：\naccept=\"image/gif,image/jpeg,image/jpg,image/png,image/svg\"\naccept=”image/*”属性会对每一个文件都遍历一次所有的”image/*”文件类型，当文件较多时，文件的检验时间较长，这可能是Webkit的底层实现的bug。\n另外，\naccept=”audio/*”和 accept=”video/*” 属性 在 Webkit浏览器下也会有同样的响应延迟的问题。同理，通过将 * 通配符 修改成指定的MIME类型就可解决。\n\n\t\n\tswitch (this.accept) {\n\tcase \"pic\":\n\t        this.MIME = \"image/jpg, image/png, image/jpeg, image/gif, image/svg\";\n\t        break;\n\tcase \"doc\":\n\t        this.MIME = \"application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document\";\n\t        break;\n\tcase \"ppt\":\n\t        this.MIME = \"application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation\";\n\t        break;\n\tcase \"xls\":\n\t        this.MIME = \"application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n\t        break;\n\tcase \"txt\":\n\t        this.MIME = \"text/plain\";\n\t        break;\n\tcase \"pdf\":\n\t        this.MIME = \"application/pdf\";\n\t        break;\n\tcase \"html\":\n\t        this.MIME = \"text/html\";\n\t        break;\n\tcase \"mp3\":\n\t        this.MIME = \"audio/mpeg\";\n\t        break;\n\tcase \"mp4\":\n\t        this.MIME = \"audio/mp4, video/mp4\";\n\t        break;\n\tdefault:\n\t        break;\n\t}\n","source":"_posts/input-file大全和完全整合.md","raw":"---\ntitle: 'HTML input 标签的 accept 属性 常用的例子'\ndate: 2018-07-02 10:45:58\ndescription: 'input[file]标签的accept属性可用于指定上传文件的 MIME类型 。\n例如，想要实现默认上传图片文件的代码，代码可如下：\n accept=\"image/*\" 但是！\n这段代码在Chrome和Safari等Webkit浏览器下却出现了响应滞慢的问题，可能要等 6~10s 才能弹出文件选择对话框。简直不能忍呀。'\ntags: [DOM, MIME]\ncategories: '前端'\n\n---\n\n在IE和Firefox中使用 accept=”image/*” 属性则没有发现响应延迟的问题。\n于是几经尝试后，发现是 accept=”image/*” 属性的问题，删掉它或者将 * 通配符修改为指定的MIME类型，就可以解决Webkit浏览器下的对话框显示滞慢的问题。\n解决办法如下：\naccept=\"image/gif,image/jpeg,image/jpg,image/png,image/svg\"\naccept=”image/*”属性会对每一个文件都遍历一次所有的”image/*”文件类型，当文件较多时，文件的检验时间较长，这可能是Webkit的底层实现的bug。\n另外，\naccept=”audio/*”和 accept=”video/*” 属性 在 Webkit浏览器下也会有同样的响应延迟的问题。同理，通过将 * 通配符 修改成指定的MIME类型就可解决。\n\n\t\n\tswitch (this.accept) {\n\tcase \"pic\":\n\t        this.MIME = \"image/jpg, image/png, image/jpeg, image/gif, image/svg\";\n\t        break;\n\tcase \"doc\":\n\t        this.MIME = \"application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document\";\n\t        break;\n\tcase \"ppt\":\n\t        this.MIME = \"application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation\";\n\t        break;\n\tcase \"xls\":\n\t        this.MIME = \"application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n\t        break;\n\tcase \"txt\":\n\t        this.MIME = \"text/plain\";\n\t        break;\n\tcase \"pdf\":\n\t        this.MIME = \"application/pdf\";\n\t        break;\n\tcase \"html\":\n\t        this.MIME = \"text/html\";\n\t        break;\n\tcase \"mp3\":\n\t        this.MIME = \"audio/mpeg\";\n\t        break;\n\tcase \"mp4\":\n\t        this.MIME = \"audio/mp4, video/mp4\";\n\t        break;\n\tdefault:\n\t        break;\n\t}\n","slug":"input-file大全和完全整合","published":1,"updated":"2018-12-17T13:37:49.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ic8000h1wu0puevz9ni","content":"<p>在IE和Firefox中使用 accept=”image/<em>” 属性则没有发现响应延迟的问题。<br>于是几经尝试后，发现是 accept=”image/</em>” 属性的问题，删掉它或者将 <em> 通配符修改为指定的MIME类型，就可以解决Webkit浏览器下的对话框显示滞慢的问题。<br>解决办法如下：<br>accept=”image/gif,image/jpeg,image/jpg,image/png,image/svg”<br>accept=”image/</em>”属性会对每一个文件都遍历一次所有的”image/<em>”文件类型，当文件较多时，文件的检验时间较长，这可能是Webkit的底层实现的bug。<br>另外，<br>accept=”audio/</em>”和 accept=”video/<em>” 属性 在 Webkit浏览器下也会有同样的响应延迟的问题。同理，通过将 </em> 通配符 修改成指定的MIME类型就可解决。</p>\n<pre><code>switch (this.accept) {\ncase &quot;pic&quot;:\n        this.MIME = &quot;image/jpg, image/png, image/jpeg, image/gif, image/svg&quot;;\n        break;\ncase &quot;doc&quot;:\n        this.MIME = &quot;application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;;\n        break;\ncase &quot;ppt&quot;:\n        this.MIME = &quot;application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation&quot;;\n        break;\ncase &quot;xls&quot;:\n        this.MIME = &quot;application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;;\n        break;\ncase &quot;txt&quot;:\n        this.MIME = &quot;text/plain&quot;;\n        break;\ncase &quot;pdf&quot;:\n        this.MIME = &quot;application/pdf&quot;;\n        break;\ncase &quot;html&quot;:\n        this.MIME = &quot;text/html&quot;;\n        break;\ncase &quot;mp3&quot;:\n        this.MIME = &quot;audio/mpeg&quot;;\n        break;\ncase &quot;mp4&quot;:\n        this.MIME = &quot;audio/mp4, video/mp4&quot;;\n        break;\ndefault:\n        break;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>在IE和Firefox中使用 accept=”image/<em>” 属性则没有发现响应延迟的问题。<br>于是几经尝试后，发现是 accept=”image/</em>” 属性的问题，删掉它或者将 <em> 通配符修改为指定的MIME类型，就可以解决Webkit浏览器下的对话框显示滞慢的问题。<br>解决办法如下：<br>accept=”image/gif,image/jpeg,image/jpg,image/png,image/svg”<br>accept=”image/</em>”属性会对每一个文件都遍历一次所有的”image/<em>”文件类型，当文件较多时，文件的检验时间较长，这可能是Webkit的底层实现的bug。<br>另外，<br>accept=”audio/</em>”和 accept=”video/<em>” 属性 在 Webkit浏览器下也会有同样的响应延迟的问题。同理，通过将 </em> 通配符 修改成指定的MIME类型就可解决。</p>\n<pre><code>switch (this.accept) {\ncase &quot;pic&quot;:\n        this.MIME = &quot;image/jpg, image/png, image/jpeg, image/gif, image/svg&quot;;\n        break;\ncase &quot;doc&quot;:\n        this.MIME = &quot;application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;;\n        break;\ncase &quot;ppt&quot;:\n        this.MIME = &quot;application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation&quot;;\n        break;\ncase &quot;xls&quot;:\n        this.MIME = &quot;application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;;\n        break;\ncase &quot;txt&quot;:\n        this.MIME = &quot;text/plain&quot;;\n        break;\ncase &quot;pdf&quot;:\n        this.MIME = &quot;application/pdf&quot;;\n        break;\ncase &quot;html&quot;:\n        this.MIME = &quot;text/html&quot;;\n        break;\ncase &quot;mp3&quot;:\n        this.MIME = &quot;audio/mpeg&quot;;\n        break;\ncase &quot;mp4&quot;:\n        this.MIME = &quot;audio/mp4, video/mp4&quot;;\n        break;\ndefault:\n        break;\n}\n</code></pre>"},{"title":"java","date":"2016-11-04T05:49:57.000Z","description":"java的一些工具类","_content":"\n##判断当天为星期几\n\t\n\tpublic int getWeek() {\n\n\t    SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t    Calendar c = Calendar.getInstance();\n\t    Date date = new Date();\n\t    c.setTime(date);\n\t\n\t    String day = format.format(date);\n\t\tint currentdayForWeek = 0;\n\n\t\tif (c.get(Calendar.DAY_OF_WEEK) == 1) {\n\t        currentdayForWeek = 7;\n\t    } else {\n\t        currentdayForWeek = c.get(Calendar.DAY_OF_WEEK) - 1;\n\t    }\n\t\treturn currentdayForWeek;\n\t}\n\n\n##对List中的某个属性进行排序\n\n###int 类型排序\n\t如List<Activities>降序\n\n\tCollections.sort(activities, new Comparator(){\n\t\t@Override\n\t\tpublic int compare(Object o1, Object o2) {\n\t\t     Activities act1 =(Activities)o1;\n\t\t     Activities act2 =(Activities)o2;\n\t\t\tif(act1.getId()<act2.getId()){\n\t\t\t    return 1;\n\t\t\t}else if(act1.getId()==act2.getId()){\n\t\t\t    return 0;\n\t\t\t}else{\n\t\t\t    return -1;\n\t\t\t}\n\t\t}\n\t});\n###String 类型排序（字母）\n\t如List<Student> studentList升序\n\n\tCollections.sort(studentList, new Comparator(){\n\t\t@Override\n\t\tpublic int compare(Object o1, Object o2) {\n\t\t    Student stu1 = (Student)o1;\n\t\t    Student stu2 = (Student)o2;\n\t\t\treturn stu1.getName().compareTo(stu2.getName());\n\t\t}\n\t});\n\n##java URL编码解码\n\tURLEncoder.encode(\"这里是String字符串\", \"utf-8\")\n\tURLDecoder.decode(\"这里是String字符串\", \"utf-8\")\n\n##计算两个日期之间相差的天数\n\t\n\t/**\n\t * 计算两个日期之间相差的天数\n\t * @param smdate 较小的时间\n\t * @param bdate  较大的时间\n\t * @return 相差天数\n\t * @throws ParseException\n\t */\n\tpublic static int daysBetween(Date smdate,Date bdate) throws ParseException\n\t{\n\t    SimpleDateFormat sdf=new SimpleDateFormat(\"yyyy-MM-dd\");\n\t    smdate=sdf.parse(sdf.format(smdate));\n\t    bdate=sdf.parse(sdf.format(bdate));\n\t    Calendar cal = Calendar.getInstance();\n\t    cal.setTime(smdate);\n\t    long time1 = cal.getTimeInMillis();\n\t    cal.setTime(bdate);\n\t    long time2 = cal.getTimeInMillis();\n\t    long between_days=(time2-time1)/(1000*3600*24);\n\t\n\t    return Integer.parseInt(String.valueOf(between_days));\n\t}\n\n##java Date \n年月日时分秒 对应于数据库 datetime","source":"_posts/java.md","raw":"---\ntitle: java\ndate: 2016-11-04 13:49:57\ntags: 'java'\ncategories: '后端'\ndescription: 'java的一些工具类'\n\n---\n\n##判断当天为星期几\n\t\n\tpublic int getWeek() {\n\n\t    SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t    Calendar c = Calendar.getInstance();\n\t    Date date = new Date();\n\t    c.setTime(date);\n\t\n\t    String day = format.format(date);\n\t\tint currentdayForWeek = 0;\n\n\t\tif (c.get(Calendar.DAY_OF_WEEK) == 1) {\n\t        currentdayForWeek = 7;\n\t    } else {\n\t        currentdayForWeek = c.get(Calendar.DAY_OF_WEEK) - 1;\n\t    }\n\t\treturn currentdayForWeek;\n\t}\n\n\n##对List中的某个属性进行排序\n\n###int 类型排序\n\t如List<Activities>降序\n\n\tCollections.sort(activities, new Comparator(){\n\t\t@Override\n\t\tpublic int compare(Object o1, Object o2) {\n\t\t     Activities act1 =(Activities)o1;\n\t\t     Activities act2 =(Activities)o2;\n\t\t\tif(act1.getId()<act2.getId()){\n\t\t\t    return 1;\n\t\t\t}else if(act1.getId()==act2.getId()){\n\t\t\t    return 0;\n\t\t\t}else{\n\t\t\t    return -1;\n\t\t\t}\n\t\t}\n\t});\n###String 类型排序（字母）\n\t如List<Student> studentList升序\n\n\tCollections.sort(studentList, new Comparator(){\n\t\t@Override\n\t\tpublic int compare(Object o1, Object o2) {\n\t\t    Student stu1 = (Student)o1;\n\t\t    Student stu2 = (Student)o2;\n\t\t\treturn stu1.getName().compareTo(stu2.getName());\n\t\t}\n\t});\n\n##java URL编码解码\n\tURLEncoder.encode(\"这里是String字符串\", \"utf-8\")\n\tURLDecoder.decode(\"这里是String字符串\", \"utf-8\")\n\n##计算两个日期之间相差的天数\n\t\n\t/**\n\t * 计算两个日期之间相差的天数\n\t * @param smdate 较小的时间\n\t * @param bdate  较大的时间\n\t * @return 相差天数\n\t * @throws ParseException\n\t */\n\tpublic static int daysBetween(Date smdate,Date bdate) throws ParseException\n\t{\n\t    SimpleDateFormat sdf=new SimpleDateFormat(\"yyyy-MM-dd\");\n\t    smdate=sdf.parse(sdf.format(smdate));\n\t    bdate=sdf.parse(sdf.format(bdate));\n\t    Calendar cal = Calendar.getInstance();\n\t    cal.setTime(smdate);\n\t    long time1 = cal.getTimeInMillis();\n\t    cal.setTime(bdate);\n\t    long time2 = cal.getTimeInMillis();\n\t    long between_days=(time2-time1)/(1000*3600*24);\n\t\n\t    return Integer.parseInt(String.valueOf(between_days));\n\t}\n\n##java Date \n年月日时分秒 对应于数据库 datetime","slug":"java","published":1,"updated":"2018-12-04T14:55:48.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0icc000m1wu0axkmok5v","content":"<p>##判断当天为星期几</p>\n<pre><code>public int getWeek() {\n\n    SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);\n    Calendar c = Calendar.getInstance();\n    Date date = new Date();\n    c.setTime(date);\n\n    String day = format.format(date);\n    int currentdayForWeek = 0;\n\n    if (c.get(Calendar.DAY_OF_WEEK) == 1) {\n        currentdayForWeek = 7;\n    } else {\n        currentdayForWeek = c.get(Calendar.DAY_OF_WEEK) - 1;\n    }\n    return currentdayForWeek;\n}\n</code></pre><p>##对List中的某个属性进行排序</p>\n<p>###int 类型排序<br>    如List<activities>降序</activities></p>\n<pre><code>Collections.sort(activities, new Comparator(){\n    @Override\n    public int compare(Object o1, Object o2) {\n         Activities act1 =(Activities)o1;\n         Activities act2 =(Activities)o2;\n        if(act1.getId()&lt;act2.getId()){\n            return 1;\n        }else if(act1.getId()==act2.getId()){\n            return 0;\n        }else{\n            return -1;\n        }\n    }\n});\n</code></pre><p>###String 类型排序（字母）<br>    如List<student> studentList升序</student></p>\n<pre><code>Collections.sort(studentList, new Comparator(){\n    @Override\n    public int compare(Object o1, Object o2) {\n        Student stu1 = (Student)o1;\n        Student stu2 = (Student)o2;\n        return stu1.getName().compareTo(stu2.getName());\n    }\n});\n</code></pre><p>##java URL编码解码<br>    URLEncoder.encode(“这里是String字符串”, “utf-8”)<br>    URLDecoder.decode(“这里是String字符串”, “utf-8”)</p>\n<p>##计算两个日期之间相差的天数</p>\n<pre><code>/**\n * 计算两个日期之间相差的天数\n * @param smdate 较小的时间\n * @param bdate  较大的时间\n * @return 相差天数\n * @throws ParseException\n */\npublic static int daysBetween(Date smdate,Date bdate) throws ParseException\n{\n    SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);\n    smdate=sdf.parse(sdf.format(smdate));\n    bdate=sdf.parse(sdf.format(bdate));\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(smdate);\n    long time1 = cal.getTimeInMillis();\n    cal.setTime(bdate);\n    long time2 = cal.getTimeInMillis();\n    long between_days=(time2-time1)/(1000*3600*24);\n\n    return Integer.parseInt(String.valueOf(between_days));\n}\n</code></pre><p>##java Date<br>年月日时分秒 对应于数据库 datetime</p>\n","site":{"data":{}},"excerpt":"","more":"<p>##判断当天为星期几</p>\n<pre><code>public int getWeek() {\n\n    SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);\n    Calendar c = Calendar.getInstance();\n    Date date = new Date();\n    c.setTime(date);\n\n    String day = format.format(date);\n    int currentdayForWeek = 0;\n\n    if (c.get(Calendar.DAY_OF_WEEK) == 1) {\n        currentdayForWeek = 7;\n    } else {\n        currentdayForWeek = c.get(Calendar.DAY_OF_WEEK) - 1;\n    }\n    return currentdayForWeek;\n}\n</code></pre><p>##对List中的某个属性进行排序</p>\n<p>###int 类型排序<br>    如List<activities>降序</activities></p>\n<pre><code>Collections.sort(activities, new Comparator(){\n    @Override\n    public int compare(Object o1, Object o2) {\n         Activities act1 =(Activities)o1;\n         Activities act2 =(Activities)o2;\n        if(act1.getId()&lt;act2.getId()){\n            return 1;\n        }else if(act1.getId()==act2.getId()){\n            return 0;\n        }else{\n            return -1;\n        }\n    }\n});\n</code></pre><p>###String 类型排序（字母）<br>    如List<student> studentList升序</student></p>\n<pre><code>Collections.sort(studentList, new Comparator(){\n    @Override\n    public int compare(Object o1, Object o2) {\n        Student stu1 = (Student)o1;\n        Student stu2 = (Student)o2;\n        return stu1.getName().compareTo(stu2.getName());\n    }\n});\n</code></pre><p>##java URL编码解码<br>    URLEncoder.encode(“这里是String字符串”, “utf-8”)<br>    URLDecoder.decode(“这里是String字符串”, “utf-8”)</p>\n<p>##计算两个日期之间相差的天数</p>\n<pre><code>/**\n * 计算两个日期之间相差的天数\n * @param smdate 较小的时间\n * @param bdate  较大的时间\n * @return 相差天数\n * @throws ParseException\n */\npublic static int daysBetween(Date smdate,Date bdate) throws ParseException\n{\n    SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);\n    smdate=sdf.parse(sdf.format(smdate));\n    bdate=sdf.parse(sdf.format(bdate));\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(smdate);\n    long time1 = cal.getTimeInMillis();\n    cal.setTime(bdate);\n    long time2 = cal.getTimeInMillis();\n    long between_days=(time2-time1)/(1000*3600*24);\n\n    return Integer.parseInt(String.valueOf(between_days));\n}\n</code></pre><p>##java Date<br>年月日时分秒 对应于数据库 datetime</p>\n"},{"title":"javascript utils","date":"2018-07-03T03:46:16.000Z","description":"javascript的常用utils，工具，公共方法，可封装的方法汇集","_content":"\n##格式化时间 时间戳 转 yyyy-MM-dd hh:mm:ss\n\tfunction formatTime(time){\n\t\t//   格式：yyyy-MM-dd hh:mm:ss\n\t\tvar date = new Date(time);\n\t\tY = date.getFullYear() + '-';\n\t\tM = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';\n\t\tD = date.getDate() < 10? '0'+date.getDate()+ ' ': date.getDate() + ' ';\n\t\th = date.getHours()< 10? '0'+date.getHours() + ':': date.getHours() + ':';\n\t\tm = date.getMinutes()<10? '0' + date.getMinutes()+':':date.getMinutes()+ ':';\n\t\ts = date.getSeconds()< 10? '0'+date.getSeconds():date.getSeconds();\n\t\treturn Y+M+D+h+m+s;\n\t}\n\n\n##js 如何把字符串转化为日期\n\n\tvar str ='2012-08-12 23:13:15';\n\tstr = str.replace(/-/g,\"/\");\n\tvar date = newk Date(str );\n\n##获得json对象的键名\n\tvar PersonInfo = {\n\t    name:'Sigma',\n\t    age:18\n\t};\n\tfor( var key in PersonInfo ){\n\t    alert('Key name is ' + key );\n\t}\n\n\n##input file 图片预览（简单实例）\n\t\n\t$(\"input[name=fileimgs]\").change(function (){\n\t\tvar src = getObjectURL(this.files[0]); //获取路径\n\t\t$(this).siblings(\"img\").attr(\"src\", src);\n\t});\n\n\tfunction getObjectURL(file) {\n\t\tvar url = null;\n\t\tif (window.createObjectURL != undefined) {\n\t\t\turl = window.createObjectURL(file)\n\t\t} else if (window.URL != undefined) {\n\t\t\turl = window.URL.createObjectURL(file)\n\t\t} else if (window.webkitURL != undefined) {\n\t\t\turl = window.webkitURL.createObjectURL(file)\n\t\t}\n\t\treturn url\n\t};\n\n##获取HTML地址栏的参数\n\n\tfunction getParamByName(paramName){\n\t     var reg = new RegExp(\"(^|&)\"+ name +\"=([^&]*)(&|$)\");\n\t     var r = window.location.search.substr(1).match(reg);\n\t     if(r!=null)return  unescape(r[2]); return null;\n\t}\n\n##JS编码解码\n\tencodeURIComponent()\n\tdecodeURIComponent()\n\n##时间字符串转时间戳 \n\tvar startTime = '2014-07-10 11:21:12';\n\tvar startTimestamp = Date.parse(new Date(startTime));\n\tstartTimestamp = startTimestamp / 1000;\n\t//2014-07-10 10:21:12的时间戳为：1404958872\n\tconsole.log(startTimestamp + \"的时间戳为：\" + startTimestamp);\n\n### 回车键监听\n\n\tdocument.onkeydown = function(event) {\n\t\tvar e = event || window.event || arguments.callee.caller.arguments[0];\n\t\tif(e && e.keyCode == 13) { // enter 键\n\t\t\t\t\t\t\n\t\t}\n\t};\n\n\n###  设置    checkkbox 全选全不选 选中不选中\n\n\tthis.checked = true;\n\tthis.checked = false;\n\n### 四舍五入保留N位小数\n\n\tNumberObject.toFixed(num) \n\ntoFixed() 方法可把 Number 四舍五入为指定小数位数的数字。\n\nnum必需。规定小数的位数，是 0 ~ 20 之间的值，包括 0 和 20，有些实现可以支持更大的数值范围。如果省略了该参数，将用 0 代替。\n\n\n### 获取浏览器的类型\n\t\n\t function getBrowserType () {\n\t\t\tvar userAgent = navigator.userAgent; //取得浏览器的userAgent字符串\n\t\t\tvar isOpera = userAgent.indexOf(\"Opera\") > -1;\n\t\t\tif(isOpera) {\n\t\t\t\treturn \"Opera\"\n\t\t\t}; //判断是否Opera浏览器\n\t\t\tif(userAgent.indexOf(\"Firefox\") > -1) {\n\t\t\t\treturn \"FF\";\n\t\t\t} //判断是否Firefox浏览器\n\t\t\tif(userAgent.indexOf(\"Chrome\") > -1) {\n\t\t\t\treturn \"Chrome\";\n\t\t\t}\n\t\t\tif(userAgent.indexOf(\"Safari\") > -1) {\n\t\t\t\treturn \"Safari\";\n\t\t\t} //判断是否Safari浏览器\n\t\t\tif(userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1 && !isOpera) {\n\t\t\t\treturn \"IE\";\n\t\t\t}; //判断是否IE浏览器\n\t\t}\n\n###  获取窗口的高度 \n\n\t \tlet winWidth = 0;\n\t    if (window.innerWidth) winWidth = window.innerWidth;\n\t    else if (document.body && document.body.clientWidth)     //IE \n\t        winWidth = document.body.clientWidth;\n\t    return winWidth;\n\n### 在即将离开当前页面(刷新或关闭)时执行 JavaScript :\n\n\twindow.onbeforeunload = function () { \n\t\treturn ''  //return字符串会系统提醒会否确定离开或者刷新当前页面\n\t}","source":"_posts/javascript-utils.md","raw":"---\ntitle: javascript utils\ndate: 2018-07-03 11:46:16\ntags: js,\ncategories: [前端]\ndescription: 'javascript的常用utils，工具，公共方法，可封装的方法汇集'\n\n---\n\n##格式化时间 时间戳 转 yyyy-MM-dd hh:mm:ss\n\tfunction formatTime(time){\n\t\t//   格式：yyyy-MM-dd hh:mm:ss\n\t\tvar date = new Date(time);\n\t\tY = date.getFullYear() + '-';\n\t\tM = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';\n\t\tD = date.getDate() < 10? '0'+date.getDate()+ ' ': date.getDate() + ' ';\n\t\th = date.getHours()< 10? '0'+date.getHours() + ':': date.getHours() + ':';\n\t\tm = date.getMinutes()<10? '0' + date.getMinutes()+':':date.getMinutes()+ ':';\n\t\ts = date.getSeconds()< 10? '0'+date.getSeconds():date.getSeconds();\n\t\treturn Y+M+D+h+m+s;\n\t}\n\n\n##js 如何把字符串转化为日期\n\n\tvar str ='2012-08-12 23:13:15';\n\tstr = str.replace(/-/g,\"/\");\n\tvar date = newk Date(str );\n\n##获得json对象的键名\n\tvar PersonInfo = {\n\t    name:'Sigma',\n\t    age:18\n\t};\n\tfor( var key in PersonInfo ){\n\t    alert('Key name is ' + key );\n\t}\n\n\n##input file 图片预览（简单实例）\n\t\n\t$(\"input[name=fileimgs]\").change(function (){\n\t\tvar src = getObjectURL(this.files[0]); //获取路径\n\t\t$(this).siblings(\"img\").attr(\"src\", src);\n\t});\n\n\tfunction getObjectURL(file) {\n\t\tvar url = null;\n\t\tif (window.createObjectURL != undefined) {\n\t\t\turl = window.createObjectURL(file)\n\t\t} else if (window.URL != undefined) {\n\t\t\turl = window.URL.createObjectURL(file)\n\t\t} else if (window.webkitURL != undefined) {\n\t\t\turl = window.webkitURL.createObjectURL(file)\n\t\t}\n\t\treturn url\n\t};\n\n##获取HTML地址栏的参数\n\n\tfunction getParamByName(paramName){\n\t     var reg = new RegExp(\"(^|&)\"+ name +\"=([^&]*)(&|$)\");\n\t     var r = window.location.search.substr(1).match(reg);\n\t     if(r!=null)return  unescape(r[2]); return null;\n\t}\n\n##JS编码解码\n\tencodeURIComponent()\n\tdecodeURIComponent()\n\n##时间字符串转时间戳 \n\tvar startTime = '2014-07-10 11:21:12';\n\tvar startTimestamp = Date.parse(new Date(startTime));\n\tstartTimestamp = startTimestamp / 1000;\n\t//2014-07-10 10:21:12的时间戳为：1404958872\n\tconsole.log(startTimestamp + \"的时间戳为：\" + startTimestamp);\n\n### 回车键监听\n\n\tdocument.onkeydown = function(event) {\n\t\tvar e = event || window.event || arguments.callee.caller.arguments[0];\n\t\tif(e && e.keyCode == 13) { // enter 键\n\t\t\t\t\t\t\n\t\t}\n\t};\n\n\n###  设置    checkkbox 全选全不选 选中不选中\n\n\tthis.checked = true;\n\tthis.checked = false;\n\n### 四舍五入保留N位小数\n\n\tNumberObject.toFixed(num) \n\ntoFixed() 方法可把 Number 四舍五入为指定小数位数的数字。\n\nnum必需。规定小数的位数，是 0 ~ 20 之间的值，包括 0 和 20，有些实现可以支持更大的数值范围。如果省略了该参数，将用 0 代替。\n\n\n### 获取浏览器的类型\n\t\n\t function getBrowserType () {\n\t\t\tvar userAgent = navigator.userAgent; //取得浏览器的userAgent字符串\n\t\t\tvar isOpera = userAgent.indexOf(\"Opera\") > -1;\n\t\t\tif(isOpera) {\n\t\t\t\treturn \"Opera\"\n\t\t\t}; //判断是否Opera浏览器\n\t\t\tif(userAgent.indexOf(\"Firefox\") > -1) {\n\t\t\t\treturn \"FF\";\n\t\t\t} //判断是否Firefox浏览器\n\t\t\tif(userAgent.indexOf(\"Chrome\") > -1) {\n\t\t\t\treturn \"Chrome\";\n\t\t\t}\n\t\t\tif(userAgent.indexOf(\"Safari\") > -1) {\n\t\t\t\treturn \"Safari\";\n\t\t\t} //判断是否Safari浏览器\n\t\t\tif(userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1 && !isOpera) {\n\t\t\t\treturn \"IE\";\n\t\t\t}; //判断是否IE浏览器\n\t\t}\n\n###  获取窗口的高度 \n\n\t \tlet winWidth = 0;\n\t    if (window.innerWidth) winWidth = window.innerWidth;\n\t    else if (document.body && document.body.clientWidth)     //IE \n\t        winWidth = document.body.clientWidth;\n\t    return winWidth;\n\n### 在即将离开当前页面(刷新或关闭)时执行 JavaScript :\n\n\twindow.onbeforeunload = function () { \n\t\treturn ''  //return字符串会系统提醒会否确定离开或者刷新当前页面\n\t}","slug":"javascript-utils","published":1,"updated":"2018-12-13T12:40:03.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0icf000o1wu0cqx2z69d","content":"<p>##格式化时间 时间戳 转 yyyy-MM-dd hh:mm:ss<br>    function formatTime(time){<br>        //   格式：yyyy-MM-dd hh:mm:ss<br>        var date = new Date(time);<br>        Y = date.getFullYear() + ‘-‘;<br>        M = (date.getMonth()+1 &lt; 10 ? ‘0’+(date.getMonth()+1) : date.getMonth()+1) + ‘-‘;<br>        D = date.getDate() &lt; 10? ‘0’+date.getDate()+ ‘ ‘: date.getDate() + ‘ ‘;<br>        h = date.getHours()&lt; 10? ‘0’+date.getHours() + ‘:’: date.getHours() + ‘:’;<br>        m = date.getMinutes()&lt;10? ‘0’ + date.getMinutes()+’:’:date.getMinutes()+ ‘:’;<br>        s = date.getSeconds()&lt; 10? ‘0’+date.getSeconds():date.getSeconds();<br>        return Y+M+D+h+m+s;<br>    }</p>\n<p>##js 如何把字符串转化为日期</p>\n<pre><code>var str =&apos;2012-08-12 23:13:15&apos;;\nstr = str.replace(/-/g,&quot;/&quot;);\nvar date = newk Date(str );\n</code></pre><p>##获得json对象的键名<br>    var PersonInfo = {<br>        name:’Sigma’,<br>        age:18<br>    };<br>    for( var key in PersonInfo ){<br>        alert(‘Key name is ‘ + key );<br>    }</p>\n<p>##input file 图片预览（简单实例）</p>\n<pre><code>$(&quot;input[name=fileimgs]&quot;).change(function (){\n    var src = getObjectURL(this.files[0]); //获取路径\n    $(this).siblings(&quot;img&quot;).attr(&quot;src&quot;, src);\n});\n\nfunction getObjectURL(file) {\n    var url = null;\n    if (window.createObjectURL != undefined) {\n        url = window.createObjectURL(file)\n    } else if (window.URL != undefined) {\n        url = window.URL.createObjectURL(file)\n    } else if (window.webkitURL != undefined) {\n        url = window.webkitURL.createObjectURL(file)\n    }\n    return url\n};\n</code></pre><p>##获取HTML地址栏的参数</p>\n<pre><code>function getParamByName(paramName){\n     var reg = new RegExp(&quot;(^|&amp;)&quot;+ name +&quot;=([^&amp;]*)(&amp;|$)&quot;);\n     var r = window.location.search.substr(1).match(reg);\n     if(r!=null)return  unescape(r[2]); return null;\n}\n</code></pre><p>##JS编码解码<br>    encodeURIComponent()<br>    decodeURIComponent()</p>\n<p>##时间字符串转时间戳<br>    var startTime = ‘2014-07-10 11:21:12’;<br>    var startTimestamp = Date.parse(new Date(startTime));<br>    startTimestamp = startTimestamp / 1000;<br>    //2014-07-10 10:21:12的时间戳为：1404958872<br>    console.log(startTimestamp + “的时间戳为：” + startTimestamp);</p>\n<h3 id=\"回车键监听\"><a href=\"#回车键监听\" class=\"headerlink\" title=\"回车键监听\"></a>回车键监听</h3><pre><code>document.onkeydown = function(event) {\n    var e = event || window.event || arguments.callee.caller.arguments[0];\n    if(e &amp;&amp; e.keyCode == 13) { // enter 键\n\n    }\n};\n</code></pre><h3 id=\"设置-checkkbox-全选全不选-选中不选中\"><a href=\"#设置-checkkbox-全选全不选-选中不选中\" class=\"headerlink\" title=\"设置    checkkbox 全选全不选 选中不选中\"></a>设置    checkkbox 全选全不选 选中不选中</h3><pre><code>this.checked = true;\nthis.checked = false;\n</code></pre><h3 id=\"四舍五入保留N位小数\"><a href=\"#四舍五入保留N位小数\" class=\"headerlink\" title=\"四舍五入保留N位小数\"></a>四舍五入保留N位小数</h3><pre><code>NumberObject.toFixed(num) \n</code></pre><p>toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。</p>\n<p>num必需。规定小数的位数，是 0 ~ 20 之间的值，包括 0 和 20，有些实现可以支持更大的数值范围。如果省略了该参数，将用 0 代替。</p>\n<h3 id=\"获取浏览器的类型\"><a href=\"#获取浏览器的类型\" class=\"headerlink\" title=\"获取浏览器的类型\"></a>获取浏览器的类型</h3><pre><code>function getBrowserType () {\n       var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串\n       var isOpera = userAgent.indexOf(&quot;Opera&quot;) &gt; -1;\n       if(isOpera) {\n           return &quot;Opera&quot;\n       }; //判断是否Opera浏览器\n       if(userAgent.indexOf(&quot;Firefox&quot;) &gt; -1) {\n           return &quot;FF&quot;;\n       } //判断是否Firefox浏览器\n       if(userAgent.indexOf(&quot;Chrome&quot;) &gt; -1) {\n           return &quot;Chrome&quot;;\n       }\n       if(userAgent.indexOf(&quot;Safari&quot;) &gt; -1) {\n           return &quot;Safari&quot;;\n       } //判断是否Safari浏览器\n       if(userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1 &amp;&amp; !isOpera) {\n           return &quot;IE&quot;;\n       }; //判断是否IE浏览器\n   }\n</code></pre><h3 id=\"获取窗口的高度\"><a href=\"#获取窗口的高度\" class=\"headerlink\" title=\"获取窗口的高度\"></a>获取窗口的高度</h3><pre><code> let winWidth = 0;\nif (window.innerWidth) winWidth = window.innerWidth;\nelse if (document.body &amp;&amp; document.body.clientWidth)     //IE \n    winWidth = document.body.clientWidth;\nreturn winWidth;\n</code></pre><h3 id=\"在即将离开当前页面-刷新或关闭-时执行-JavaScript\"><a href=\"#在即将离开当前页面-刷新或关闭-时执行-JavaScript\" class=\"headerlink\" title=\"在即将离开当前页面(刷新或关闭)时执行 JavaScript :\"></a>在即将离开当前页面(刷新或关闭)时执行 JavaScript :</h3><pre><code>window.onbeforeunload = function () { \n    return &apos;&apos;  //return字符串会系统提醒会否确定离开或者刷新当前页面\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>##格式化时间 时间戳 转 yyyy-MM-dd hh:mm:ss<br>    function formatTime(time){<br>        //   格式：yyyy-MM-dd hh:mm:ss<br>        var date = new Date(time);<br>        Y = date.getFullYear() + ‘-‘;<br>        M = (date.getMonth()+1 &lt; 10 ? ‘0’+(date.getMonth()+1) : date.getMonth()+1) + ‘-‘;<br>        D = date.getDate() &lt; 10? ‘0’+date.getDate()+ ‘ ‘: date.getDate() + ‘ ‘;<br>        h = date.getHours()&lt; 10? ‘0’+date.getHours() + ‘:’: date.getHours() + ‘:’;<br>        m = date.getMinutes()&lt;10? ‘0’ + date.getMinutes()+’:’:date.getMinutes()+ ‘:’;<br>        s = date.getSeconds()&lt; 10? ‘0’+date.getSeconds():date.getSeconds();<br>        return Y+M+D+h+m+s;<br>    }</p>\n<p>##js 如何把字符串转化为日期</p>\n<pre><code>var str =&apos;2012-08-12 23:13:15&apos;;\nstr = str.replace(/-/g,&quot;/&quot;);\nvar date = newk Date(str );\n</code></pre><p>##获得json对象的键名<br>    var PersonInfo = {<br>        name:’Sigma’,<br>        age:18<br>    };<br>    for( var key in PersonInfo ){<br>        alert(‘Key name is ‘ + key );<br>    }</p>\n<p>##input file 图片预览（简单实例）</p>\n<pre><code>$(&quot;input[name=fileimgs]&quot;).change(function (){\n    var src = getObjectURL(this.files[0]); //获取路径\n    $(this).siblings(&quot;img&quot;).attr(&quot;src&quot;, src);\n});\n\nfunction getObjectURL(file) {\n    var url = null;\n    if (window.createObjectURL != undefined) {\n        url = window.createObjectURL(file)\n    } else if (window.URL != undefined) {\n        url = window.URL.createObjectURL(file)\n    } else if (window.webkitURL != undefined) {\n        url = window.webkitURL.createObjectURL(file)\n    }\n    return url\n};\n</code></pre><p>##获取HTML地址栏的参数</p>\n<pre><code>function getParamByName(paramName){\n     var reg = new RegExp(&quot;(^|&amp;)&quot;+ name +&quot;=([^&amp;]*)(&amp;|$)&quot;);\n     var r = window.location.search.substr(1).match(reg);\n     if(r!=null)return  unescape(r[2]); return null;\n}\n</code></pre><p>##JS编码解码<br>    encodeURIComponent()<br>    decodeURIComponent()</p>\n<p>##时间字符串转时间戳<br>    var startTime = ‘2014-07-10 11:21:12’;<br>    var startTimestamp = Date.parse(new Date(startTime));<br>    startTimestamp = startTimestamp / 1000;<br>    //2014-07-10 10:21:12的时间戳为：1404958872<br>    console.log(startTimestamp + “的时间戳为：” + startTimestamp);</p>\n<h3 id=\"回车键监听\"><a href=\"#回车键监听\" class=\"headerlink\" title=\"回车键监听\"></a>回车键监听</h3><pre><code>document.onkeydown = function(event) {\n    var e = event || window.event || arguments.callee.caller.arguments[0];\n    if(e &amp;&amp; e.keyCode == 13) { // enter 键\n\n    }\n};\n</code></pre><h3 id=\"设置-checkkbox-全选全不选-选中不选中\"><a href=\"#设置-checkkbox-全选全不选-选中不选中\" class=\"headerlink\" title=\"设置    checkkbox 全选全不选 选中不选中\"></a>设置    checkkbox 全选全不选 选中不选中</h3><pre><code>this.checked = true;\nthis.checked = false;\n</code></pre><h3 id=\"四舍五入保留N位小数\"><a href=\"#四舍五入保留N位小数\" class=\"headerlink\" title=\"四舍五入保留N位小数\"></a>四舍五入保留N位小数</h3><pre><code>NumberObject.toFixed(num) \n</code></pre><p>toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。</p>\n<p>num必需。规定小数的位数，是 0 ~ 20 之间的值，包括 0 和 20，有些实现可以支持更大的数值范围。如果省略了该参数，将用 0 代替。</p>\n<h3 id=\"获取浏览器的类型\"><a href=\"#获取浏览器的类型\" class=\"headerlink\" title=\"获取浏览器的类型\"></a>获取浏览器的类型</h3><pre><code>function getBrowserType () {\n       var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串\n       var isOpera = userAgent.indexOf(&quot;Opera&quot;) &gt; -1;\n       if(isOpera) {\n           return &quot;Opera&quot;\n       }; //判断是否Opera浏览器\n       if(userAgent.indexOf(&quot;Firefox&quot;) &gt; -1) {\n           return &quot;FF&quot;;\n       } //判断是否Firefox浏览器\n       if(userAgent.indexOf(&quot;Chrome&quot;) &gt; -1) {\n           return &quot;Chrome&quot;;\n       }\n       if(userAgent.indexOf(&quot;Safari&quot;) &gt; -1) {\n           return &quot;Safari&quot;;\n       } //判断是否Safari浏览器\n       if(userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1 &amp;&amp; !isOpera) {\n           return &quot;IE&quot;;\n       }; //判断是否IE浏览器\n   }\n</code></pre><h3 id=\"获取窗口的高度\"><a href=\"#获取窗口的高度\" class=\"headerlink\" title=\"获取窗口的高度\"></a>获取窗口的高度</h3><pre><code> let winWidth = 0;\nif (window.innerWidth) winWidth = window.innerWidth;\nelse if (document.body &amp;&amp; document.body.clientWidth)     //IE \n    winWidth = document.body.clientWidth;\nreturn winWidth;\n</code></pre><h3 id=\"在即将离开当前页面-刷新或关闭-时执行-JavaScript\"><a href=\"#在即将离开当前页面-刷新或关闭-时执行-JavaScript\" class=\"headerlink\" title=\"在即将离开当前页面(刷新或关闭)时执行 JavaScript :\"></a>在即将离开当前页面(刷新或关闭)时执行 JavaScript :</h3><pre><code>window.onbeforeunload = function () { \n    return &apos;&apos;  //return字符串会系统提醒会否确定离开或者刷新当前页面\n}\n</code></pre>"},{"title":"javascript中对象的深度克隆","date":"2018-07-03T09:14:22.000Z","description":"记录一个常见的面试题，javascript中对象的深度克隆  转载自： https://www.cnblogs.com/jq-melody/p/4499333.html ","_content":"\n\n# 一、js中的对象\n \n　　谈到对象的克隆，必定要说一下对象的概念。\n \n　　js中的数据类型分为两大类：原始类型和对象类型。\n\n- （1）原始类型包括：数值、字符串、布尔值、null、undefined（后两个是特殊的原始值，这里不做详细的说明，我的上一篇博客有谈到过一些）\n- （2）对象类型包括：对象即是属性的集合，当然这里又两个特殊的对象----函数（js中的一等对象）、数组（键值的有序集合）。\n \n　　好了既然对象分为这两类，这两种类型在复制克隆的时候是有很大区别的。原始类型存储的是对象的实际数据，而对象类型存储的是对象的引用地址（对象的实际内容单独存放，为了减少数据开销通常存放在内存中）。\n\nps：说到这里，大家要知道，对象的原型也是引用对象，它把原型的方法和属性放在内存当中，通过原型链的方式来指向这个内存地址。\n \n# 二、克隆的概念\n \n　　浅度克隆：原始类型为值传递，对象类型仍为引用传递。\n \n　　深度克隆：所有元素或属性均完全复制，与原对象完全脱离，也就是说所有对于新对象的修改都不会反映到原对象中。\n \n# 三、浅克隆的表现\n\n## 1，原始类型\n看下面一段代码\n\n\t//数值克隆的表现\n\tvar a=\"1\";\n\tvar b=a;\n\tb=\"2\";\n\tconsole.log(a);// \"1\"\n\tconsole.log(b);// \"2\"\n\t//字符串克隆的表现\n\tvar c=\"1\";\n\tvar d=c;\n\td=\"2\";\n\tconsole.log(c);// \"1\"\n\tconsole.log(d);// \"2\"\n\t//字符串克隆的表现\n\tvar x=true;\n\tvar y=x;\n\ty=false;\n\tconsole.log(x);// true\n\tconsole.log(y);// false\n\n　从上面的代码大家可以看出，原始类型即使我们采用普通的克隆方式仍能得到正确的结果，原因就是原始类型存储的是对象的实际数据。\n\n## 2.对象类型\n前面说过，函数式一等对象，当然也是对象类型，但是函数的克隆通过浅克隆即可实现\n\n\tvar m=function(){alert(1);};\n\tvar n=m;\n\tn=function(){alert(2);};\n\t \n\tconsole.log(m());//1\n\tconsole.log(n());//2\n\n大家能看到，我们直接通过普通赋值的方式，就实现了函数的克隆，并且不会影响之前的对象。原因就是函数的克隆会在内存单独开辟一块空间，互不影响。\n \n　　好了，说了这个特殊的”关系户“以后，我们来说说普通的”选手“。为了方便后续的代码表现，我这里定义一个复杂的对象类型oPerson。下面看一下对象类型的浅复制有什么危害：\n\n\tvar oPerson={\n\t    oName:\"rookiebob\",\n\t    oAge:\"18\",\n\t    oAddress:{\n\t        province:\"beijing\"\n\t    },    \n\t    ofavorite:[\n\t        \"swimming\",\n\t        {reading:\"history book\"}\n\t    ],\n\t    skill:function(){\n\t        console.log(\"bob is coding\");\n\t    }\n\t};\n\tfunction clone(obj){\n\t    var result={};\n\t    for(key in obj){\n\t        result[key]=obj[key];\n\t    }\n\t    return result;\n\t}\n\tvar oNew=clone(oPerson);\n\tconsole.log(oPerson.oAddress.province);//beijing\n\toNew.oAddress.province=\"shanghai\";\n\tconsole.log(oPerson.oAddress.province);//shanghai\n\n　通过上面的代码，大家能看到，经过对象克隆以后，我修改oNew的地址，发现原对象oPerson也被修改了。这说明对象的克隆不够彻底，那也就是说深度克隆失败！\n \n# 四、深克隆的实现\n\n为了保证对象的所有属性都被复制到，我们必须知道如果for循环以后，得到的元素仍是Object或者Array，那么需要再次循环，直到元素是原始类型或者函数为止。为了得到元素的类型，我们定义一个通用函数，用来返回传入对象的类型。\n\n\t//返回传递给他的任意对象的类\n\tfunction isClass(o){\n\t    if(o===null) return \"Null\";\n\t    if(o===undefined) return \"Undefined\";\n\t    return Object.prototype.toString.call(o).slice(8,-1);\n\t}\n\nPS:Object.prototype.toString.call(o)能直接返回对象的类属性，形如\"[object class]\"的字符串，我们通过截取class，并能知道传入的对象是什么类型。\n\n当然这里有两个疑问需要解释下：\n　　![](https://i.imgur.com/h4JnZhe.png)\n\n\n- （1）为什么不直接用toString方法？这是为了防止对象中的toString方法被重写，为了正确的调用toString()版本，必须间接的调用Function.call()方法\n \n- （2）为什么不使用typeof来直接判断类型？因为对于Array而言，使用typeof（Array）返回的是object，所以不能得到正确的Array，这里对于后续的数组克隆将产生致命的问题。\n\n下面就是真正的深度克隆\n\t\n\t//深度克隆\n\tfunction deepClone(obj){\n\t    var result,oClass=isClass(obj);\n\t        //确定result的类型\n\t    if(oClass===\"Object\"){\n\t        result={};\n\t    }else if(oClass===\"Array\"){\n\t        result=[];\n\t    }else{\n\t        return obj;\n\t    }\n\t    for(key in obj){\n\t        var copy=obj[key];\n\t        if(isClass(copy)==\"Object\"){\n\t            result[key]=arguments.callee(copy);//递归调用\n\t        }else if(isClass(copy)==\"Array\"){\n\t            result[key]=arguments.callee(copy);\n\t        }else{\n\t            result[key]=obj[key];\n\t        }\n\t    }\n\t    return result;\n\t}\n\t//返回传递给他的任意对象的类\n\tfunction isClass(o){\n\t    if(o===null) return \"Null\";\n\t    if(o===undefined) return \"Undefined\";\n\t    return Object.prototype.toString.call(o).slice(8,-1);\n\t}\n\tvar oPerson={\n\t    oName:\"rookiebob\",\n\t    oAge:\"18\",\n\t    oAddress:{\n\t        province:\"beijing\"\n\t    },    \n\t    ofavorite:[\n\t        \"swimming\",\n\t        {reading:\"history book\"}\n\t    ],\n\t    skill:function(){\n\t        console.log(\"bob is coding\");\n\t    }\n\t};\n\t//深度克隆一个对象\n\tvar oNew=deepClone(oPerson);\n\t \n\toNew.ofavorite[1].reading=\"picture\";\n\tconsole.log(oNew.ofavorite[1].reading);//picture\n\tconsole.log(oPerson.ofavorite[1].reading);//history book\n\t \n\toNew.oAddress.province=\"shanghai\";\n\tconsole.log(oPerson.oAddress.province);//beijing\n\tconsole.log(oNew.oAddress.province);//shanghai\n\n从上面的代码可以看到，深度克隆的对象可以完全脱离原对象，我们对新对象的任何修改都不会反映到原对象中，这样深度克隆就实现了。\n \n　　这里要注意一点的就是：为什么deepClone这个函数中的result一定要判断类型？这里有一种情况，如果你的result直接是{}对象，我明明传进去的是一个数组，结果你复制完了以后，变成了一个对象了。\n\n\t//深度克隆\n\tfunction deepClone(obj){\n\t    var result={},oClass=isClass(obj);\n\t    // if(oClass===\"Object\"){\n\t    //     result={};\n\t    // }else if(oClass===\"Array\"){\n\t    //     result=[];\n\t    // }else{\n\t    //     return obj;\n\t    // }\n\t    for(key in obj){\n\t        var copy=obj[key];\n\t        if(isClass(copy)==\"Object\"){\n\t            result[key]=arguments.callee(copy);\n\t        }else if(isClass(copy)==\"Array\"){\n\t            result[key]=arguments.callee(copy);\n\t        }else{\n\t            result[key]=obj[key];\n\t        }\n\t    }\n\t    return result;\n\t}\n\tfunction isClass(o){\n\t    if(o===null) return \"Null\";\n\t    if(o===undefined) return \"Undefined\";\n\t    return Object.prototype.toString.call(o).slice(8,-1);\n\t}\n\t//克隆一个数组\n\tvar arr=[\"a\",\"b\",\"c\"];\n\tvar oNew=deepClone(arr);\n\tconsole.log(oNew);//Object {0: \"a\", 1: \"b\", 2: \"c\"}\n\n### 另外一种写法，只要递归调用\"浅拷贝\"就行了\n\n\t　　function deepCopy(p, c) {\n\t\n\t　　　　var c = c || {};\n\t\n\t　　　　for (var i in p) {\n\t\n\t　　　　　　if (typeof p[i] === 'object') {\n\t\n\t　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : {};\n\t\n\t　　　　　　　　deepCopy(p[i], c[i]);\n\t\n\t　　　　　　} else {\n\t\n\t　　　　　　　　　c[i] = p[i];\n\t\n\t　　　　　　}\n\t　　　　}\n\t\n\t　　　　return c;\n\t　　}\n\n","source":"_posts/javascript中对象的深度克隆.md","raw":"---\ntitle: javascript中对象的深度克隆\ndate: 2018-07-03 17:14:22\ntags: js,\ncategories: 前端\ndescription: '记录一个常见的面试题，javascript中对象的深度克隆 \n转载自： https://www.cnblogs.com/jq-melody/p/4499333.html\n'\n\n---\n\n\n# 一、js中的对象\n \n　　谈到对象的克隆，必定要说一下对象的概念。\n \n　　js中的数据类型分为两大类：原始类型和对象类型。\n\n- （1）原始类型包括：数值、字符串、布尔值、null、undefined（后两个是特殊的原始值，这里不做详细的说明，我的上一篇博客有谈到过一些）\n- （2）对象类型包括：对象即是属性的集合，当然这里又两个特殊的对象----函数（js中的一等对象）、数组（键值的有序集合）。\n \n　　好了既然对象分为这两类，这两种类型在复制克隆的时候是有很大区别的。原始类型存储的是对象的实际数据，而对象类型存储的是对象的引用地址（对象的实际内容单独存放，为了减少数据开销通常存放在内存中）。\n\nps：说到这里，大家要知道，对象的原型也是引用对象，它把原型的方法和属性放在内存当中，通过原型链的方式来指向这个内存地址。\n \n# 二、克隆的概念\n \n　　浅度克隆：原始类型为值传递，对象类型仍为引用传递。\n \n　　深度克隆：所有元素或属性均完全复制，与原对象完全脱离，也就是说所有对于新对象的修改都不会反映到原对象中。\n \n# 三、浅克隆的表现\n\n## 1，原始类型\n看下面一段代码\n\n\t//数值克隆的表现\n\tvar a=\"1\";\n\tvar b=a;\n\tb=\"2\";\n\tconsole.log(a);// \"1\"\n\tconsole.log(b);// \"2\"\n\t//字符串克隆的表现\n\tvar c=\"1\";\n\tvar d=c;\n\td=\"2\";\n\tconsole.log(c);// \"1\"\n\tconsole.log(d);// \"2\"\n\t//字符串克隆的表现\n\tvar x=true;\n\tvar y=x;\n\ty=false;\n\tconsole.log(x);// true\n\tconsole.log(y);// false\n\n　从上面的代码大家可以看出，原始类型即使我们采用普通的克隆方式仍能得到正确的结果，原因就是原始类型存储的是对象的实际数据。\n\n## 2.对象类型\n前面说过，函数式一等对象，当然也是对象类型，但是函数的克隆通过浅克隆即可实现\n\n\tvar m=function(){alert(1);};\n\tvar n=m;\n\tn=function(){alert(2);};\n\t \n\tconsole.log(m());//1\n\tconsole.log(n());//2\n\n大家能看到，我们直接通过普通赋值的方式，就实现了函数的克隆，并且不会影响之前的对象。原因就是函数的克隆会在内存单独开辟一块空间，互不影响。\n \n　　好了，说了这个特殊的”关系户“以后，我们来说说普通的”选手“。为了方便后续的代码表现，我这里定义一个复杂的对象类型oPerson。下面看一下对象类型的浅复制有什么危害：\n\n\tvar oPerson={\n\t    oName:\"rookiebob\",\n\t    oAge:\"18\",\n\t    oAddress:{\n\t        province:\"beijing\"\n\t    },    \n\t    ofavorite:[\n\t        \"swimming\",\n\t        {reading:\"history book\"}\n\t    ],\n\t    skill:function(){\n\t        console.log(\"bob is coding\");\n\t    }\n\t};\n\tfunction clone(obj){\n\t    var result={};\n\t    for(key in obj){\n\t        result[key]=obj[key];\n\t    }\n\t    return result;\n\t}\n\tvar oNew=clone(oPerson);\n\tconsole.log(oPerson.oAddress.province);//beijing\n\toNew.oAddress.province=\"shanghai\";\n\tconsole.log(oPerson.oAddress.province);//shanghai\n\n　通过上面的代码，大家能看到，经过对象克隆以后，我修改oNew的地址，发现原对象oPerson也被修改了。这说明对象的克隆不够彻底，那也就是说深度克隆失败！\n \n# 四、深克隆的实现\n\n为了保证对象的所有属性都被复制到，我们必须知道如果for循环以后，得到的元素仍是Object或者Array，那么需要再次循环，直到元素是原始类型或者函数为止。为了得到元素的类型，我们定义一个通用函数，用来返回传入对象的类型。\n\n\t//返回传递给他的任意对象的类\n\tfunction isClass(o){\n\t    if(o===null) return \"Null\";\n\t    if(o===undefined) return \"Undefined\";\n\t    return Object.prototype.toString.call(o).slice(8,-1);\n\t}\n\nPS:Object.prototype.toString.call(o)能直接返回对象的类属性，形如\"[object class]\"的字符串，我们通过截取class，并能知道传入的对象是什么类型。\n\n当然这里有两个疑问需要解释下：\n　　![](https://i.imgur.com/h4JnZhe.png)\n\n\n- （1）为什么不直接用toString方法？这是为了防止对象中的toString方法被重写，为了正确的调用toString()版本，必须间接的调用Function.call()方法\n \n- （2）为什么不使用typeof来直接判断类型？因为对于Array而言，使用typeof（Array）返回的是object，所以不能得到正确的Array，这里对于后续的数组克隆将产生致命的问题。\n\n下面就是真正的深度克隆\n\t\n\t//深度克隆\n\tfunction deepClone(obj){\n\t    var result,oClass=isClass(obj);\n\t        //确定result的类型\n\t    if(oClass===\"Object\"){\n\t        result={};\n\t    }else if(oClass===\"Array\"){\n\t        result=[];\n\t    }else{\n\t        return obj;\n\t    }\n\t    for(key in obj){\n\t        var copy=obj[key];\n\t        if(isClass(copy)==\"Object\"){\n\t            result[key]=arguments.callee(copy);//递归调用\n\t        }else if(isClass(copy)==\"Array\"){\n\t            result[key]=arguments.callee(copy);\n\t        }else{\n\t            result[key]=obj[key];\n\t        }\n\t    }\n\t    return result;\n\t}\n\t//返回传递给他的任意对象的类\n\tfunction isClass(o){\n\t    if(o===null) return \"Null\";\n\t    if(o===undefined) return \"Undefined\";\n\t    return Object.prototype.toString.call(o).slice(8,-1);\n\t}\n\tvar oPerson={\n\t    oName:\"rookiebob\",\n\t    oAge:\"18\",\n\t    oAddress:{\n\t        province:\"beijing\"\n\t    },    \n\t    ofavorite:[\n\t        \"swimming\",\n\t        {reading:\"history book\"}\n\t    ],\n\t    skill:function(){\n\t        console.log(\"bob is coding\");\n\t    }\n\t};\n\t//深度克隆一个对象\n\tvar oNew=deepClone(oPerson);\n\t \n\toNew.ofavorite[1].reading=\"picture\";\n\tconsole.log(oNew.ofavorite[1].reading);//picture\n\tconsole.log(oPerson.ofavorite[1].reading);//history book\n\t \n\toNew.oAddress.province=\"shanghai\";\n\tconsole.log(oPerson.oAddress.province);//beijing\n\tconsole.log(oNew.oAddress.province);//shanghai\n\n从上面的代码可以看到，深度克隆的对象可以完全脱离原对象，我们对新对象的任何修改都不会反映到原对象中，这样深度克隆就实现了。\n \n　　这里要注意一点的就是：为什么deepClone这个函数中的result一定要判断类型？这里有一种情况，如果你的result直接是{}对象，我明明传进去的是一个数组，结果你复制完了以后，变成了一个对象了。\n\n\t//深度克隆\n\tfunction deepClone(obj){\n\t    var result={},oClass=isClass(obj);\n\t    // if(oClass===\"Object\"){\n\t    //     result={};\n\t    // }else if(oClass===\"Array\"){\n\t    //     result=[];\n\t    // }else{\n\t    //     return obj;\n\t    // }\n\t    for(key in obj){\n\t        var copy=obj[key];\n\t        if(isClass(copy)==\"Object\"){\n\t            result[key]=arguments.callee(copy);\n\t        }else if(isClass(copy)==\"Array\"){\n\t            result[key]=arguments.callee(copy);\n\t        }else{\n\t            result[key]=obj[key];\n\t        }\n\t    }\n\t    return result;\n\t}\n\tfunction isClass(o){\n\t    if(o===null) return \"Null\";\n\t    if(o===undefined) return \"Undefined\";\n\t    return Object.prototype.toString.call(o).slice(8,-1);\n\t}\n\t//克隆一个数组\n\tvar arr=[\"a\",\"b\",\"c\"];\n\tvar oNew=deepClone(arr);\n\tconsole.log(oNew);//Object {0: \"a\", 1: \"b\", 2: \"c\"}\n\n### 另外一种写法，只要递归调用\"浅拷贝\"就行了\n\n\t　　function deepCopy(p, c) {\n\t\n\t　　　　var c = c || {};\n\t\n\t　　　　for (var i in p) {\n\t\n\t　　　　　　if (typeof p[i] === 'object') {\n\t\n\t　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : {};\n\t\n\t　　　　　　　　deepCopy(p[i], c[i]);\n\t\n\t　　　　　　} else {\n\t\n\t　　　　　　　　　c[i] = p[i];\n\t\n\t　　　　　　}\n\t　　　　}\n\t\n\t　　　　return c;\n\t　　}\n\n","slug":"javascript中对象的深度克隆","published":1,"updated":"2018-12-17T13:37:49.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ici000t1wu0w19h9nry","content":"<h1 id=\"一、js中的对象\"><a href=\"#一、js中的对象\" class=\"headerlink\" title=\"一、js中的对象\"></a>一、js中的对象</h1><p>　　谈到对象的克隆，必定要说一下对象的概念。</p>\n<p>　　js中的数据类型分为两大类：原始类型和对象类型。</p>\n<ul>\n<li>（1）原始类型包括：数值、字符串、布尔值、null、undefined（后两个是特殊的原始值，这里不做详细的说明，我的上一篇博客有谈到过一些）</li>\n<li>（2）对象类型包括：对象即是属性的集合，当然这里又两个特殊的对象—-函数（js中的一等对象）、数组（键值的有序集合）。</li>\n</ul>\n<p>　　好了既然对象分为这两类，这两种类型在复制克隆的时候是有很大区别的。原始类型存储的是对象的实际数据，而对象类型存储的是对象的引用地址（对象的实际内容单独存放，为了减少数据开销通常存放在内存中）。</p>\n<p>ps：说到这里，大家要知道，对象的原型也是引用对象，它把原型的方法和属性放在内存当中，通过原型链的方式来指向这个内存地址。</p>\n<h1 id=\"二、克隆的概念\"><a href=\"#二、克隆的概念\" class=\"headerlink\" title=\"二、克隆的概念\"></a>二、克隆的概念</h1><p>　　浅度克隆：原始类型为值传递，对象类型仍为引用传递。</p>\n<p>　　深度克隆：所有元素或属性均完全复制，与原对象完全脱离，也就是说所有对于新对象的修改都不会反映到原对象中。</p>\n<h1 id=\"三、浅克隆的表现\"><a href=\"#三、浅克隆的表现\" class=\"headerlink\" title=\"三、浅克隆的表现\"></a>三、浅克隆的表现</h1><h2 id=\"1，原始类型\"><a href=\"#1，原始类型\" class=\"headerlink\" title=\"1，原始类型\"></a>1，原始类型</h2><p>看下面一段代码</p>\n<pre><code>//数值克隆的表现\nvar a=&quot;1&quot;;\nvar b=a;\nb=&quot;2&quot;;\nconsole.log(a);// &quot;1&quot;\nconsole.log(b);// &quot;2&quot;\n//字符串克隆的表现\nvar c=&quot;1&quot;;\nvar d=c;\nd=&quot;2&quot;;\nconsole.log(c);// &quot;1&quot;\nconsole.log(d);// &quot;2&quot;\n//字符串克隆的表现\nvar x=true;\nvar y=x;\ny=false;\nconsole.log(x);// true\nconsole.log(y);// false\n</code></pre><p>　从上面的代码大家可以看出，原始类型即使我们采用普通的克隆方式仍能得到正确的结果，原因就是原始类型存储的是对象的实际数据。</p>\n<h2 id=\"2-对象类型\"><a href=\"#2-对象类型\" class=\"headerlink\" title=\"2.对象类型\"></a>2.对象类型</h2><p>前面说过，函数式一等对象，当然也是对象类型，但是函数的克隆通过浅克隆即可实现</p>\n<pre><code>var m=function(){alert(1);};\nvar n=m;\nn=function(){alert(2);};\n\nconsole.log(m());//1\nconsole.log(n());//2\n</code></pre><p>大家能看到，我们直接通过普通赋值的方式，就实现了函数的克隆，并且不会影响之前的对象。原因就是函数的克隆会在内存单独开辟一块空间，互不影响。</p>\n<p>　　好了，说了这个特殊的”关系户“以后，我们来说说普通的”选手“。为了方便后续的代码表现，我这里定义一个复杂的对象类型oPerson。下面看一下对象类型的浅复制有什么危害：</p>\n<pre><code>var oPerson={\n    oName:&quot;rookiebob&quot;,\n    oAge:&quot;18&quot;,\n    oAddress:{\n        province:&quot;beijing&quot;\n    },    \n    ofavorite:[\n        &quot;swimming&quot;,\n        {reading:&quot;history book&quot;}\n    ],\n    skill:function(){\n        console.log(&quot;bob is coding&quot;);\n    }\n};\nfunction clone(obj){\n    var result={};\n    for(key in obj){\n        result[key]=obj[key];\n    }\n    return result;\n}\nvar oNew=clone(oPerson);\nconsole.log(oPerson.oAddress.province);//beijing\noNew.oAddress.province=&quot;shanghai&quot;;\nconsole.log(oPerson.oAddress.province);//shanghai\n</code></pre><p>　通过上面的代码，大家能看到，经过对象克隆以后，我修改oNew的地址，发现原对象oPerson也被修改了。这说明对象的克隆不够彻底，那也就是说深度克隆失败！</p>\n<h1 id=\"四、深克隆的实现\"><a href=\"#四、深克隆的实现\" class=\"headerlink\" title=\"四、深克隆的实现\"></a>四、深克隆的实现</h1><p>为了保证对象的所有属性都被复制到，我们必须知道如果for循环以后，得到的元素仍是Object或者Array，那么需要再次循环，直到元素是原始类型或者函数为止。为了得到元素的类型，我们定义一个通用函数，用来返回传入对象的类型。</p>\n<pre><code>//返回传递给他的任意对象的类\nfunction isClass(o){\n    if(o===null) return &quot;Null&quot;;\n    if(o===undefined) return &quot;Undefined&quot;;\n    return Object.prototype.toString.call(o).slice(8,-1);\n}\n</code></pre><p>PS:Object.prototype.toString.call(o)能直接返回对象的类属性，形如”[object class]”的字符串，我们通过截取class，并能知道传入的对象是什么类型。</p>\n<p>当然这里有两个疑问需要解释下：<br>　　<img src=\"https://i.imgur.com/h4JnZhe.png\" alt=\"\"></p>\n<ul>\n<li><p>（1）为什么不直接用toString方法？这是为了防止对象中的toString方法被重写，为了正确的调用toString()版本，必须间接的调用Function.call()方法</p>\n</li>\n<li><p>（2）为什么不使用typeof来直接判断类型？因为对于Array而言，使用typeof（Array）返回的是object，所以不能得到正确的Array，这里对于后续的数组克隆将产生致命的问题。</p>\n</li>\n</ul>\n<p>下面就是真正的深度克隆</p>\n<pre><code>//深度克隆\nfunction deepClone(obj){\n    var result,oClass=isClass(obj);\n        //确定result的类型\n    if(oClass===&quot;Object&quot;){\n        result={};\n    }else if(oClass===&quot;Array&quot;){\n        result=[];\n    }else{\n        return obj;\n    }\n    for(key in obj){\n        var copy=obj[key];\n        if(isClass(copy)==&quot;Object&quot;){\n            result[key]=arguments.callee(copy);//递归调用\n        }else if(isClass(copy)==&quot;Array&quot;){\n            result[key]=arguments.callee(copy);\n        }else{\n            result[key]=obj[key];\n        }\n    }\n    return result;\n}\n//返回传递给他的任意对象的类\nfunction isClass(o){\n    if(o===null) return &quot;Null&quot;;\n    if(o===undefined) return &quot;Undefined&quot;;\n    return Object.prototype.toString.call(o).slice(8,-1);\n}\nvar oPerson={\n    oName:&quot;rookiebob&quot;,\n    oAge:&quot;18&quot;,\n    oAddress:{\n        province:&quot;beijing&quot;\n    },    \n    ofavorite:[\n        &quot;swimming&quot;,\n        {reading:&quot;history book&quot;}\n    ],\n    skill:function(){\n        console.log(&quot;bob is coding&quot;);\n    }\n};\n//深度克隆一个对象\nvar oNew=deepClone(oPerson);\n\noNew.ofavorite[1].reading=&quot;picture&quot;;\nconsole.log(oNew.ofavorite[1].reading);//picture\nconsole.log(oPerson.ofavorite[1].reading);//history book\n\noNew.oAddress.province=&quot;shanghai&quot;;\nconsole.log(oPerson.oAddress.province);//beijing\nconsole.log(oNew.oAddress.province);//shanghai\n</code></pre><p>从上面的代码可以看到，深度克隆的对象可以完全脱离原对象，我们对新对象的任何修改都不会反映到原对象中，这样深度克隆就实现了。</p>\n<p>　　这里要注意一点的就是：为什么deepClone这个函数中的result一定要判断类型？这里有一种情况，如果你的result直接是{}对象，我明明传进去的是一个数组，结果你复制完了以后，变成了一个对象了。</p>\n<pre><code>//深度克隆\nfunction deepClone(obj){\n    var result={},oClass=isClass(obj);\n    // if(oClass===&quot;Object&quot;){\n    //     result={};\n    // }else if(oClass===&quot;Array&quot;){\n    //     result=[];\n    // }else{\n    //     return obj;\n    // }\n    for(key in obj){\n        var copy=obj[key];\n        if(isClass(copy)==&quot;Object&quot;){\n            result[key]=arguments.callee(copy);\n        }else if(isClass(copy)==&quot;Array&quot;){\n            result[key]=arguments.callee(copy);\n        }else{\n            result[key]=obj[key];\n        }\n    }\n    return result;\n}\nfunction isClass(o){\n    if(o===null) return &quot;Null&quot;;\n    if(o===undefined) return &quot;Undefined&quot;;\n    return Object.prototype.toString.call(o).slice(8,-1);\n}\n//克隆一个数组\nvar arr=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;];\nvar oNew=deepClone(arr);\nconsole.log(oNew);//Object {0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;}\n</code></pre><h3 id=\"另外一种写法，只要递归调用”浅拷贝”就行了\"><a href=\"#另外一种写法，只要递归调用”浅拷贝”就行了\" class=\"headerlink\" title=\"另外一种写法，只要递归调用”浅拷贝”就行了\"></a>另外一种写法，只要递归调用”浅拷贝”就行了</h3><pre><code>　　function deepCopy(p, c) {\n\n　　　　var c = c || {};\n\n　　　　for (var i in p) {\n\n　　　　　　if (typeof p[i] === &apos;object&apos;) {\n\n　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : {};\n\n　　　　　　　　deepCopy(p[i], c[i]);\n\n　　　　　　} else {\n\n　　　　　　　　　c[i] = p[i];\n\n　　　　　　}\n　　　　}\n\n　　　　return c;\n　　}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、js中的对象\"><a href=\"#一、js中的对象\" class=\"headerlink\" title=\"一、js中的对象\"></a>一、js中的对象</h1><p>　　谈到对象的克隆，必定要说一下对象的概念。</p>\n<p>　　js中的数据类型分为两大类：原始类型和对象类型。</p>\n<ul>\n<li>（1）原始类型包括：数值、字符串、布尔值、null、undefined（后两个是特殊的原始值，这里不做详细的说明，我的上一篇博客有谈到过一些）</li>\n<li>（2）对象类型包括：对象即是属性的集合，当然这里又两个特殊的对象—-函数（js中的一等对象）、数组（键值的有序集合）。</li>\n</ul>\n<p>　　好了既然对象分为这两类，这两种类型在复制克隆的时候是有很大区别的。原始类型存储的是对象的实际数据，而对象类型存储的是对象的引用地址（对象的实际内容单独存放，为了减少数据开销通常存放在内存中）。</p>\n<p>ps：说到这里，大家要知道，对象的原型也是引用对象，它把原型的方法和属性放在内存当中，通过原型链的方式来指向这个内存地址。</p>\n<h1 id=\"二、克隆的概念\"><a href=\"#二、克隆的概念\" class=\"headerlink\" title=\"二、克隆的概念\"></a>二、克隆的概念</h1><p>　　浅度克隆：原始类型为值传递，对象类型仍为引用传递。</p>\n<p>　　深度克隆：所有元素或属性均完全复制，与原对象完全脱离，也就是说所有对于新对象的修改都不会反映到原对象中。</p>\n<h1 id=\"三、浅克隆的表现\"><a href=\"#三、浅克隆的表现\" class=\"headerlink\" title=\"三、浅克隆的表现\"></a>三、浅克隆的表现</h1><h2 id=\"1，原始类型\"><a href=\"#1，原始类型\" class=\"headerlink\" title=\"1，原始类型\"></a>1，原始类型</h2><p>看下面一段代码</p>\n<pre><code>//数值克隆的表现\nvar a=&quot;1&quot;;\nvar b=a;\nb=&quot;2&quot;;\nconsole.log(a);// &quot;1&quot;\nconsole.log(b);// &quot;2&quot;\n//字符串克隆的表现\nvar c=&quot;1&quot;;\nvar d=c;\nd=&quot;2&quot;;\nconsole.log(c);// &quot;1&quot;\nconsole.log(d);// &quot;2&quot;\n//字符串克隆的表现\nvar x=true;\nvar y=x;\ny=false;\nconsole.log(x);// true\nconsole.log(y);// false\n</code></pre><p>　从上面的代码大家可以看出，原始类型即使我们采用普通的克隆方式仍能得到正确的结果，原因就是原始类型存储的是对象的实际数据。</p>\n<h2 id=\"2-对象类型\"><a href=\"#2-对象类型\" class=\"headerlink\" title=\"2.对象类型\"></a>2.对象类型</h2><p>前面说过，函数式一等对象，当然也是对象类型，但是函数的克隆通过浅克隆即可实现</p>\n<pre><code>var m=function(){alert(1);};\nvar n=m;\nn=function(){alert(2);};\n\nconsole.log(m());//1\nconsole.log(n());//2\n</code></pre><p>大家能看到，我们直接通过普通赋值的方式，就实现了函数的克隆，并且不会影响之前的对象。原因就是函数的克隆会在内存单独开辟一块空间，互不影响。</p>\n<p>　　好了，说了这个特殊的”关系户“以后，我们来说说普通的”选手“。为了方便后续的代码表现，我这里定义一个复杂的对象类型oPerson。下面看一下对象类型的浅复制有什么危害：</p>\n<pre><code>var oPerson={\n    oName:&quot;rookiebob&quot;,\n    oAge:&quot;18&quot;,\n    oAddress:{\n        province:&quot;beijing&quot;\n    },    \n    ofavorite:[\n        &quot;swimming&quot;,\n        {reading:&quot;history book&quot;}\n    ],\n    skill:function(){\n        console.log(&quot;bob is coding&quot;);\n    }\n};\nfunction clone(obj){\n    var result={};\n    for(key in obj){\n        result[key]=obj[key];\n    }\n    return result;\n}\nvar oNew=clone(oPerson);\nconsole.log(oPerson.oAddress.province);//beijing\noNew.oAddress.province=&quot;shanghai&quot;;\nconsole.log(oPerson.oAddress.province);//shanghai\n</code></pre><p>　通过上面的代码，大家能看到，经过对象克隆以后，我修改oNew的地址，发现原对象oPerson也被修改了。这说明对象的克隆不够彻底，那也就是说深度克隆失败！</p>\n<h1 id=\"四、深克隆的实现\"><a href=\"#四、深克隆的实现\" class=\"headerlink\" title=\"四、深克隆的实现\"></a>四、深克隆的实现</h1><p>为了保证对象的所有属性都被复制到，我们必须知道如果for循环以后，得到的元素仍是Object或者Array，那么需要再次循环，直到元素是原始类型或者函数为止。为了得到元素的类型，我们定义一个通用函数，用来返回传入对象的类型。</p>\n<pre><code>//返回传递给他的任意对象的类\nfunction isClass(o){\n    if(o===null) return &quot;Null&quot;;\n    if(o===undefined) return &quot;Undefined&quot;;\n    return Object.prototype.toString.call(o).slice(8,-1);\n}\n</code></pre><p>PS:Object.prototype.toString.call(o)能直接返回对象的类属性，形如”[object class]”的字符串，我们通过截取class，并能知道传入的对象是什么类型。</p>\n<p>当然这里有两个疑问需要解释下：<br>　　<img src=\"https://i.imgur.com/h4JnZhe.png\" alt=\"\"></p>\n<ul>\n<li><p>（1）为什么不直接用toString方法？这是为了防止对象中的toString方法被重写，为了正确的调用toString()版本，必须间接的调用Function.call()方法</p>\n</li>\n<li><p>（2）为什么不使用typeof来直接判断类型？因为对于Array而言，使用typeof（Array）返回的是object，所以不能得到正确的Array，这里对于后续的数组克隆将产生致命的问题。</p>\n</li>\n</ul>\n<p>下面就是真正的深度克隆</p>\n<pre><code>//深度克隆\nfunction deepClone(obj){\n    var result,oClass=isClass(obj);\n        //确定result的类型\n    if(oClass===&quot;Object&quot;){\n        result={};\n    }else if(oClass===&quot;Array&quot;){\n        result=[];\n    }else{\n        return obj;\n    }\n    for(key in obj){\n        var copy=obj[key];\n        if(isClass(copy)==&quot;Object&quot;){\n            result[key]=arguments.callee(copy);//递归调用\n        }else if(isClass(copy)==&quot;Array&quot;){\n            result[key]=arguments.callee(copy);\n        }else{\n            result[key]=obj[key];\n        }\n    }\n    return result;\n}\n//返回传递给他的任意对象的类\nfunction isClass(o){\n    if(o===null) return &quot;Null&quot;;\n    if(o===undefined) return &quot;Undefined&quot;;\n    return Object.prototype.toString.call(o).slice(8,-1);\n}\nvar oPerson={\n    oName:&quot;rookiebob&quot;,\n    oAge:&quot;18&quot;,\n    oAddress:{\n        province:&quot;beijing&quot;\n    },    \n    ofavorite:[\n        &quot;swimming&quot;,\n        {reading:&quot;history book&quot;}\n    ],\n    skill:function(){\n        console.log(&quot;bob is coding&quot;);\n    }\n};\n//深度克隆一个对象\nvar oNew=deepClone(oPerson);\n\noNew.ofavorite[1].reading=&quot;picture&quot;;\nconsole.log(oNew.ofavorite[1].reading);//picture\nconsole.log(oPerson.ofavorite[1].reading);//history book\n\noNew.oAddress.province=&quot;shanghai&quot;;\nconsole.log(oPerson.oAddress.province);//beijing\nconsole.log(oNew.oAddress.province);//shanghai\n</code></pre><p>从上面的代码可以看到，深度克隆的对象可以完全脱离原对象，我们对新对象的任何修改都不会反映到原对象中，这样深度克隆就实现了。</p>\n<p>　　这里要注意一点的就是：为什么deepClone这个函数中的result一定要判断类型？这里有一种情况，如果你的result直接是{}对象，我明明传进去的是一个数组，结果你复制完了以后，变成了一个对象了。</p>\n<pre><code>//深度克隆\nfunction deepClone(obj){\n    var result={},oClass=isClass(obj);\n    // if(oClass===&quot;Object&quot;){\n    //     result={};\n    // }else if(oClass===&quot;Array&quot;){\n    //     result=[];\n    // }else{\n    //     return obj;\n    // }\n    for(key in obj){\n        var copy=obj[key];\n        if(isClass(copy)==&quot;Object&quot;){\n            result[key]=arguments.callee(copy);\n        }else if(isClass(copy)==&quot;Array&quot;){\n            result[key]=arguments.callee(copy);\n        }else{\n            result[key]=obj[key];\n        }\n    }\n    return result;\n}\nfunction isClass(o){\n    if(o===null) return &quot;Null&quot;;\n    if(o===undefined) return &quot;Undefined&quot;;\n    return Object.prototype.toString.call(o).slice(8,-1);\n}\n//克隆一个数组\nvar arr=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;];\nvar oNew=deepClone(arr);\nconsole.log(oNew);//Object {0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;}\n</code></pre><h3 id=\"另外一种写法，只要递归调用”浅拷贝”就行了\"><a href=\"#另外一种写法，只要递归调用”浅拷贝”就行了\" class=\"headerlink\" title=\"另外一种写法，只要递归调用”浅拷贝”就行了\"></a>另外一种写法，只要递归调用”浅拷贝”就行了</h3><pre><code>　　function deepCopy(p, c) {\n\n　　　　var c = c || {};\n\n　　　　for (var i in p) {\n\n　　　　　　if (typeof p[i] === &apos;object&apos;) {\n\n　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : {};\n\n　　　　　　　　deepCopy(p[i], c[i]);\n\n　　　　　　} else {\n\n　　　　　　　　　c[i] = p[i];\n\n　　　　　　}\n　　　　}\n\n　　　　return c;\n　　}\n</code></pre>"},{"title":"jquery file upload","date":"2018-07-03T03:41:40.000Z","description":"jquery文件上传demo","_content":"\n## 单控件文件上传DEMO \n\n js根据ID java根据name\n\n\n\t<input type=\"file\" name=\"editMyimg\" id=\"editMyimg\">\n\n\tjs:\n\n\t$.ajaxFileUpload({\n\t\turl: '${home}/party/admin/article.json',\n\t\tdataType: 'json',\n\t\tsecureuri: false,\n\t\tdata: {\n\t\taction: \"updateData\",\n\t\ttitle: title,\n\t\tbriefInfo: briefInfo,\n\t\tid: id\n\t\t},\n\t\tfileElementId: 'editMyimg',\n\t\tsuccess: function () {\n\t\tbackcall()\n\t\t    }\n\t});\n\n\tjava (springMVC) :\n\n\t@RequestMapping\n\tpublic ActionResult updateData(PartyArticleQuery partyArticleQuery, @RequestParam(\"editMyimg\") MultipartFile file) {\n\t    ActionResult actionResult = ActionResult.ok();\n\t\n\t    String img = \"\";\n\tif (!file.isEmpty()) {\n\tif (!StrUtils.empty(file.getOriginalFilename())) {\n\t            File toFile = null;\n\ttry {\n\t                                   toFile = PathUtils.getUpload(PathUtils.PATH_PARTY_ARTICLE, file.getOriginalFilename(), StrUtils.getUUID());\n\t                file.transferTo(toFile);\n\t            } catch (IOException e) {\n\t                PathUtils.delFile(toFile);\n\treturn ActionResult.error(\"图片上传失败\");\n\t            }\n\t            img = PathUtils.getUploadPath(toFile);\n\t            partyArticleQuery.setImg(img);\n\t        }\n\t    }\n\t    Integer integer = partyArticleService.updateData(partyArticleQuery);\n\treturn actionResult;\n\t}","source":"_posts/jquery-file-upload.md","raw":"---\ntitle: jquery file upload\ndate: 2018-07-03 11:41:40\ntags: [jquery, java]\ncategories: 前端\ndescription: 'jquery文件上传demo'\n\n---\n\n## 单控件文件上传DEMO \n\n js根据ID java根据name\n\n\n\t<input type=\"file\" name=\"editMyimg\" id=\"editMyimg\">\n\n\tjs:\n\n\t$.ajaxFileUpload({\n\t\turl: '${home}/party/admin/article.json',\n\t\tdataType: 'json',\n\t\tsecureuri: false,\n\t\tdata: {\n\t\taction: \"updateData\",\n\t\ttitle: title,\n\t\tbriefInfo: briefInfo,\n\t\tid: id\n\t\t},\n\t\tfileElementId: 'editMyimg',\n\t\tsuccess: function () {\n\t\tbackcall()\n\t\t    }\n\t});\n\n\tjava (springMVC) :\n\n\t@RequestMapping\n\tpublic ActionResult updateData(PartyArticleQuery partyArticleQuery, @RequestParam(\"editMyimg\") MultipartFile file) {\n\t    ActionResult actionResult = ActionResult.ok();\n\t\n\t    String img = \"\";\n\tif (!file.isEmpty()) {\n\tif (!StrUtils.empty(file.getOriginalFilename())) {\n\t            File toFile = null;\n\ttry {\n\t                                   toFile = PathUtils.getUpload(PathUtils.PATH_PARTY_ARTICLE, file.getOriginalFilename(), StrUtils.getUUID());\n\t                file.transferTo(toFile);\n\t            } catch (IOException e) {\n\t                PathUtils.delFile(toFile);\n\treturn ActionResult.error(\"图片上传失败\");\n\t            }\n\t            img = PathUtils.getUploadPath(toFile);\n\t            partyArticleQuery.setImg(img);\n\t        }\n\t    }\n\t    Integer integer = partyArticleService.updateData(partyArticleQuery);\n\treturn actionResult;\n\t}","slug":"jquery-file-upload","published":1,"updated":"2018-12-17T13:37:49.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0icl000v1wu0czpdl6sd","content":"<h2 id=\"单控件文件上传DEMO\"><a href=\"#单控件文件上传DEMO\" class=\"headerlink\" title=\"单控件文件上传DEMO\"></a>单控件文件上传DEMO</h2><p> js根据ID java根据name</p>\n<pre><code>&lt;input type=&quot;file&quot; name=&quot;editMyimg&quot; id=&quot;editMyimg&quot;&gt;\n\njs:\n\n$.ajaxFileUpload({\n    url: &apos;${home}/party/admin/article.json&apos;,\n    dataType: &apos;json&apos;,\n    secureuri: false,\n    data: {\n    action: &quot;updateData&quot;,\n    title: title,\n    briefInfo: briefInfo,\n    id: id\n    },\n    fileElementId: &apos;editMyimg&apos;,\n    success: function () {\n    backcall()\n        }\n});\n\njava (springMVC) :\n\n@RequestMapping\npublic ActionResult updateData(PartyArticleQuery partyArticleQuery, @RequestParam(&quot;editMyimg&quot;) MultipartFile file) {\n    ActionResult actionResult = ActionResult.ok();\n\n    String img = &quot;&quot;;\nif (!file.isEmpty()) {\nif (!StrUtils.empty(file.getOriginalFilename())) {\n            File toFile = null;\ntry {\n                                   toFile = PathUtils.getUpload(PathUtils.PATH_PARTY_ARTICLE, file.getOriginalFilename(), StrUtils.getUUID());\n                file.transferTo(toFile);\n            } catch (IOException e) {\n                PathUtils.delFile(toFile);\nreturn ActionResult.error(&quot;图片上传失败&quot;);\n            }\n            img = PathUtils.getUploadPath(toFile);\n            partyArticleQuery.setImg(img);\n        }\n    }\n    Integer integer = partyArticleService.updateData(partyArticleQuery);\nreturn actionResult;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单控件文件上传DEMO\"><a href=\"#单控件文件上传DEMO\" class=\"headerlink\" title=\"单控件文件上传DEMO\"></a>单控件文件上传DEMO</h2><p> js根据ID java根据name</p>\n<pre><code>&lt;input type=&quot;file&quot; name=&quot;editMyimg&quot; id=&quot;editMyimg&quot;&gt;\n\njs:\n\n$.ajaxFileUpload({\n    url: &apos;${home}/party/admin/article.json&apos;,\n    dataType: &apos;json&apos;,\n    secureuri: false,\n    data: {\n    action: &quot;updateData&quot;,\n    title: title,\n    briefInfo: briefInfo,\n    id: id\n    },\n    fileElementId: &apos;editMyimg&apos;,\n    success: function () {\n    backcall()\n        }\n});\n\njava (springMVC) :\n\n@RequestMapping\npublic ActionResult updateData(PartyArticleQuery partyArticleQuery, @RequestParam(&quot;editMyimg&quot;) MultipartFile file) {\n    ActionResult actionResult = ActionResult.ok();\n\n    String img = &quot;&quot;;\nif (!file.isEmpty()) {\nif (!StrUtils.empty(file.getOriginalFilename())) {\n            File toFile = null;\ntry {\n                                   toFile = PathUtils.getUpload(PathUtils.PATH_PARTY_ARTICLE, file.getOriginalFilename(), StrUtils.getUUID());\n                file.transferTo(toFile);\n            } catch (IOException e) {\n                PathUtils.delFile(toFile);\nreturn ActionResult.error(&quot;图片上传失败&quot;);\n            }\n            img = PathUtils.getUploadPath(toFile);\n            partyArticleQuery.setImg(img);\n        }\n    }\n    Integer integer = partyArticleService.updateData(partyArticleQuery);\nreturn actionResult;\n}\n</code></pre>"},{"title":"jstl","date":"2017-04-26T05:46:12.000Z","description":"","_content":"\n### 变量存储\n\t<fmt:formatNumber var=\"colNumb\" value=\"${12/fn:length(depts)}\">\n\t</fmt:formatNumber>\n\n\t<div id=\"sliderProgressBar\" class=\"mui-slider-progress-bar mui-col-xs-\t${colNumb}\">\n\t</div>\n","source":"_posts/jstl.md","raw":"---\ntitle: jstl\ndate: 2017-04-26 13:46:12\ntags: [jstl, 耶鲁表达式]\ncategories: [后端]\ndescription: ''\n\n---\n\n### 变量存储\n\t<fmt:formatNumber var=\"colNumb\" value=\"${12/fn:length(depts)}\">\n\t</fmt:formatNumber>\n\n\t<div id=\"sliderProgressBar\" class=\"mui-slider-progress-bar mui-col-xs-\t${colNumb}\">\n\t</div>\n","slug":"jstl","published":1,"updated":"2018-12-04T14:55:48.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ico000z1wu0jtno2rsu","content":"<h3 id=\"变量存储\"><a href=\"#变量存储\" class=\"headerlink\" title=\"变量存储\"></a>变量存储</h3><pre><code>&lt;fmt:formatNumber var=&quot;colNumb&quot; value=&quot;${12/fn:length(depts)}&quot;&gt;\n&lt;/fmt:formatNumber&gt;\n\n&lt;div id=&quot;sliderProgressBar&quot; class=&quot;mui-slider-progress-bar mui-col-xs-    ${colNumb}&quot;&gt;\n&lt;/div&gt;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"变量存储\"><a href=\"#变量存储\" class=\"headerlink\" title=\"变量存储\"></a>变量存储</h3><pre><code>&lt;fmt:formatNumber var=&quot;colNumb&quot; value=&quot;${12/fn:length(depts)}&quot;&gt;\n&lt;/fmt:formatNumber&gt;\n\n&lt;div id=&quot;sliderProgressBar&quot; class=&quot;mui-slider-progress-bar mui-col-xs-    ${colNumb}&quot;&gt;\n&lt;/div&gt;\n</code></pre>"},{"title":"js高级程序设计笔记","date":"2018-06-20T13:46:09.000Z","description":"js高级程序设计笔记","_content":"\n# js高级程序设计笔记\n## 一，基本类型和引用类型的值\n- ECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是\n简单的数据段，而引用类型值指那些可能由多个值构成的对象。\n- 在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。第 3 章讨论了 5 种\n基本数据类型：\n - Undefined\n - Null\n - Boolean\n - Number\n - String\n \n这 5 种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。\n引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置，\n也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。\n为此，引用类型的值是按引用访问的\n\n- 在 ECMAScript 中，引用类型是一种数据结构，\n用于将数据和功能组织在一起。它也常被称为类，但这种称呼并不妥当。尽管 ECMAScript\n从技术上讲是一门面向对象的语言，但它不具备传统的面向对象语言所支持的类和接口等基本结构。引\n用类型有时候也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。\n\n- 引用类型\n - Object 类型\n - Array 类型\n - Function 类型\n - Date 类型\n - RegExp 类型\n\n## 二，call apply this blind的应用\n\n### 1, 示例1\n\tfunction sum (num1, num2) {\n\t\treturn num1 + num2;\n\t}\n\t\n\talert(sum.apply(this, [1, 2])); \t\t\t//3\n\talert(sum.call(this, 1, 2)); \t\t\t\t//3\n\n### 2， 示例2\n\n\twindow.name = 'test1';\n\tvar obj = new Object();\n\tobj.name = 'test2';\n\t\n\tfuunction getName() {\n\t\talert(this.name);\n\t}\n\t\n\tgetName();\t\t\t\t\t\t\t\t\t//test1\n\tgetName.apply(this);\t\t\t\t\t\t//test1\n\tgetName.apply(window);\t\t\t\t\t\t//test1\n\tgetName.apply(obj);\t\t\t\t\t\t\t//test2\n\tgetName.call(obj);\t\t\t\t\t\t\t//test2\n\tgetName.blind(obj);\t\t\t\t\t\t\t//test2\n\n## 三，创建对象\n\n### 1，工厂模式\n\n- 传入属性值到函数中新创建一个对象，封装好新对象属性再返回对象\n- 缺点：工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）\n\n### 2，构造函数模式\n\n- 传入属性值到函数中，封装给this，没有return，调用的时候直接var a =  new A('test');\n- 缺点：创建多个完成同样任务的 Function 实例的确没有必要；但是函数转移到了构造函数外部就丝毫没有封装性可言了\n\n### 3，原型模式\n\n- 将要封装的信息直接添加到原型对象中，让所有对象实例共享它所包含的属性和方法\n- 缺点：引用类型值（如数组）的属性来说，引用类型值的属性值存在于prototype中而非实例中，所有实例的对这个引用类型的属性值都是同一个引用，一旦修改会影响所有实例\n\n\n### 4， 组合使用构造函数模式和原型模式\n\n- 构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。这是创建自定义类型的最常见方式\n\t\n## 四，继承\n#### 其实现继承主要是依靠 原型链 来实现的\n\tfunction SuperTest() {\n\t\tthis.name = 'superTest';\n\t}\n\t\n\tSuperTest.prototype.getSuperTestName = function () {\n\t\treturn this.name;\n\t}\n\t\n\tfunction Test () {\n\t\tthis.name = 'test';\n\t}\n\t\n\t//继承了SuperTest\n\tTest.prototype = new SuperTest();\n\t\n\t\n\tTest.prototype.getTestName = function () {\n\t\treturn this.name;\n\t}\n\t\n\tvar superTest = new SuperTest();\n\tvar test = new Test();\n\t\n\talert(superTest.getSuperTestName());\t\t\t//superTest\n\talert(test.getTestName());\t\t\t\t\t\t//test\n\talert(test.getSuperTestName());\t\t\t\t\t//superTest\n\n## 五，闭包\n### 有权访问另一个函数作用域内变量的函数都是闭包。\n### 闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！\n\n\tfunction a(){\n\t  var n = 0;\n\t  function inc() {\n\t\tn++;\n\t\tconsole.log(n);\n\t  }\n\t  inc(); \n\t  inc(); \n\t}\n\ta(); //控制台输出1，再输出2\n\t\n\t匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window\n\tvar name = \"The Window\";\n\tvar object = {\n\t name : \"My Object\",\n\t getNameFunc : function(){\n\t\t return function(){\n\t\t\treturn this.name;\n\t\t };\n\t }\n\t};\n\talert(object.getNameFunc()()); //\"The Window\"（在非严格模式下）\n\t\n\t改良\n\tvar name = \"The Window\";\n\tvar object = {\n\t name : \"My Object\",\n\t getNameFunc : function(){\n\t\tvar that = this; \n\t\t return function(){\n\t\t\treturn that.name;\n\t\t };\n\t }\n\t};\n\talert(object.getNameFunc()()); //\"My Object\"\n\n## 六，vue双向绑定的实现原理\n### Vue.js 最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。\n\n### 访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过 defineProperty() 方法单独定义。\n\n       var obj = { };\n\n       // 为obj定义一个名为 hello 的访问器属性\n\n       Object.defineProperty(obj, \"hello\", {\n\n         get: function () {return sth},\n\n         set: function (val) {/* do sth */}\n\n       })\n\n       obj.hello // 可以像普通属性一样读取访问器属性，访问器属性的\"值\"比较特殊，读取或设置访问器属性的值，实际上是调用其内部特性：get和set函数。\n\n       obj.hello // 读取属性，就是调用get函数并返回get函数的返回值\n\n       obj.hello = \"abc\" // 为属性赋值，就是调用set函数，赋值其实是传参 ","source":"_posts/js高级程序设计.md","raw":"---\ntitle: js高级程序设计笔记\ndate: 2018-06-20 21:46:09\ntags: [js, 继承, 闭包, vue双向绑定原理]\ncategories: '前端'\ndescription: 'js高级程序设计笔记'\n\n---\n\n# js高级程序设计笔记\n## 一，基本类型和引用类型的值\n- ECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是\n简单的数据段，而引用类型值指那些可能由多个值构成的对象。\n- 在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。第 3 章讨论了 5 种\n基本数据类型：\n - Undefined\n - Null\n - Boolean\n - Number\n - String\n \n这 5 种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。\n引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置，\n也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。\n为此，引用类型的值是按引用访问的\n\n- 在 ECMAScript 中，引用类型是一种数据结构，\n用于将数据和功能组织在一起。它也常被称为类，但这种称呼并不妥当。尽管 ECMAScript\n从技术上讲是一门面向对象的语言，但它不具备传统的面向对象语言所支持的类和接口等基本结构。引\n用类型有时候也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。\n\n- 引用类型\n - Object 类型\n - Array 类型\n - Function 类型\n - Date 类型\n - RegExp 类型\n\n## 二，call apply this blind的应用\n\n### 1, 示例1\n\tfunction sum (num1, num2) {\n\t\treturn num1 + num2;\n\t}\n\t\n\talert(sum.apply(this, [1, 2])); \t\t\t//3\n\talert(sum.call(this, 1, 2)); \t\t\t\t//3\n\n### 2， 示例2\n\n\twindow.name = 'test1';\n\tvar obj = new Object();\n\tobj.name = 'test2';\n\t\n\tfuunction getName() {\n\t\talert(this.name);\n\t}\n\t\n\tgetName();\t\t\t\t\t\t\t\t\t//test1\n\tgetName.apply(this);\t\t\t\t\t\t//test1\n\tgetName.apply(window);\t\t\t\t\t\t//test1\n\tgetName.apply(obj);\t\t\t\t\t\t\t//test2\n\tgetName.call(obj);\t\t\t\t\t\t\t//test2\n\tgetName.blind(obj);\t\t\t\t\t\t\t//test2\n\n## 三，创建对象\n\n### 1，工厂模式\n\n- 传入属性值到函数中新创建一个对象，封装好新对象属性再返回对象\n- 缺点：工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）\n\n### 2，构造函数模式\n\n- 传入属性值到函数中，封装给this，没有return，调用的时候直接var a =  new A('test');\n- 缺点：创建多个完成同样任务的 Function 实例的确没有必要；但是函数转移到了构造函数外部就丝毫没有封装性可言了\n\n### 3，原型模式\n\n- 将要封装的信息直接添加到原型对象中，让所有对象实例共享它所包含的属性和方法\n- 缺点：引用类型值（如数组）的属性来说，引用类型值的属性值存在于prototype中而非实例中，所有实例的对这个引用类型的属性值都是同一个引用，一旦修改会影响所有实例\n\n\n### 4， 组合使用构造函数模式和原型模式\n\n- 构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。这是创建自定义类型的最常见方式\n\t\n## 四，继承\n#### 其实现继承主要是依靠 原型链 来实现的\n\tfunction SuperTest() {\n\t\tthis.name = 'superTest';\n\t}\n\t\n\tSuperTest.prototype.getSuperTestName = function () {\n\t\treturn this.name;\n\t}\n\t\n\tfunction Test () {\n\t\tthis.name = 'test';\n\t}\n\t\n\t//继承了SuperTest\n\tTest.prototype = new SuperTest();\n\t\n\t\n\tTest.prototype.getTestName = function () {\n\t\treturn this.name;\n\t}\n\t\n\tvar superTest = new SuperTest();\n\tvar test = new Test();\n\t\n\talert(superTest.getSuperTestName());\t\t\t//superTest\n\talert(test.getTestName());\t\t\t\t\t\t//test\n\talert(test.getSuperTestName());\t\t\t\t\t//superTest\n\n## 五，闭包\n### 有权访问另一个函数作用域内变量的函数都是闭包。\n### 闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！\n\n\tfunction a(){\n\t  var n = 0;\n\t  function inc() {\n\t\tn++;\n\t\tconsole.log(n);\n\t  }\n\t  inc(); \n\t  inc(); \n\t}\n\ta(); //控制台输出1，再输出2\n\t\n\t匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window\n\tvar name = \"The Window\";\n\tvar object = {\n\t name : \"My Object\",\n\t getNameFunc : function(){\n\t\t return function(){\n\t\t\treturn this.name;\n\t\t };\n\t }\n\t};\n\talert(object.getNameFunc()()); //\"The Window\"（在非严格模式下）\n\t\n\t改良\n\tvar name = \"The Window\";\n\tvar object = {\n\t name : \"My Object\",\n\t getNameFunc : function(){\n\t\tvar that = this; \n\t\t return function(){\n\t\t\treturn that.name;\n\t\t };\n\t }\n\t};\n\talert(object.getNameFunc()()); //\"My Object\"\n\n## 六，vue双向绑定的实现原理\n### Vue.js 最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。\n\n### 访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过 defineProperty() 方法单独定义。\n\n       var obj = { };\n\n       // 为obj定义一个名为 hello 的访问器属性\n\n       Object.defineProperty(obj, \"hello\", {\n\n         get: function () {return sth},\n\n         set: function (val) {/* do sth */}\n\n       })\n\n       obj.hello // 可以像普通属性一样读取访问器属性，访问器属性的\"值\"比较特殊，读取或设置访问器属性的值，实际上是调用其内部特性：get和set函数。\n\n       obj.hello // 读取属性，就是调用get函数并返回get函数的返回值\n\n       obj.hello = \"abc\" // 为属性赋值，就是调用set函数，赋值其实是传参 ","slug":"js高级程序设计","published":1,"updated":"2018-12-17T13:37:49.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0icr00121wu0fhbtpuaa","content":"<h1 id=\"js高级程序设计笔记\"><a href=\"#js高级程序设计笔记\" class=\"headerlink\" title=\"js高级程序设计笔记\"></a>js高级程序设计笔记</h1><h2 id=\"一，基本类型和引用类型的值\"><a href=\"#一，基本类型和引用类型的值\" class=\"headerlink\" title=\"一，基本类型和引用类型的值\"></a>一，基本类型和引用类型的值</h2><ul>\n<li>ECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是<br>简单的数据段，而引用类型值指那些可能由多个值构成的对象。</li>\n<li>在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。第 3 章讨论了 5 种<br>基本数据类型：<ul>\n<li>Undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ul>\n</li>\n</ul>\n<p>这 5 种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。<br>引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置，<br>也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。<br>为此，引用类型的值是按引用访问的</p>\n<ul>\n<li><p>在 ECMAScript 中，引用类型是一种数据结构，<br>用于将数据和功能组织在一起。它也常被称为类，但这种称呼并不妥当。尽管 ECMAScript<br>从技术上讲是一门面向对象的语言，但它不具备传统的面向对象语言所支持的类和接口等基本结构。引<br>用类型有时候也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。</p>\n</li>\n<li><p>引用类型</p>\n<ul>\n<li>Object 类型</li>\n<li>Array 类型</li>\n<li>Function 类型</li>\n<li>Date 类型</li>\n<li>RegExp 类型</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二，call-apply-this-blind的应用\"><a href=\"#二，call-apply-this-blind的应用\" class=\"headerlink\" title=\"二，call apply this blind的应用\"></a>二，call apply this blind的应用</h2><h3 id=\"1-示例1\"><a href=\"#1-示例1\" class=\"headerlink\" title=\"1, 示例1\"></a>1, 示例1</h3><pre><code>function sum (num1, num2) {\n    return num1 + num2;\n}\n\nalert(sum.apply(this, [1, 2]));             //3\nalert(sum.call(this, 1, 2));                 //3\n</code></pre><h3 id=\"2，-示例2\"><a href=\"#2，-示例2\" class=\"headerlink\" title=\"2， 示例2\"></a>2， 示例2</h3><pre><code>window.name = &apos;test1&apos;;\nvar obj = new Object();\nobj.name = &apos;test2&apos;;\n\nfuunction getName() {\n    alert(this.name);\n}\n\ngetName();                                    //test1\ngetName.apply(this);                        //test1\ngetName.apply(window);                        //test1\ngetName.apply(obj);                            //test2\ngetName.call(obj);                            //test2\ngetName.blind(obj);                            //test2\n</code></pre><h2 id=\"三，创建对象\"><a href=\"#三，创建对象\" class=\"headerlink\" title=\"三，创建对象\"></a>三，创建对象</h2><h3 id=\"1，工厂模式\"><a href=\"#1，工厂模式\" class=\"headerlink\" title=\"1，工厂模式\"></a>1，工厂模式</h3><ul>\n<li>传入属性值到函数中新创建一个对象，封装好新对象属性再返回对象</li>\n<li>缺点：工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）</li>\n</ul>\n<h3 id=\"2，构造函数模式\"><a href=\"#2，构造函数模式\" class=\"headerlink\" title=\"2，构造函数模式\"></a>2，构造函数模式</h3><ul>\n<li>传入属性值到函数中，封装给this，没有return，调用的时候直接var a =  new A(‘test’);</li>\n<li>缺点：创建多个完成同样任务的 Function 实例的确没有必要；但是函数转移到了构造函数外部就丝毫没有封装性可言了</li>\n</ul>\n<h3 id=\"3，原型模式\"><a href=\"#3，原型模式\" class=\"headerlink\" title=\"3，原型模式\"></a>3，原型模式</h3><ul>\n<li>将要封装的信息直接添加到原型对象中，让所有对象实例共享它所包含的属性和方法</li>\n<li>缺点：引用类型值（如数组）的属性来说，引用类型值的属性值存在于prototype中而非实例中，所有实例的对这个引用类型的属性值都是同一个引用，一旦修改会影响所有实例</li>\n</ul>\n<h3 id=\"4，-组合使用构造函数模式和原型模式\"><a href=\"#4，-组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"4， 组合使用构造函数模式和原型模式\"></a>4， 组合使用构造函数模式和原型模式</h3><ul>\n<li>构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。这是创建自定义类型的最常见方式</li>\n</ul>\n<h2 id=\"四，继承\"><a href=\"#四，继承\" class=\"headerlink\" title=\"四，继承\"></a>四，继承</h2><h4 id=\"其实现继承主要是依靠-原型链-来实现的\"><a href=\"#其实现继承主要是依靠-原型链-来实现的\" class=\"headerlink\" title=\"其实现继承主要是依靠 原型链 来实现的\"></a>其实现继承主要是依靠 原型链 来实现的</h4><pre><code>function SuperTest() {\n    this.name = &apos;superTest&apos;;\n}\n\nSuperTest.prototype.getSuperTestName = function () {\n    return this.name;\n}\n\nfunction Test () {\n    this.name = &apos;test&apos;;\n}\n\n//继承了SuperTest\nTest.prototype = new SuperTest();\n\n\nTest.prototype.getTestName = function () {\n    return this.name;\n}\n\nvar superTest = new SuperTest();\nvar test = new Test();\n\nalert(superTest.getSuperTestName());            //superTest\nalert(test.getTestName());                        //test\nalert(test.getSuperTestName());                    //superTest\n</code></pre><h2 id=\"五，闭包\"><a href=\"#五，闭包\" class=\"headerlink\" title=\"五，闭包\"></a>五，闭包</h2><h3 id=\"有权访问另一个函数作用域内变量的函数都是闭包。\"><a href=\"#有权访问另一个函数作用域内变量的函数都是闭包。\" class=\"headerlink\" title=\"有权访问另一个函数作用域内变量的函数都是闭包。\"></a>有权访问另一个函数作用域内变量的函数都是闭包。</h3><h3 id=\"闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！\"><a href=\"#闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！\" class=\"headerlink\" title=\"闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！\"></a>闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！</h3><pre><code>function a(){\n  var n = 0;\n  function inc() {\n    n++;\n    console.log(n);\n  }\n  inc(); \n  inc(); \n}\na(); //控制台输出1，再输出2\n\n匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window\nvar name = &quot;The Window&quot;;\nvar object = {\n name : &quot;My Object&quot;,\n getNameFunc : function(){\n     return function(){\n        return this.name;\n     };\n }\n};\nalert(object.getNameFunc()()); //&quot;The Window&quot;（在非严格模式下）\n\n改良\nvar name = &quot;The Window&quot;;\nvar object = {\n name : &quot;My Object&quot;,\n getNameFunc : function(){\n    var that = this; \n     return function(){\n        return that.name;\n     };\n }\n};\nalert(object.getNameFunc()()); //&quot;My Object&quot;\n</code></pre><h2 id=\"六，vue双向绑定的实现原理\"><a href=\"#六，vue双向绑定的实现原理\" class=\"headerlink\" title=\"六，vue双向绑定的实现原理\"></a>六，vue双向绑定的实现原理</h2><h3 id=\"Vue-js-最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。\"><a href=\"#Vue-js-最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。\" class=\"headerlink\" title=\"Vue.js 最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。\"></a>Vue.js 最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。</h3><h3 id=\"访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过-defineProperty-方法单独定义。\"><a href=\"#访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过-defineProperty-方法单独定义。\" class=\"headerlink\" title=\"访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过 defineProperty() 方法单独定义。\"></a>访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过 defineProperty() 方法单独定义。</h3><pre><code>var obj = { };\n\n// 为obj定义一个名为 hello 的访问器属性\n\nObject.defineProperty(obj, &quot;hello&quot;, {\n\n  get: function () {return sth},\n\n  set: function (val) {/* do sth */}\n\n})\n\nobj.hello // 可以像普通属性一样读取访问器属性，访问器属性的&quot;值&quot;比较特殊，读取或设置访问器属性的值，实际上是调用其内部特性：get和set函数。\n\nobj.hello // 读取属性，就是调用get函数并返回get函数的返回值\n\nobj.hello = &quot;abc&quot; // 为属性赋值，就是调用set函数，赋值其实是传参 \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"js高级程序设计笔记\"><a href=\"#js高级程序设计笔记\" class=\"headerlink\" title=\"js高级程序设计笔记\"></a>js高级程序设计笔记</h1><h2 id=\"一，基本类型和引用类型的值\"><a href=\"#一，基本类型和引用类型的值\" class=\"headerlink\" title=\"一，基本类型和引用类型的值\"></a>一，基本类型和引用类型的值</h2><ul>\n<li>ECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是<br>简单的数据段，而引用类型值指那些可能由多个值构成的对象。</li>\n<li>在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。第 3 章讨论了 5 种<br>基本数据类型：<ul>\n<li>Undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ul>\n</li>\n</ul>\n<p>这 5 种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。<br>引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置，<br>也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。<br>为此，引用类型的值是按引用访问的</p>\n<ul>\n<li><p>在 ECMAScript 中，引用类型是一种数据结构，<br>用于将数据和功能组织在一起。它也常被称为类，但这种称呼并不妥当。尽管 ECMAScript<br>从技术上讲是一门面向对象的语言，但它不具备传统的面向对象语言所支持的类和接口等基本结构。引<br>用类型有时候也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。</p>\n</li>\n<li><p>引用类型</p>\n<ul>\n<li>Object 类型</li>\n<li>Array 类型</li>\n<li>Function 类型</li>\n<li>Date 类型</li>\n<li>RegExp 类型</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二，call-apply-this-blind的应用\"><a href=\"#二，call-apply-this-blind的应用\" class=\"headerlink\" title=\"二，call apply this blind的应用\"></a>二，call apply this blind的应用</h2><h3 id=\"1-示例1\"><a href=\"#1-示例1\" class=\"headerlink\" title=\"1, 示例1\"></a>1, 示例1</h3><pre><code>function sum (num1, num2) {\n    return num1 + num2;\n}\n\nalert(sum.apply(this, [1, 2]));             //3\nalert(sum.call(this, 1, 2));                 //3\n</code></pre><h3 id=\"2，-示例2\"><a href=\"#2，-示例2\" class=\"headerlink\" title=\"2， 示例2\"></a>2， 示例2</h3><pre><code>window.name = &apos;test1&apos;;\nvar obj = new Object();\nobj.name = &apos;test2&apos;;\n\nfuunction getName() {\n    alert(this.name);\n}\n\ngetName();                                    //test1\ngetName.apply(this);                        //test1\ngetName.apply(window);                        //test1\ngetName.apply(obj);                            //test2\ngetName.call(obj);                            //test2\ngetName.blind(obj);                            //test2\n</code></pre><h2 id=\"三，创建对象\"><a href=\"#三，创建对象\" class=\"headerlink\" title=\"三，创建对象\"></a>三，创建对象</h2><h3 id=\"1，工厂模式\"><a href=\"#1，工厂模式\" class=\"headerlink\" title=\"1，工厂模式\"></a>1，工厂模式</h3><ul>\n<li>传入属性值到函数中新创建一个对象，封装好新对象属性再返回对象</li>\n<li>缺点：工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）</li>\n</ul>\n<h3 id=\"2，构造函数模式\"><a href=\"#2，构造函数模式\" class=\"headerlink\" title=\"2，构造函数模式\"></a>2，构造函数模式</h3><ul>\n<li>传入属性值到函数中，封装给this，没有return，调用的时候直接var a =  new A(‘test’);</li>\n<li>缺点：创建多个完成同样任务的 Function 实例的确没有必要；但是函数转移到了构造函数外部就丝毫没有封装性可言了</li>\n</ul>\n<h3 id=\"3，原型模式\"><a href=\"#3，原型模式\" class=\"headerlink\" title=\"3，原型模式\"></a>3，原型模式</h3><ul>\n<li>将要封装的信息直接添加到原型对象中，让所有对象实例共享它所包含的属性和方法</li>\n<li>缺点：引用类型值（如数组）的属性来说，引用类型值的属性值存在于prototype中而非实例中，所有实例的对这个引用类型的属性值都是同一个引用，一旦修改会影响所有实例</li>\n</ul>\n<h3 id=\"4，-组合使用构造函数模式和原型模式\"><a href=\"#4，-组合使用构造函数模式和原型模式\" class=\"headerlink\" title=\"4， 组合使用构造函数模式和原型模式\"></a>4， 组合使用构造函数模式和原型模式</h3><ul>\n<li>构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。这是创建自定义类型的最常见方式</li>\n</ul>\n<h2 id=\"四，继承\"><a href=\"#四，继承\" class=\"headerlink\" title=\"四，继承\"></a>四，继承</h2><h4 id=\"其实现继承主要是依靠-原型链-来实现的\"><a href=\"#其实现继承主要是依靠-原型链-来实现的\" class=\"headerlink\" title=\"其实现继承主要是依靠 原型链 来实现的\"></a>其实现继承主要是依靠 原型链 来实现的</h4><pre><code>function SuperTest() {\n    this.name = &apos;superTest&apos;;\n}\n\nSuperTest.prototype.getSuperTestName = function () {\n    return this.name;\n}\n\nfunction Test () {\n    this.name = &apos;test&apos;;\n}\n\n//继承了SuperTest\nTest.prototype = new SuperTest();\n\n\nTest.prototype.getTestName = function () {\n    return this.name;\n}\n\nvar superTest = new SuperTest();\nvar test = new Test();\n\nalert(superTest.getSuperTestName());            //superTest\nalert(test.getTestName());                        //test\nalert(test.getSuperTestName());                    //superTest\n</code></pre><h2 id=\"五，闭包\"><a href=\"#五，闭包\" class=\"headerlink\" title=\"五，闭包\"></a>五，闭包</h2><h3 id=\"有权访问另一个函数作用域内变量的函数都是闭包。\"><a href=\"#有权访问另一个函数作用域内变量的函数都是闭包。\" class=\"headerlink\" title=\"有权访问另一个函数作用域内变量的函数都是闭包。\"></a>有权访问另一个函数作用域内变量的函数都是闭包。</h3><h3 id=\"闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！\"><a href=\"#闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！\" class=\"headerlink\" title=\"闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！\"></a>闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！</h3><pre><code>function a(){\n  var n = 0;\n  function inc() {\n    n++;\n    console.log(n);\n  }\n  inc(); \n  inc(); \n}\na(); //控制台输出1，再输出2\n\n匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window\nvar name = &quot;The Window&quot;;\nvar object = {\n name : &quot;My Object&quot;,\n getNameFunc : function(){\n     return function(){\n        return this.name;\n     };\n }\n};\nalert(object.getNameFunc()()); //&quot;The Window&quot;（在非严格模式下）\n\n改良\nvar name = &quot;The Window&quot;;\nvar object = {\n name : &quot;My Object&quot;,\n getNameFunc : function(){\n    var that = this; \n     return function(){\n        return that.name;\n     };\n }\n};\nalert(object.getNameFunc()()); //&quot;My Object&quot;\n</code></pre><h2 id=\"六，vue双向绑定的实现原理\"><a href=\"#六，vue双向绑定的实现原理\" class=\"headerlink\" title=\"六，vue双向绑定的实现原理\"></a>六，vue双向绑定的实现原理</h2><h3 id=\"Vue-js-最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。\"><a href=\"#Vue-js-最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。\" class=\"headerlink\" title=\"Vue.js 最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。\"></a>Vue.js 最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。</h3><h3 id=\"访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过-defineProperty-方法单独定义。\"><a href=\"#访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过-defineProperty-方法单独定义。\" class=\"headerlink\" title=\"访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过 defineProperty() 方法单独定义。\"></a>访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过 defineProperty() 方法单独定义。</h3><pre><code>var obj = { };\n\n// 为obj定义一个名为 hello 的访问器属性\n\nObject.defineProperty(obj, &quot;hello&quot;, {\n\n  get: function () {return sth},\n\n  set: function (val) {/* do sth */}\n\n})\n\nobj.hello // 可以像普通属性一样读取访问器属性，访问器属性的&quot;值&quot;比较特殊，读取或设置访问器属性的值，实际上是调用其内部特性：get和set函数。\n\nobj.hello // 读取属性，就是调用get函数并返回get函数的返回值\n\nobj.hello = &quot;abc&quot; // 为属性赋值，就是调用set函数，赋值其实是传参 \n</code></pre>"},{"title":"linux","date":"2016-01-27T15:18:40.000Z","description":"linux常用命令行大全","_content":"\n##编辑文件###\n编辑文件 a.txt: \n    vi a.txt\n    i  (进入插入模式)\n    ~\n    ~\n    编辑\n    ~\n    ~\n    Esc (推出编辑模式 )\n    shitf+q (回到正常模式)+wq(保存)/q!(不保存)    \n\n\n###创建目录，连续创建在当前目录的几个子目录和下一个目录###\n\tmkdir -p CDY_1/{20160305,20160306,20160307} CDY_2\n\n\n###删除空文件夹###\n\trmdir a\n\n###删除文件夹和文件实例###\n\trm -rf /var/log/httpd/access\n\n将会删除/var/log/httpd/access目录以及其下所有文件、文件夹\n-r 就是向下递归，不管有多少级目录，一并删除\n-f 就是直接强行删除，不作任何提示的意思\n\n\n###打开文件，查看文件###\n\tcat a.txt\n\n\n###从根目录重新访问###\n\tcd /apps/..../\n\n\n###访问当前目录的子目录###\n\tcd apps/.../\n\n\n###创建新文件###\n\ttouch a.txt\n\n\n###显示当前目录###\n\tpwd\n\n###历史使用过的命令###\n\thistory  显示历史试用过的全部命令\n\thistory 5       显示最近试用过的5个命令\n\t!5        执行历史编号为5的命令\n\t！ls    执行最后一次以“ls”结尾的命令\n\n\n###命令的使用说明###\n\tman history          “history”这个命令的使用说明\n######\n\n###列表###\n\tls 列出当前目录的文件和文件夹\n\tls -l 列出文件的详细信息。\n \tls -a ｛文件夹目录｝ 不改变当前路径查看当前目录之下的某个文件夹的里面一级目录的内容列表\n######\n\n###查看磁盘使用情况###\n\tdf -lh\n######\n\n###快捷键###\nCtrl+C  终止一个程序的运行， 比较暴力，就是发送Terminal到当前的程序，比如你正在运行一个查找功能，文件正在查找中，Ctrl+C就会强制结束当前的这个进程\nCtrl+Z  挂起一个当前运行的程序， 是把当前的程序挂起，暂停执行这个程序，比如你正在mysql终端中，需要出来搞点其他的文件操作，又不想退出mysql终端（因为下次还得输入用户名密码进入，挺麻烦），于是可以ctrl+z将mysql挂起，然后进行其他操作，然后输入fg回车后就可以回来，当然可以挂起好多进程到后台，然后fg 加编号就能把挂起的进程返回到前台。当然，配合bg和fg命令进行前后台切换会非常方便\nCtrl+D     退出当前的SHELL，相当于exit命令\n######\n\n###修改文件权限###\n\tchmod 764 a.txt\n######\n\n###任务调度###\n \tcrontab -e\n然后弹出编辑界面  编写任务命令 如 02*** date > /home/mydate 表示每个月每天凌晨两点钟 执行‘date’这条命令，然后保存在 /home/mydate下，如果目录不存在的话，目录就会被创建\n*****（分别表示第*分钟，小时，日，月，星期）\n或者写  02*** /apps/mytask.sh 每天凌晨两点钟会自动执行  /apps/mytask.sh 这个shell文件\n######\n\n###执行文件###\n\t./a.sh        ./ 是执行。\n\tsh a.sh      sh 是执行bash读该shell文件，用的读权限。\n######\n\n###在查看列表的时候， 加上 | more或者 | less###\n列表超过屏幕的时候自动分页，按空格键翻页\n######\n\n###查看进程###\n\tps -ef 或者ps -aux\n######\n\n###查看当前目录的文件详情###\nls -lh\n######\n\n###结束进程 ###\n\tkill 1777     kill 加上进程号\n\tkill -9 1777 强制关闭一个进程\n\tkillall 1777 关闭一个进程和他的子进程\n######\n\n###查看cpu，内存，进程，用户具体的使用情况###\n\ttop \n\ttop -d 10    每隔10秒钟更新，动态监控\n######\n\n###退出###\n\tq\n######\n\n###在线下载安装软件（root）###\n \tyum install -y pcre pcre-devel  \n \tyum install -y zlib zlib-devel  \n \tyum install -y openssl openssl-devel  \n######\n\n###创建目录（nginx-src）并进去；然后，从官方地址（http://nginx.org/）下载，解压，配置，编译，安装：###\n\tmkdir nginx-src && cd nginx-src  \n\twget http://nginx.org/download/nginx-1.7.3.tar.gz  \n\ttar xzf nginx-1.7.3.tar.gz   \n\tcd nginx-1.7.3  \n\t./configure  \n\tmake  \n\tmake install  \n\twhereis nginx  \n\tnginx: /usr/local/nginx  \n######\n\n###vi撤销上一步操作###\n按Esc后再按u\n######\n\n###SSH远程登录###\n \tssh apps@ip   ip为要连接的服务器的地址\n######\n\n###查看当前文件夹的大小###\n \tdu -sh \n######\n\n###修改文件和文件夹的用户和用户组属性###\n\tchown -R user:group apps         将apps目录下的所有档案与子目录的拥有者皆设为 group 群体的使用者 user:                   \n######\n\n###服务器远程同步###\n\trsync -avzptL ssh /apps/ apps@119.29.194.46:/apps/      把SSH远程的服务器的根目录apps（文件和安装的程序）同步到119.29.194.46的服务器apps根目录下\n######\n\n###创建软连接（相当于创建快捷方式）###\n\tln -s /var/tomcat/tomcat-8/bin/startup.sh start.sh\n######\n\n###文件重命名###\n\tmv text1.sh text.2.sh\n######\n\n###sftp(linux服务器文件上传和下载)###\n\tsftp root(用户)@192.168.180.65(ip)\n在sftp中get表示下载即得到；  put表示上传即放置\n\tsftp> get 远程主机下文件的路径   将文件保存到本地电脑的路径\n\tsftp> put 本地文件的路径 将文件版保存到远程主机的路径\n######\n\n###使用全局正则表达式搜索文本###\n \tgrep -r AAAA* 在当前目录下（-r递推到所有子目录）所有文本包含AAAA的文件，打印文本的路径和出现搜索关键词的地方\n######\n\n###压缩###\n\tzip test.zip test  把当前目录test文件压缩成test.zip\n\tzip -r test.zip test  把当前目录test文件夹压缩成test.zip\n\ttar czvf b2b2c.bak.201605091008.tar.gz b2b2c\n######\n\n###解压###\n\ttar zxvf b2b2c.2016.05.05.22.tar.gz\n\ttar xzf oneinstack-full.tar.gz\n\tunzip a.zip\n######\n\n\n###临时退出，进入一个对话框###\n\tsystem bash 进入\n \texit 退出临时框\n######\n\n\n系统\n### 查看内核/操作系统/CPU信息\n\tuname -a\n###查看操作系统版本 \n\t head -n 1 /etc/issue \n### 查看CPU信息\n\t cat /proc/cpuinfo \n### 查看计算机名\n\t hostname \n### 列出所有PCI设备\n\t lspci -tv \n### 列出所有USB设备\n\t lsusb -tv \n### 列出加载的内核模块\n\tlsmod \n### 查看环境变量\n\t env \n资源\n### 查看内存使用量和交换区使用量\n\t free -m \n### 查看各分区使用情况\n\t df -h \n### 查看指定目录的大小\n\t du -sh <目录名> \n### 查看内存总量\n\t grep MemTotal /proc/meminfo \n### 查看空闲内存量\n\t grep MemFree /proc/meminfo \n### 查看系统运行时间、用户数、负载\n\t uptime \n\t\n\t# cat /proc/loadavg # 查看系统负载\n\t磁盘和分区\n\t# mount | column -t # 查看挂接的分区状态\n\t# fdisk -l # 查看所有分区\n\t# swapon -s # 查看所有交换分区\n\t# hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)\n\t# dmesg | grep IDE # 查看启动时IDE设备检测状况\n\t网络\n\t# ifconfig # 查看所有网络接口的属性\n\t# iptables -L # 查看防火墙设置\n\t# route -n # 查看路由表\n\t# netstat -lntp # 查看所有监听端口\n\t# netstat -antp # 查看所有已经建立的连接\n\t# netstat -s # 查看网络统计信息\n\t进程\n\t# ps -ef # 查看所有进程\n\t# top # 实时显示进程状态\n\t用户\n\t# w # 查看活动用户\n\t# id <用户名> # 查看指定用户信息\n\t# last # 查看用户登录日志\n\t# cut -d: -f1 /etc/passwd # 查看系统所有用户\n\t# cut -d: -f1 /etc/group # 查看系统所有组\n\t# crontab -l # 查看当前用户的计划任务\n\t服务\n\t# chkconfig --list # 列出所有系统服务\n\t# chkconfig --list | grep on # 列出所有启动的系统服务\n\t程序\n\t# rpm -qa # 查看所有安装的软件包\n\tlinux常见命令的列表\n\t系统命令\n\tapropos whatis 显示和word相关的命令。 参见线程安全\n\tman -t man | ps2pdf - > man.pdf 生成一个PDF格式的帮助文件\n\twhich command 显示命令的完整路径名\n\ttime command 计算命令运行的时间\n\ttime cat 开始计时. Ctrl-d停止。参见sw\n\tnice info 运行一个低优先级命令（这里是info）\n\trenice 19 -p $$ 使脚本运行于低优先级。用于非交互任务。\n\t目录操作\n\tcd - 回到前一目录\n\tcd 回到用户目录\n\t(cd dir && command) 进入目录dir，执行命令command然后回到当前目录\n\tpushd . 将当前目录压入栈，以后你可以使用popd回到此目录\n\t文件搜索\n\talias l='ls -l --color=auto' 单字符文件列表命令\n\tls -lrt 按日期显示文件. 参见newest\n\tls /usr/bin | pr -T9 -W$COLUMNS 在当前终端宽度上打印9列输出\n\tfind -name '*.[ch]' | xargs grep -E 'expr' 在当前目录及其子目录下所有.c和.h文件中寻找'expr'. 参见findrepo\n\tfind -type f -print0 | xargs -r0 grep -F 'example' 在当前目录及其子目录中的常规文件中查找字符串'example'\n\tfind -maxdepth 1 -type f | xargs grep -F 'example' 在当前目录下查找字符串'example'\n\tfind -maxdepth 1 -type d | while read dir; do echo $dir; echo cmd2; done 对每一个找到的文件执行多个命令(使用while循环)\n\tfind -type f ! -perm -444 寻找所有不可读的文件(对网站有用)\n\tfind -type d ! -perm -111 寻找不可访问的目录(对网站有用)\n\tlocate -r 'file[^/]*\\.txt' 使用locate 查找所有符合*file*.txt的文件\n\tlook reference 在（有序）字典中快速查找\n\tgrep --color reference /usr/share/dict/words 使字典中匹配的正则表达式高亮\n\t归档 and compression\n\tgpg -c file 文件加密\n\tgpg file.gpg 文件解密\n\ttar -c dir/ | bzip2 > dir.tar.bz2 将目录dir/压缩打包\n\tbzip2 -dc dir.tar.bz2 | tar -x 展开压缩包 (对tar.gz文件使用gzip而不是bzip2)\n\ttar -c dir/ | gzip | gpg -c | ssh user@remote 'dd of=dir.tar.gz.gpg' 目录dir/压缩打包并放到远程机器上\n\tfind dir/ -name '*.txt' | tar -c --files-from=- | bzip2 > dir_txt.tar.bz2 将目录dir/及其子目录下所有.txt文件打包\n\tfind dir/ -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents 将目录dir/及其子目录下所有.txt按照目录结构拷贝到dir_txt/\n\t( tar -c /dir/to/copy ) | ( cd /where/to/ && tar -x -p ) 拷贝目录copy/到目录/where/to/并保持文件属性\n\t( cd /dir/to/copy && tar -c . ) | ( cd /where/to/ && tar -x -p ) 拷贝目录copy/下的所有文件到目录/where/to/并保持文件属性\n\t( tar -c /dir/to/copy ) | ssh -C user@remote 'cd /where/to/ && tar -x -p'  拷贝目录copy/到远程目录/where/to/并保持文件属性\n\tdd bs=1M if=/dev/sda | gzip | ssh user@remote 'dd of=sda.gz' 将整个硬盘备份到远程机器上\n\trsync (使用 –dry-run选项进行测试)\n\trsync -P rsync://rsync.server.com/path/to/file file 只获取diffs.当下载有问题时可以作多次\n\trsync --bwlimit=1000 fromfile tofile 有速度限制的本地拷贝，对I/O有利\n\trsync -az -e ssh --delete ~/public_html/ remote.com:'~/public_html' 镜像网站(使用压缩和加密)\n\trsync -auz -e ssh remote:/dir/ . && rsync -auz -e ssh . remote:/dir/ 同步当前目录和远程目录\n\tssh (安全 Shell)\n\tssh $USER@$HOST command 在$Host主机上以$User用户运行命令(默认命令为Shell)\n\tssh -f -Y $USER@$HOSTNAME xeyes 在名为$HOSTNAME的主机上以$USER用户运行GUI命令\n\tscp -p -r $USER@$HOST: file dir/ 拷贝到$HOST主机$USER'用户的目录下\n\tssh -g -L 8080:localhost:80 root@$HOST 由本地主机的8080端口转发到$HOST主机的80端口\n\tssh -R 1434:imap:143 root@$HOST 由主机的1434端口转发到imap的143端口\n\twget (多用途下载工具)\n\t(cd cmdline && wget -nd -pHEKk http://www.pixelbeat.org/cmdline.html) 在当前目录中下载指定网页及其相关的文件使其可完全浏览\n\twget -c http://www.example.com/large.file 继续上次未完的下载\n\twget -r -nd -np -l1 -A '*.jpg' http://www.example.com/ 批量下载文件到当前目录中\n\twget ftp://remote/file[1-9].iso/ 下载FTP站上的整个目录\n\twget -q -O- http://www.pixelbeat.org/timeline.html | grep 'a href' | head 直接处理输出\n\techo 'wget url' | at 01:00 在下午一点钟下载指定文件到当前目录\n\twget --limit-rate=20k url 限制下载速度(这里限制到20KB/s)\n\twget -nv --spider --force-html -i bookmarks.html 检查文件中的链接是否存在\n\twget --mirror http://www.example.com/ 更新网站的本地拷贝(可以方便地用于cron)\n\t网络(ifconfig, route, mii-tool, nslookup 命令皆已过时)\n\tethtool eth0 显示网卡eth0的状态\n\tethtool --change eth0 autoneg off speed 100 duplex full 手动设制网卡速度\n\tiwconfig eth1 显示无线网卡eth1的状态\n\tiwconfig eth1 rate 1Mb/s fixed 手动设制无线网卡速度\n\tiwlist scan 显示无线网络列表\n\tip link show 显示interface列表\n\tip link set dev eth0 name wan 重命名eth0为wan\n\tip link set dev eth0 up 启动interface eth0(或关闭)\n\tip addr show 显示网卡的IP地址\n\tip addr add 1.2.3.4/24 brd + dev eth0 添加ip和掩码(255.255.255.0)\n\tip route show 显示路由列表\n\tip route add default via 1.2.3.254 设置默认网关1.2.3.254\n\ttc qdisc add dev lo root handle 1:0 netem delay 20msec 增加20ms传输时间到loopback设备(调试用)\n\ttc qdisc del dev lo root 移除上面添加的传输时间\n\thost pixelbeat.org 查寻主机的DNS IP地址\n\thostname -i 查寻本地主机的IP地址(同等于host `hostname`)\n\twhois pixelbeat.org 查寻某主机或莫IP地址的whois信息\n\tnetstat -tupl 列出系统中的internet服务\n\tnetstat -tup 列出活跃的连接\n\twindows networking (samba提供所有windows相关的网络支持)\n\tsmbtree 寻找一个windows主机. 参见findsmb\n\tnmblookup -A 1.2.3.4 寻找一个指定ip的windows (netbios)名\n\tsmbclient -L windows_box 显示在windows主机或samba服务器上的所有共享\n\tmount -t smbfs -o fmask=666,guest //windows_box/share /mnt/share 挂载一个windows共享\n\techo 'message' | smbclient -M windows_box 发送一个弹出信息到windows主机(XP sp2默认关闭此功能)\n\t文本操作 (sed使用标准输入和标准输出，如果想要编辑文件，则需添加<oldfile >newfile)\n\tsed 's/string1/string2/g' 使用string2替换string1\n\tsed 's/\\(.*\\)1/\\12/g' 将任何以1结尾的字符串替换为以2结尾的字符串\n\tsed '/ *#/d; /^ *$/d' 删除注释和空白行\n\tsed ':a; /\\\\$/N; s/\\\\\\n//; ta' 连接结尾有\\的行和其下一行\n\tsed 's/[ \\t]*$//' 删除每行后的空白\n\tsed 's/\\([\\\\`\\\\\"$\\\\\\\\]\\)/\\\\\\1/g' 将所有转义字符之前加上\\\n\tseq 10 | sed \"s/^/      /; s/ *\\(.\\{7,\\}\\)/\\1/\" 向右排N(任意数)列\n\tsed -n '1000p;1000q' 输出第一千行\n\tsed -n '10,20p;20q' 输出第10-20行\n\tsed -n 's/.*<title>\\(.*\\)<\\/title>.*/\\1/ip;T;q' 输出HTML文件的<title></title>字段中的 内容\n\tsort -t. -k1,1n -k2,2n -k3,3n -k4,4n 排序IPV4地址\n\techo 'Test' | tr '[:lower:]' '[:upper:]' 转换成大写\n\ttr -dc '[:print:]' < /dev/urandom 过滤掉不能打印的字符\n\thistory | wc -l 计算指定单词出现的次数\n\t集合操作 (如果是英文文本的话export LANG=C可以提高速度)\n\tsort file1 file2 | uniq 两个未排序文件的并集\n\tsort file1 file2 | uniq -d 两个未排序文件的交集\n\tsort file1 file1 file2 | uniq -u 两个未排序文件的差 集\n\tsort file1 file2 | uniq -u 两个未排序文件的对称差集\n\tjoin -a1 -a2 file1 file2 两个有序文件的并集\n\tjoin file1 file2 两个有序文件的交集\n\tjoin -v2 file1 file2 两个有序文件的差集\n\tjoin -v1 -v2 file1 file2 两个有序文件的对称差集\n\t数学\n\techo '(1 + sqrt(5))/2' | bc -l 方便的计算器(计算 φ)\n\techo 'pad=20; min=64; (100*10^6)/(pad+min)*8)' | bc 更复杂地计算，这里计算了最大的FastE包率\n\techo 'pad=20; min=64; print (100E6)/(pad+min)*8)' | python Python处理数值的科学表示法\n\techo 'pad=20; plot [64:1518] (100*10**6)/(pad+x)*8)' | gnuplot -persist 显示FastE包率相对于包大小的图形\n\techo 'obase=16; ibase=10; 64206' | bc 进制转换(十进制到十六进制)\n\techo $((0x2dec)) 进制转换(十六进制到十进制)(shell数学扩展)\n\tunits -t '100m/9.69s' 'miles/hour' 单位转换(公尺到英尺)\n\tunits -t '500GB' 'GiB' 单位转换(SI 到IEC 前缀)\n\tunits -t '1 googol' 定义查找\n\tseq 100 | (tr '\\n' +; echo 0) | bc 加N(任意数)列. 参见 add and funcpy\n\t日历\n\tcal -3 显示一日历\n\tcal 9 1752 显示指定月，年的日历\n\tdate -d fri 这个星期五是几号. 参见day\n\tdate --date='25 Dec' +%A 今年的圣诞节是星期几\n\tdate --date '1970-01-01 UTC 2147483647 seconds' 将一相对于1970-01-01 00：00的秒数转换成时间\n\tTZ=':America/Los_Angeles' date 显示当前的美国西岸时间(使用tzselect寻找时区)\n\techo \"mail -s 'get the train' P@draigBrady.com < /dev/null\" | at 17:45 在指定的时间发送邮件\n\techo \"DISPLAY=$DISPLAY xmessage cooker\" | at \"NOW + 30 minutes\" 在给定的时间弹出对话框\n\tlocales\n\tprintf \"%'d\\n\" 1234 根据locale输出正确的数字分隔\n\tBLOCK_SIZE=\\'1 ls -l 用ls命令作类适于locale()文件分组\n\techo \"I live in `locale territory`\" 从locale数据库中展开信息\n\tLANG=en_IE.utf8 locale int_prefix 查找指定地区的locale信息。参见ccodes\n\tlocale | cut -d= -f1 | xargs locale -kc | less 显示在locale数据库中的所有字段\n\trecode (iconv, dos2unix, unix2dos 已经过时了)\n\trecode -l | less 显示所有有效的字符集及其别名\n\trecode windows-1252.. file_to_change.txt 转换Windows下的ansi文件到当前的字符集(自动进行回车换行符的转换)\n\trecode utf-8/CRLF.. file_to_change.txt 转换Windows下的ansi文件到当前的字符集\n\trecode iso-8859-15..utf8 file_to_change.txt 转换Latin9（西欧）字符集文件到utf8\n\trecode ../b64 < file.txt > file.b64 Base64编码\n\trecode /qp.. < file.txt > file.qp Quoted-printable格式解码\n\trecode ..HTML < file.txt > file.html 将文本文件转换成HTML\n\trecode -lf windows-1252 | grep euro 在字符表中查找欧元符号\n\techo -n 0x80 | recode latin-9/x1..dump 显示字符在latin-9中的字符映射\n\techo -n 0x20AC | recode ucs-2/x2..latin-9/x 显示latin-9编码\n\techo -n 0x20AC | recode ucs-2/x2..utf-8/x 显示utf-8编码\n\t光盘\n\tgzip < /dev/cdrom > cdrom.iso.gz 保存光盘拷贝\n\tmkisofs -V LABEL -r dir | gzip > cdrom.iso.gz 建立目录dir的光盘镜像\n\tmount -o loop cdrom.iso /mnt/dir 将光盘镜像挂载到 /mnt/dir (只读)\n\tcdrecord -v dev=/dev/cdrom blank=fast 清空一张CDRW\n\tgzip -dc cdrom.iso.gz | cdrecord -v dev=/dev/cdrom - 烧录光盘镜像 (使用 dev=ATAPI -scanbus 来确认该使用的 dev)\n\tcdparanoia -B 在当前目录下将光盘音轨转录成wav文件\n\tcdrecord -v dev=/dev/cdrom -audio *.wav 将当前目录下的wav文件烧成音乐光盘 (参见cdrdao)\n\toggenc --tracknum='track' track.cdda.wav -o 'track.ogg' 将wav文件转换成ogg格式\n\t磁盘空间 (参见FSlint)\n\tls -lSr 按文件大小降序显示文件\n\tdu -s * | sort -k1,1rn | head 显示当前目录下占用空间最大的一批文件. 参见dutop\n\tdf -h 显示空余的磁盘空间\n\tdf -i 显示空余的inode\n\tfdisk -l 显示磁盘分区大小和类型（在root下执行）\n\trpm -q -a --qf '%10{SIZE}\\t%{NAME}\\n' | sort -k1,1n 显示所有在rpm发布版上安装的包，并以包字节大小为序\n\tdpkg-query -W -f='${Installed-Size;10}\\t${Package}\\n' | sort -k1,1n 显示所有在deb发布版上安装的包，并以KB包大小为序\n\tdd bs=1 seek=2TB if=/dev/null of=ext3.test 建立一个大的测试文件（不占用空间）. 参见truncate\n\t监视/调试\n\ttail -f /var/log/messages 监视Messages日志文件\n\tstrace -c ls >/dev/null 总结/剖析命令进行的系统调用\n\tstrace -f -e open ls >/dev/null 显示命令进行的系统调用\n\tltrace -f -e getenv ls >/dev/null 显示命令调用的库函数\n\tlsof -p $$ 显示当前进程打开的文件\n\tlsof ~ 显示打开用户目录的进程\n\ttcpdump not port 22 显示除了ssh外的网络交通. 参见tcpdump_not_me\n\tps -e -o pid,args --forest 以树状结构显示进程\n\tps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed '/^ 0.0 /d' 以CPU占用率为序显示进程\n\tps -e -orss=,args= | sort -b -k1,1n | pr -TW$COLUMNS 以内存使用量为序显示进程. 参见ps_mem.py\n\tps -C firefox-bin -L -o pid,tid,pcpu,state 显示指定进程的所有线程信息\n\tps -p 1,2 显示指定进程ID的进程信息\n\tlast reboot 显示系统重启记录\n\tfree -m 显示(剩余的)内存总量(-m以MB为单位显示)\n\twatch -n.1 'cat /proc/interrupts' 监测文件/proc/interrupts的变化\n\t系统信息 (参见sysinfo)\n\tuname -a 查看内核/操作系统/CPU信息\n\thead -n1 /etc/issue 查看操作系统版本\n\tcat /proc/partitions 显示所有在系统中注册的分区\n\tgrep MemTotal /proc/meminfo 显示系统可见的内存总量\n\tgrep \"model name\" /proc/cpuinfo 显示CPU信息\n\tlspci -tv 显示PCI信息\n\tlsusb -tv 显示USB信息\n\tmount | column -t 显示所有挂载的文件系统并对齐输出\n\tdmidecode -q | less 显示SMBIOS/DMI 信息\n\tsmartctl -A /dev/sda | grep Power_On_Hours 系统开机的总体时间\n\thdparm -i /dev/sda 显示关于磁盘sda的信息\n\thdparm -tT /dev/sda 检测磁盘sda的读取速度\n\tbadblocks -s /dev/sda 检测磁盘sda上所有的坏扇区\n\t\n\t===== 交互 (参见linux keyboard shortcut database) =====\n\t\n\treadline Line editor used by bash, python, bc, gnuplot, ...\n\tscreen 多窗口的虚拟终端, ...\n\tmc 强大的文件管理器，可以浏览rpm, tar, ftp, ssh, ...\n\tgnuplot 交互式并可进行脚本编程的画图工具\n\tlinks 网页浏览器\n\tmiscellaneous\n\talias hd='od -Ax -tx1z -v' 方便的十六进制输出。 (用法举例: ? hd /proc/self/cmdline | less)\n\talias realpath='readlink -f' 显示符号链接指向的真实路径(用法举例: ? realpath ~/../$USER)\n\tset | grep $USER 在当前环境中查找\n\ttouch -c -t 0304050607 file 改变文件的时间标签 (YYMMDDhhmm)\n\tpython -m SimpleHTTPServer Serve current directory tree at http://$HOSTNAME:8000/\n\t\n\tlinux下实时查看tomcat运行日志\n\t1、先切换到：cd usr/local/tomcat5/logs\n\t2、tail -f catalina.out\n\t3、这样运行时就可以实时查看运行日志了\n\t\n\t添加防火墙的端口\n\t1，修改添加\n\tvi /etc/sysconfig/iptables\n\t2， 添加\n\t3，service iptables stop\n\t4， service iptables start\n\t\n\tlinux源码安装\n\t1， ./configure\n\t2. make\n\t3, make install\n","source":"_posts/linux.md","raw":"---\ntitle: linux\ndate: 2016-01-27 23:18:40\ndescription: 'linux常用命令行大全'\ntags: 'linux'\ncategories: '后端'\n\n---\n\n##编辑文件###\n编辑文件 a.txt: \n    vi a.txt\n    i  (进入插入模式)\n    ~\n    ~\n    编辑\n    ~\n    ~\n    Esc (推出编辑模式 )\n    shitf+q (回到正常模式)+wq(保存)/q!(不保存)    \n\n\n###创建目录，连续创建在当前目录的几个子目录和下一个目录###\n\tmkdir -p CDY_1/{20160305,20160306,20160307} CDY_2\n\n\n###删除空文件夹###\n\trmdir a\n\n###删除文件夹和文件实例###\n\trm -rf /var/log/httpd/access\n\n将会删除/var/log/httpd/access目录以及其下所有文件、文件夹\n-r 就是向下递归，不管有多少级目录，一并删除\n-f 就是直接强行删除，不作任何提示的意思\n\n\n###打开文件，查看文件###\n\tcat a.txt\n\n\n###从根目录重新访问###\n\tcd /apps/..../\n\n\n###访问当前目录的子目录###\n\tcd apps/.../\n\n\n###创建新文件###\n\ttouch a.txt\n\n\n###显示当前目录###\n\tpwd\n\n###历史使用过的命令###\n\thistory  显示历史试用过的全部命令\n\thistory 5       显示最近试用过的5个命令\n\t!5        执行历史编号为5的命令\n\t！ls    执行最后一次以“ls”结尾的命令\n\n\n###命令的使用说明###\n\tman history          “history”这个命令的使用说明\n######\n\n###列表###\n\tls 列出当前目录的文件和文件夹\n\tls -l 列出文件的详细信息。\n \tls -a ｛文件夹目录｝ 不改变当前路径查看当前目录之下的某个文件夹的里面一级目录的内容列表\n######\n\n###查看磁盘使用情况###\n\tdf -lh\n######\n\n###快捷键###\nCtrl+C  终止一个程序的运行， 比较暴力，就是发送Terminal到当前的程序，比如你正在运行一个查找功能，文件正在查找中，Ctrl+C就会强制结束当前的这个进程\nCtrl+Z  挂起一个当前运行的程序， 是把当前的程序挂起，暂停执行这个程序，比如你正在mysql终端中，需要出来搞点其他的文件操作，又不想退出mysql终端（因为下次还得输入用户名密码进入，挺麻烦），于是可以ctrl+z将mysql挂起，然后进行其他操作，然后输入fg回车后就可以回来，当然可以挂起好多进程到后台，然后fg 加编号就能把挂起的进程返回到前台。当然，配合bg和fg命令进行前后台切换会非常方便\nCtrl+D     退出当前的SHELL，相当于exit命令\n######\n\n###修改文件权限###\n\tchmod 764 a.txt\n######\n\n###任务调度###\n \tcrontab -e\n然后弹出编辑界面  编写任务命令 如 02*** date > /home/mydate 表示每个月每天凌晨两点钟 执行‘date’这条命令，然后保存在 /home/mydate下，如果目录不存在的话，目录就会被创建\n*****（分别表示第*分钟，小时，日，月，星期）\n或者写  02*** /apps/mytask.sh 每天凌晨两点钟会自动执行  /apps/mytask.sh 这个shell文件\n######\n\n###执行文件###\n\t./a.sh        ./ 是执行。\n\tsh a.sh      sh 是执行bash读该shell文件，用的读权限。\n######\n\n###在查看列表的时候， 加上 | more或者 | less###\n列表超过屏幕的时候自动分页，按空格键翻页\n######\n\n###查看进程###\n\tps -ef 或者ps -aux\n######\n\n###查看当前目录的文件详情###\nls -lh\n######\n\n###结束进程 ###\n\tkill 1777     kill 加上进程号\n\tkill -9 1777 强制关闭一个进程\n\tkillall 1777 关闭一个进程和他的子进程\n######\n\n###查看cpu，内存，进程，用户具体的使用情况###\n\ttop \n\ttop -d 10    每隔10秒钟更新，动态监控\n######\n\n###退出###\n\tq\n######\n\n###在线下载安装软件（root）###\n \tyum install -y pcre pcre-devel  \n \tyum install -y zlib zlib-devel  \n \tyum install -y openssl openssl-devel  \n######\n\n###创建目录（nginx-src）并进去；然后，从官方地址（http://nginx.org/）下载，解压，配置，编译，安装：###\n\tmkdir nginx-src && cd nginx-src  \n\twget http://nginx.org/download/nginx-1.7.3.tar.gz  \n\ttar xzf nginx-1.7.3.tar.gz   \n\tcd nginx-1.7.3  \n\t./configure  \n\tmake  \n\tmake install  \n\twhereis nginx  \n\tnginx: /usr/local/nginx  \n######\n\n###vi撤销上一步操作###\n按Esc后再按u\n######\n\n###SSH远程登录###\n \tssh apps@ip   ip为要连接的服务器的地址\n######\n\n###查看当前文件夹的大小###\n \tdu -sh \n######\n\n###修改文件和文件夹的用户和用户组属性###\n\tchown -R user:group apps         将apps目录下的所有档案与子目录的拥有者皆设为 group 群体的使用者 user:                   \n######\n\n###服务器远程同步###\n\trsync -avzptL ssh /apps/ apps@119.29.194.46:/apps/      把SSH远程的服务器的根目录apps（文件和安装的程序）同步到119.29.194.46的服务器apps根目录下\n######\n\n###创建软连接（相当于创建快捷方式）###\n\tln -s /var/tomcat/tomcat-8/bin/startup.sh start.sh\n######\n\n###文件重命名###\n\tmv text1.sh text.2.sh\n######\n\n###sftp(linux服务器文件上传和下载)###\n\tsftp root(用户)@192.168.180.65(ip)\n在sftp中get表示下载即得到；  put表示上传即放置\n\tsftp> get 远程主机下文件的路径   将文件保存到本地电脑的路径\n\tsftp> put 本地文件的路径 将文件版保存到远程主机的路径\n######\n\n###使用全局正则表达式搜索文本###\n \tgrep -r AAAA* 在当前目录下（-r递推到所有子目录）所有文本包含AAAA的文件，打印文本的路径和出现搜索关键词的地方\n######\n\n###压缩###\n\tzip test.zip test  把当前目录test文件压缩成test.zip\n\tzip -r test.zip test  把当前目录test文件夹压缩成test.zip\n\ttar czvf b2b2c.bak.201605091008.tar.gz b2b2c\n######\n\n###解压###\n\ttar zxvf b2b2c.2016.05.05.22.tar.gz\n\ttar xzf oneinstack-full.tar.gz\n\tunzip a.zip\n######\n\n\n###临时退出，进入一个对话框###\n\tsystem bash 进入\n \texit 退出临时框\n######\n\n\n系统\n### 查看内核/操作系统/CPU信息\n\tuname -a\n###查看操作系统版本 \n\t head -n 1 /etc/issue \n### 查看CPU信息\n\t cat /proc/cpuinfo \n### 查看计算机名\n\t hostname \n### 列出所有PCI设备\n\t lspci -tv \n### 列出所有USB设备\n\t lsusb -tv \n### 列出加载的内核模块\n\tlsmod \n### 查看环境变量\n\t env \n资源\n### 查看内存使用量和交换区使用量\n\t free -m \n### 查看各分区使用情况\n\t df -h \n### 查看指定目录的大小\n\t du -sh <目录名> \n### 查看内存总量\n\t grep MemTotal /proc/meminfo \n### 查看空闲内存量\n\t grep MemFree /proc/meminfo \n### 查看系统运行时间、用户数、负载\n\t uptime \n\t\n\t# cat /proc/loadavg # 查看系统负载\n\t磁盘和分区\n\t# mount | column -t # 查看挂接的分区状态\n\t# fdisk -l # 查看所有分区\n\t# swapon -s # 查看所有交换分区\n\t# hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)\n\t# dmesg | grep IDE # 查看启动时IDE设备检测状况\n\t网络\n\t# ifconfig # 查看所有网络接口的属性\n\t# iptables -L # 查看防火墙设置\n\t# route -n # 查看路由表\n\t# netstat -lntp # 查看所有监听端口\n\t# netstat -antp # 查看所有已经建立的连接\n\t# netstat -s # 查看网络统计信息\n\t进程\n\t# ps -ef # 查看所有进程\n\t# top # 实时显示进程状态\n\t用户\n\t# w # 查看活动用户\n\t# id <用户名> # 查看指定用户信息\n\t# last # 查看用户登录日志\n\t# cut -d: -f1 /etc/passwd # 查看系统所有用户\n\t# cut -d: -f1 /etc/group # 查看系统所有组\n\t# crontab -l # 查看当前用户的计划任务\n\t服务\n\t# chkconfig --list # 列出所有系统服务\n\t# chkconfig --list | grep on # 列出所有启动的系统服务\n\t程序\n\t# rpm -qa # 查看所有安装的软件包\n\tlinux常见命令的列表\n\t系统命令\n\tapropos whatis 显示和word相关的命令。 参见线程安全\n\tman -t man | ps2pdf - > man.pdf 生成一个PDF格式的帮助文件\n\twhich command 显示命令的完整路径名\n\ttime command 计算命令运行的时间\n\ttime cat 开始计时. Ctrl-d停止。参见sw\n\tnice info 运行一个低优先级命令（这里是info）\n\trenice 19 -p $$ 使脚本运行于低优先级。用于非交互任务。\n\t目录操作\n\tcd - 回到前一目录\n\tcd 回到用户目录\n\t(cd dir && command) 进入目录dir，执行命令command然后回到当前目录\n\tpushd . 将当前目录压入栈，以后你可以使用popd回到此目录\n\t文件搜索\n\talias l='ls -l --color=auto' 单字符文件列表命令\n\tls -lrt 按日期显示文件. 参见newest\n\tls /usr/bin | pr -T9 -W$COLUMNS 在当前终端宽度上打印9列输出\n\tfind -name '*.[ch]' | xargs grep -E 'expr' 在当前目录及其子目录下所有.c和.h文件中寻找'expr'. 参见findrepo\n\tfind -type f -print0 | xargs -r0 grep -F 'example' 在当前目录及其子目录中的常规文件中查找字符串'example'\n\tfind -maxdepth 1 -type f | xargs grep -F 'example' 在当前目录下查找字符串'example'\n\tfind -maxdepth 1 -type d | while read dir; do echo $dir; echo cmd2; done 对每一个找到的文件执行多个命令(使用while循环)\n\tfind -type f ! -perm -444 寻找所有不可读的文件(对网站有用)\n\tfind -type d ! -perm -111 寻找不可访问的目录(对网站有用)\n\tlocate -r 'file[^/]*\\.txt' 使用locate 查找所有符合*file*.txt的文件\n\tlook reference 在（有序）字典中快速查找\n\tgrep --color reference /usr/share/dict/words 使字典中匹配的正则表达式高亮\n\t归档 and compression\n\tgpg -c file 文件加密\n\tgpg file.gpg 文件解密\n\ttar -c dir/ | bzip2 > dir.tar.bz2 将目录dir/压缩打包\n\tbzip2 -dc dir.tar.bz2 | tar -x 展开压缩包 (对tar.gz文件使用gzip而不是bzip2)\n\ttar -c dir/ | gzip | gpg -c | ssh user@remote 'dd of=dir.tar.gz.gpg' 目录dir/压缩打包并放到远程机器上\n\tfind dir/ -name '*.txt' | tar -c --files-from=- | bzip2 > dir_txt.tar.bz2 将目录dir/及其子目录下所有.txt文件打包\n\tfind dir/ -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents 将目录dir/及其子目录下所有.txt按照目录结构拷贝到dir_txt/\n\t( tar -c /dir/to/copy ) | ( cd /where/to/ && tar -x -p ) 拷贝目录copy/到目录/where/to/并保持文件属性\n\t( cd /dir/to/copy && tar -c . ) | ( cd /where/to/ && tar -x -p ) 拷贝目录copy/下的所有文件到目录/where/to/并保持文件属性\n\t( tar -c /dir/to/copy ) | ssh -C user@remote 'cd /where/to/ && tar -x -p'  拷贝目录copy/到远程目录/where/to/并保持文件属性\n\tdd bs=1M if=/dev/sda | gzip | ssh user@remote 'dd of=sda.gz' 将整个硬盘备份到远程机器上\n\trsync (使用 –dry-run选项进行测试)\n\trsync -P rsync://rsync.server.com/path/to/file file 只获取diffs.当下载有问题时可以作多次\n\trsync --bwlimit=1000 fromfile tofile 有速度限制的本地拷贝，对I/O有利\n\trsync -az -e ssh --delete ~/public_html/ remote.com:'~/public_html' 镜像网站(使用压缩和加密)\n\trsync -auz -e ssh remote:/dir/ . && rsync -auz -e ssh . remote:/dir/ 同步当前目录和远程目录\n\tssh (安全 Shell)\n\tssh $USER@$HOST command 在$Host主机上以$User用户运行命令(默认命令为Shell)\n\tssh -f -Y $USER@$HOSTNAME xeyes 在名为$HOSTNAME的主机上以$USER用户运行GUI命令\n\tscp -p -r $USER@$HOST: file dir/ 拷贝到$HOST主机$USER'用户的目录下\n\tssh -g -L 8080:localhost:80 root@$HOST 由本地主机的8080端口转发到$HOST主机的80端口\n\tssh -R 1434:imap:143 root@$HOST 由主机的1434端口转发到imap的143端口\n\twget (多用途下载工具)\n\t(cd cmdline && wget -nd -pHEKk http://www.pixelbeat.org/cmdline.html) 在当前目录中下载指定网页及其相关的文件使其可完全浏览\n\twget -c http://www.example.com/large.file 继续上次未完的下载\n\twget -r -nd -np -l1 -A '*.jpg' http://www.example.com/ 批量下载文件到当前目录中\n\twget ftp://remote/file[1-9].iso/ 下载FTP站上的整个目录\n\twget -q -O- http://www.pixelbeat.org/timeline.html | grep 'a href' | head 直接处理输出\n\techo 'wget url' | at 01:00 在下午一点钟下载指定文件到当前目录\n\twget --limit-rate=20k url 限制下载速度(这里限制到20KB/s)\n\twget -nv --spider --force-html -i bookmarks.html 检查文件中的链接是否存在\n\twget --mirror http://www.example.com/ 更新网站的本地拷贝(可以方便地用于cron)\n\t网络(ifconfig, route, mii-tool, nslookup 命令皆已过时)\n\tethtool eth0 显示网卡eth0的状态\n\tethtool --change eth0 autoneg off speed 100 duplex full 手动设制网卡速度\n\tiwconfig eth1 显示无线网卡eth1的状态\n\tiwconfig eth1 rate 1Mb/s fixed 手动设制无线网卡速度\n\tiwlist scan 显示无线网络列表\n\tip link show 显示interface列表\n\tip link set dev eth0 name wan 重命名eth0为wan\n\tip link set dev eth0 up 启动interface eth0(或关闭)\n\tip addr show 显示网卡的IP地址\n\tip addr add 1.2.3.4/24 brd + dev eth0 添加ip和掩码(255.255.255.0)\n\tip route show 显示路由列表\n\tip route add default via 1.2.3.254 设置默认网关1.2.3.254\n\ttc qdisc add dev lo root handle 1:0 netem delay 20msec 增加20ms传输时间到loopback设备(调试用)\n\ttc qdisc del dev lo root 移除上面添加的传输时间\n\thost pixelbeat.org 查寻主机的DNS IP地址\n\thostname -i 查寻本地主机的IP地址(同等于host `hostname`)\n\twhois pixelbeat.org 查寻某主机或莫IP地址的whois信息\n\tnetstat -tupl 列出系统中的internet服务\n\tnetstat -tup 列出活跃的连接\n\twindows networking (samba提供所有windows相关的网络支持)\n\tsmbtree 寻找一个windows主机. 参见findsmb\n\tnmblookup -A 1.2.3.4 寻找一个指定ip的windows (netbios)名\n\tsmbclient -L windows_box 显示在windows主机或samba服务器上的所有共享\n\tmount -t smbfs -o fmask=666,guest //windows_box/share /mnt/share 挂载一个windows共享\n\techo 'message' | smbclient -M windows_box 发送一个弹出信息到windows主机(XP sp2默认关闭此功能)\n\t文本操作 (sed使用标准输入和标准输出，如果想要编辑文件，则需添加<oldfile >newfile)\n\tsed 's/string1/string2/g' 使用string2替换string1\n\tsed 's/\\(.*\\)1/\\12/g' 将任何以1结尾的字符串替换为以2结尾的字符串\n\tsed '/ *#/d; /^ *$/d' 删除注释和空白行\n\tsed ':a; /\\\\$/N; s/\\\\\\n//; ta' 连接结尾有\\的行和其下一行\n\tsed 's/[ \\t]*$//' 删除每行后的空白\n\tsed 's/\\([\\\\`\\\\\"$\\\\\\\\]\\)/\\\\\\1/g' 将所有转义字符之前加上\\\n\tseq 10 | sed \"s/^/      /; s/ *\\(.\\{7,\\}\\)/\\1/\" 向右排N(任意数)列\n\tsed -n '1000p;1000q' 输出第一千行\n\tsed -n '10,20p;20q' 输出第10-20行\n\tsed -n 's/.*<title>\\(.*\\)<\\/title>.*/\\1/ip;T;q' 输出HTML文件的<title></title>字段中的 内容\n\tsort -t. -k1,1n -k2,2n -k3,3n -k4,4n 排序IPV4地址\n\techo 'Test' | tr '[:lower:]' '[:upper:]' 转换成大写\n\ttr -dc '[:print:]' < /dev/urandom 过滤掉不能打印的字符\n\thistory | wc -l 计算指定单词出现的次数\n\t集合操作 (如果是英文文本的话export LANG=C可以提高速度)\n\tsort file1 file2 | uniq 两个未排序文件的并集\n\tsort file1 file2 | uniq -d 两个未排序文件的交集\n\tsort file1 file1 file2 | uniq -u 两个未排序文件的差 集\n\tsort file1 file2 | uniq -u 两个未排序文件的对称差集\n\tjoin -a1 -a2 file1 file2 两个有序文件的并集\n\tjoin file1 file2 两个有序文件的交集\n\tjoin -v2 file1 file2 两个有序文件的差集\n\tjoin -v1 -v2 file1 file2 两个有序文件的对称差集\n\t数学\n\techo '(1 + sqrt(5))/2' | bc -l 方便的计算器(计算 φ)\n\techo 'pad=20; min=64; (100*10^6)/(pad+min)*8)' | bc 更复杂地计算，这里计算了最大的FastE包率\n\techo 'pad=20; min=64; print (100E6)/(pad+min)*8)' | python Python处理数值的科学表示法\n\techo 'pad=20; plot [64:1518] (100*10**6)/(pad+x)*8)' | gnuplot -persist 显示FastE包率相对于包大小的图形\n\techo 'obase=16; ibase=10; 64206' | bc 进制转换(十进制到十六进制)\n\techo $((0x2dec)) 进制转换(十六进制到十进制)(shell数学扩展)\n\tunits -t '100m/9.69s' 'miles/hour' 单位转换(公尺到英尺)\n\tunits -t '500GB' 'GiB' 单位转换(SI 到IEC 前缀)\n\tunits -t '1 googol' 定义查找\n\tseq 100 | (tr '\\n' +; echo 0) | bc 加N(任意数)列. 参见 add and funcpy\n\t日历\n\tcal -3 显示一日历\n\tcal 9 1752 显示指定月，年的日历\n\tdate -d fri 这个星期五是几号. 参见day\n\tdate --date='25 Dec' +%A 今年的圣诞节是星期几\n\tdate --date '1970-01-01 UTC 2147483647 seconds' 将一相对于1970-01-01 00：00的秒数转换成时间\n\tTZ=':America/Los_Angeles' date 显示当前的美国西岸时间(使用tzselect寻找时区)\n\techo \"mail -s 'get the train' P@draigBrady.com < /dev/null\" | at 17:45 在指定的时间发送邮件\n\techo \"DISPLAY=$DISPLAY xmessage cooker\" | at \"NOW + 30 minutes\" 在给定的时间弹出对话框\n\tlocales\n\tprintf \"%'d\\n\" 1234 根据locale输出正确的数字分隔\n\tBLOCK_SIZE=\\'1 ls -l 用ls命令作类适于locale()文件分组\n\techo \"I live in `locale territory`\" 从locale数据库中展开信息\n\tLANG=en_IE.utf8 locale int_prefix 查找指定地区的locale信息。参见ccodes\n\tlocale | cut -d= -f1 | xargs locale -kc | less 显示在locale数据库中的所有字段\n\trecode (iconv, dos2unix, unix2dos 已经过时了)\n\trecode -l | less 显示所有有效的字符集及其别名\n\trecode windows-1252.. file_to_change.txt 转换Windows下的ansi文件到当前的字符集(自动进行回车换行符的转换)\n\trecode utf-8/CRLF.. file_to_change.txt 转换Windows下的ansi文件到当前的字符集\n\trecode iso-8859-15..utf8 file_to_change.txt 转换Latin9（西欧）字符集文件到utf8\n\trecode ../b64 < file.txt > file.b64 Base64编码\n\trecode /qp.. < file.txt > file.qp Quoted-printable格式解码\n\trecode ..HTML < file.txt > file.html 将文本文件转换成HTML\n\trecode -lf windows-1252 | grep euro 在字符表中查找欧元符号\n\techo -n 0x80 | recode latin-9/x1..dump 显示字符在latin-9中的字符映射\n\techo -n 0x20AC | recode ucs-2/x2..latin-9/x 显示latin-9编码\n\techo -n 0x20AC | recode ucs-2/x2..utf-8/x 显示utf-8编码\n\t光盘\n\tgzip < /dev/cdrom > cdrom.iso.gz 保存光盘拷贝\n\tmkisofs -V LABEL -r dir | gzip > cdrom.iso.gz 建立目录dir的光盘镜像\n\tmount -o loop cdrom.iso /mnt/dir 将光盘镜像挂载到 /mnt/dir (只读)\n\tcdrecord -v dev=/dev/cdrom blank=fast 清空一张CDRW\n\tgzip -dc cdrom.iso.gz | cdrecord -v dev=/dev/cdrom - 烧录光盘镜像 (使用 dev=ATAPI -scanbus 来确认该使用的 dev)\n\tcdparanoia -B 在当前目录下将光盘音轨转录成wav文件\n\tcdrecord -v dev=/dev/cdrom -audio *.wav 将当前目录下的wav文件烧成音乐光盘 (参见cdrdao)\n\toggenc --tracknum='track' track.cdda.wav -o 'track.ogg' 将wav文件转换成ogg格式\n\t磁盘空间 (参见FSlint)\n\tls -lSr 按文件大小降序显示文件\n\tdu -s * | sort -k1,1rn | head 显示当前目录下占用空间最大的一批文件. 参见dutop\n\tdf -h 显示空余的磁盘空间\n\tdf -i 显示空余的inode\n\tfdisk -l 显示磁盘分区大小和类型（在root下执行）\n\trpm -q -a --qf '%10{SIZE}\\t%{NAME}\\n' | sort -k1,1n 显示所有在rpm发布版上安装的包，并以包字节大小为序\n\tdpkg-query -W -f='${Installed-Size;10}\\t${Package}\\n' | sort -k1,1n 显示所有在deb发布版上安装的包，并以KB包大小为序\n\tdd bs=1 seek=2TB if=/dev/null of=ext3.test 建立一个大的测试文件（不占用空间）. 参见truncate\n\t监视/调试\n\ttail -f /var/log/messages 监视Messages日志文件\n\tstrace -c ls >/dev/null 总结/剖析命令进行的系统调用\n\tstrace -f -e open ls >/dev/null 显示命令进行的系统调用\n\tltrace -f -e getenv ls >/dev/null 显示命令调用的库函数\n\tlsof -p $$ 显示当前进程打开的文件\n\tlsof ~ 显示打开用户目录的进程\n\ttcpdump not port 22 显示除了ssh外的网络交通. 参见tcpdump_not_me\n\tps -e -o pid,args --forest 以树状结构显示进程\n\tps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed '/^ 0.0 /d' 以CPU占用率为序显示进程\n\tps -e -orss=,args= | sort -b -k1,1n | pr -TW$COLUMNS 以内存使用量为序显示进程. 参见ps_mem.py\n\tps -C firefox-bin -L -o pid,tid,pcpu,state 显示指定进程的所有线程信息\n\tps -p 1,2 显示指定进程ID的进程信息\n\tlast reboot 显示系统重启记录\n\tfree -m 显示(剩余的)内存总量(-m以MB为单位显示)\n\twatch -n.1 'cat /proc/interrupts' 监测文件/proc/interrupts的变化\n\t系统信息 (参见sysinfo)\n\tuname -a 查看内核/操作系统/CPU信息\n\thead -n1 /etc/issue 查看操作系统版本\n\tcat /proc/partitions 显示所有在系统中注册的分区\n\tgrep MemTotal /proc/meminfo 显示系统可见的内存总量\n\tgrep \"model name\" /proc/cpuinfo 显示CPU信息\n\tlspci -tv 显示PCI信息\n\tlsusb -tv 显示USB信息\n\tmount | column -t 显示所有挂载的文件系统并对齐输出\n\tdmidecode -q | less 显示SMBIOS/DMI 信息\n\tsmartctl -A /dev/sda | grep Power_On_Hours 系统开机的总体时间\n\thdparm -i /dev/sda 显示关于磁盘sda的信息\n\thdparm -tT /dev/sda 检测磁盘sda的读取速度\n\tbadblocks -s /dev/sda 检测磁盘sda上所有的坏扇区\n\t\n\t===== 交互 (参见linux keyboard shortcut database) =====\n\t\n\treadline Line editor used by bash, python, bc, gnuplot, ...\n\tscreen 多窗口的虚拟终端, ...\n\tmc 强大的文件管理器，可以浏览rpm, tar, ftp, ssh, ...\n\tgnuplot 交互式并可进行脚本编程的画图工具\n\tlinks 网页浏览器\n\tmiscellaneous\n\talias hd='od -Ax -tx1z -v' 方便的十六进制输出。 (用法举例: ? hd /proc/self/cmdline | less)\n\talias realpath='readlink -f' 显示符号链接指向的真实路径(用法举例: ? realpath ~/../$USER)\n\tset | grep $USER 在当前环境中查找\n\ttouch -c -t 0304050607 file 改变文件的时间标签 (YYMMDDhhmm)\n\tpython -m SimpleHTTPServer Serve current directory tree at http://$HOSTNAME:8000/\n\t\n\tlinux下实时查看tomcat运行日志\n\t1、先切换到：cd usr/local/tomcat5/logs\n\t2、tail -f catalina.out\n\t3、这样运行时就可以实时查看运行日志了\n\t\n\t添加防火墙的端口\n\t1，修改添加\n\tvi /etc/sysconfig/iptables\n\t2， 添加\n\t3，service iptables stop\n\t4， service iptables start\n\t\n\tlinux源码安装\n\t1， ./configure\n\t2. make\n\t3, make install\n","slug":"linux","published":1,"updated":"2018-12-17T13:37:49.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ict00151wu0qvct8ql5","content":"<p>##编辑文件###<br>编辑文件 a.txt:<br>    vi a.txt<br>    i  (进入插入模式)<br>    ~<br>    ~<br>    编辑<br>    ~<br>    ~<br>    Esc (推出编辑模式 )<br>    shitf+q (回到正常模式)+wq(保存)/q!(不保存)    </p>\n<p>###创建目录，连续创建在当前目录的几个子目录和下一个目录###<br>    mkdir -p CDY_1/{20160305,20160306,20160307} CDY_2</p>\n<p>###删除空文件夹###<br>    rmdir a</p>\n<p>###删除文件夹和文件实例###<br>    rm -rf /var/log/httpd/access</p>\n<p>将会删除/var/log/httpd/access目录以及其下所有文件、文件夹<br>-r 就是向下递归，不管有多少级目录，一并删除<br>-f 就是直接强行删除，不作任何提示的意思</p>\n<p>###打开文件，查看文件###<br>    cat a.txt</p>\n<p>###从根目录重新访问###<br>    cd /apps/…./</p>\n<p>###访问当前目录的子目录###<br>    cd apps/…/</p>\n<p>###创建新文件###<br>    touch a.txt</p>\n<p>###显示当前目录###<br>    pwd</p>\n<p>###历史使用过的命令###<br>    history  显示历史试用过的全部命令<br>    history 5       显示最近试用过的5个命令<br>    !5        执行历史编号为5的命令<br>    ！ls    执行最后一次以“ls”结尾的命令</p>\n<p>###命令的使用说明###<br>    man history          “history”这个命令的使用说明</p>\n<p>######</p>\n<p>###列表###<br>    ls 列出当前目录的文件和文件夹<br>    ls -l 列出文件的详细信息。<br>     ls -a ｛文件夹目录｝ 不改变当前路径查看当前目录之下的某个文件夹的里面一级目录的内容列表</p>\n<p>######</p>\n<p>###查看磁盘使用情况###<br>    df -lh</p>\n<p>######</p>\n<p>###快捷键###<br>Ctrl+C  终止一个程序的运行， 比较暴力，就是发送Terminal到当前的程序，比如你正在运行一个查找功能，文件正在查找中，Ctrl+C就会强制结束当前的这个进程<br>Ctrl+Z  挂起一个当前运行的程序， 是把当前的程序挂起，暂停执行这个程序，比如你正在mysql终端中，需要出来搞点其他的文件操作，又不想退出mysql终端（因为下次还得输入用户名密码进入，挺麻烦），于是可以ctrl+z将mysql挂起，然后进行其他操作，然后输入fg回车后就可以回来，当然可以挂起好多进程到后台，然后fg 加编号就能把挂起的进程返回到前台。当然，配合bg和fg命令进行前后台切换会非常方便<br>Ctrl+D     退出当前的SHELL，相当于exit命令</p>\n<p>######</p>\n<p>###修改文件权限###<br>    chmod 764 a.txt</p>\n<p>######</p>\n<p>###任务调度###<br>     crontab -e<br>然后弹出编辑界面  编写任务命令 如 02<strong><em> date &gt; /home/mydate 表示每个月每天凌晨两点钟 执行‘date’这条命令，然后保存在 /home/mydate下，如果目录不存在的话，目录就会被创建<br>**</em></strong>（分别表示第<em>分钟，小时，日，月，星期）<br>或者写  02**</em> /apps/mytask.sh 每天凌晨两点钟会自动执行  /apps/mytask.sh 这个shell文件</p>\n<p>######</p>\n<p>###执行文件###<br>    ./a.sh        ./ 是执行。<br>    sh a.sh      sh 是执行bash读该shell文件，用的读权限。</p>\n<p>######</p>\n<p>###在查看列表的时候， 加上 | more或者 | less###<br>列表超过屏幕的时候自动分页，按空格键翻页</p>\n<p>######</p>\n<p>###查看进程###<br>    ps -ef 或者ps -aux</p>\n<p>######</p>\n<p>###查看当前目录的文件详情###<br>ls -lh</p>\n<p>######</p>\n<p>###结束进程 ###<br>    kill 1777     kill 加上进程号<br>    kill -9 1777 强制关闭一个进程<br>    killall 1777 关闭一个进程和他的子进程</p>\n<p>######</p>\n<p>###查看cpu，内存，进程，用户具体的使用情况###<br>    top<br>    top -d 10    每隔10秒钟更新，动态监控</p>\n<p>######</p>\n<p>###退出###<br>    q</p>\n<p>######</p>\n<p>###在线下载安装软件（root）###<br>     yum install -y pcre pcre-devel<br>     yum install -y zlib zlib-devel<br>     yum install -y openssl openssl-devel  </p>\n<p>######</p>\n<p>###创建目录（nginx-src）并进去；然后，从官方地址（<a href=\"http://nginx.org/）下载，解压，配置，编译，安装：###\" target=\"_blank\" rel=\"noopener\">http://nginx.org/）下载，解压，配置，编译，安装：###</a><br>    mkdir nginx-src &amp;&amp; cd nginx-src<br>    wget <a href=\"http://nginx.org/download/nginx-1.7.3.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/nginx-1.7.3.tar.gz</a><br>    tar xzf nginx-1.7.3.tar.gz<br>    cd nginx-1.7.3<br>    ./configure<br>    make<br>    make install<br>    whereis nginx<br>    nginx: /usr/local/nginx  </p>\n<p>######</p>\n<p>###vi撤销上一步操作###<br>按Esc后再按u</p>\n<p>######</p>\n<p>###SSH远程登录###<br>     ssh apps@ip   ip为要连接的服务器的地址</p>\n<p>######</p>\n<p>###查看当前文件夹的大小###<br>     du -sh </p>\n<p>######</p>\n<p>###修改文件和文件夹的用户和用户组属性###<br>    chown -R user:group apps         将apps目录下的所有档案与子目录的拥有者皆设为 group 群体的使用者 user:                   </p>\n<p>######</p>\n<p>###服务器远程同步###<br>    rsync -avzptL ssh /apps/ <a href=\"mailto:apps@119.29.194.46\" target=\"_blank\" rel=\"noopener\">apps@119.29.194.46</a>:/apps/      把SSH远程的服务器的根目录apps（文件和安装的程序）同步到119.29.194.46的服务器apps根目录下</p>\n<p>######</p>\n<p>###创建软连接（相当于创建快捷方式）###<br>    ln -s /var/tomcat/tomcat-8/bin/startup.sh start.sh</p>\n<p>######</p>\n<p>###文件重命名###<br>    mv text1.sh text.2.sh</p>\n<p>######</p>\n<p>###sftp(linux服务器文件上传和下载)###<br>    sftp root(用户)@192.168.180.65(ip)<br>在sftp中get表示下载即得到；  put表示上传即放置<br>    sftp&gt; get 远程主机下文件的路径   将文件保存到本地电脑的路径<br>    sftp&gt; put 本地文件的路径 将文件版保存到远程主机的路径</p>\n<p>######</p>\n<p>###使用全局正则表达式搜索文本###<br>     grep -r AAAA* 在当前目录下（-r递推到所有子目录）所有文本包含AAAA的文件，打印文本的路径和出现搜索关键词的地方</p>\n<p>######</p>\n<p>###压缩###<br>    zip test.zip test  把当前目录test文件压缩成test.zip<br>    zip -r test.zip test  把当前目录test文件夹压缩成test.zip<br>    tar czvf b2b2c.bak.201605091008.tar.gz b2b2c</p>\n<p>######</p>\n<p>###解压###<br>    tar zxvf b2b2c.2016.05.05.22.tar.gz<br>    tar xzf oneinstack-full.tar.gz<br>    unzip a.zip</p>\n<p>######</p>\n<p>###临时退出，进入一个对话框###<br>    system bash 进入<br>     exit 退出临时框</p>\n<p>######</p>\n<p>系统</p>\n<h3 id=\"查看内核-操作系统-CPU信息\"><a href=\"#查看内核-操作系统-CPU信息\" class=\"headerlink\" title=\"查看内核/操作系统/CPU信息\"></a>查看内核/操作系统/CPU信息</h3><pre><code>uname -a\n</code></pre><p>###查看操作系统版本<br>     head -n 1 /etc/issue </p>\n<h3 id=\"查看CPU信息\"><a href=\"#查看CPU信息\" class=\"headerlink\" title=\"查看CPU信息\"></a>查看CPU信息</h3><pre><code>cat /proc/cpuinfo \n</code></pre><h3 id=\"查看计算机名\"><a href=\"#查看计算机名\" class=\"headerlink\" title=\"查看计算机名\"></a>查看计算机名</h3><pre><code>hostname \n</code></pre><h3 id=\"列出所有PCI设备\"><a href=\"#列出所有PCI设备\" class=\"headerlink\" title=\"列出所有PCI设备\"></a>列出所有PCI设备</h3><pre><code>lspci -tv \n</code></pre><h3 id=\"列出所有USB设备\"><a href=\"#列出所有USB设备\" class=\"headerlink\" title=\"列出所有USB设备\"></a>列出所有USB设备</h3><pre><code>lsusb -tv \n</code></pre><h3 id=\"列出加载的内核模块\"><a href=\"#列出加载的内核模块\" class=\"headerlink\" title=\"列出加载的内核模块\"></a>列出加载的内核模块</h3><pre><code>lsmod \n</code></pre><h3 id=\"查看环境变量\"><a href=\"#查看环境变量\" class=\"headerlink\" title=\"查看环境变量\"></a>查看环境变量</h3><pre><code>env \n</code></pre><p>资源</p>\n<h3 id=\"查看内存使用量和交换区使用量\"><a href=\"#查看内存使用量和交换区使用量\" class=\"headerlink\" title=\"查看内存使用量和交换区使用量\"></a>查看内存使用量和交换区使用量</h3><pre><code>free -m \n</code></pre><h3 id=\"查看各分区使用情况\"><a href=\"#查看各分区使用情况\" class=\"headerlink\" title=\"查看各分区使用情况\"></a>查看各分区使用情况</h3><pre><code>df -h \n</code></pre><h3 id=\"查看指定目录的大小\"><a href=\"#查看指定目录的大小\" class=\"headerlink\" title=\"查看指定目录的大小\"></a>查看指定目录的大小</h3><pre><code>du -sh &lt;目录名&gt; \n</code></pre><h3 id=\"查看内存总量\"><a href=\"#查看内存总量\" class=\"headerlink\" title=\"查看内存总量\"></a>查看内存总量</h3><pre><code>grep MemTotal /proc/meminfo \n</code></pre><h3 id=\"查看空闲内存量\"><a href=\"#查看空闲内存量\" class=\"headerlink\" title=\"查看空闲内存量\"></a>查看空闲内存量</h3><pre><code>grep MemFree /proc/meminfo \n</code></pre><h3 id=\"查看系统运行时间、用户数、负载\"><a href=\"#查看系统运行时间、用户数、负载\" class=\"headerlink\" title=\"查看系统运行时间、用户数、负载\"></a>查看系统运行时间、用户数、负载</h3><pre><code> uptime \n\n# cat /proc/loadavg # 查看系统负载\n磁盘和分区\n# mount | column -t # 查看挂接的分区状态\n# fdisk -l # 查看所有分区\n# swapon -s # 查看所有交换分区\n# hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)\n# dmesg | grep IDE # 查看启动时IDE设备检测状况\n网络\n# ifconfig # 查看所有网络接口的属性\n# iptables -L # 查看防火墙设置\n# route -n # 查看路由表\n# netstat -lntp # 查看所有监听端口\n# netstat -antp # 查看所有已经建立的连接\n# netstat -s # 查看网络统计信息\n进程\n# ps -ef # 查看所有进程\n# top # 实时显示进程状态\n用户\n# w # 查看活动用户\n# id &lt;用户名&gt; # 查看指定用户信息\n# last # 查看用户登录日志\n# cut -d: -f1 /etc/passwd # 查看系统所有用户\n# cut -d: -f1 /etc/group # 查看系统所有组\n# crontab -l # 查看当前用户的计划任务\n服务\n# chkconfig --list # 列出所有系统服务\n# chkconfig --list | grep on # 列出所有启动的系统服务\n程序\n# rpm -qa # 查看所有安装的软件包\nlinux常见命令的列表\n系统命令\napropos whatis 显示和word相关的命令。 参见线程安全\nman -t man | ps2pdf - &gt; man.pdf 生成一个PDF格式的帮助文件\nwhich command 显示命令的完整路径名\ntime command 计算命令运行的时间\ntime cat 开始计时. Ctrl-d停止。参见sw\nnice info 运行一个低优先级命令（这里是info）\nrenice 19 -p $$ 使脚本运行于低优先级。用于非交互任务。\n目录操作\ncd - 回到前一目录\ncd 回到用户目录\n(cd dir &amp;&amp; command) 进入目录dir，执行命令command然后回到当前目录\npushd . 将当前目录压入栈，以后你可以使用popd回到此目录\n文件搜索\nalias l=&apos;ls -l --color=auto&apos; 单字符文件列表命令\nls -lrt 按日期显示文件. 参见newest\nls /usr/bin | pr -T9 -W$COLUMNS 在当前终端宽度上打印9列输出\nfind -name &apos;*.[ch]&apos; | xargs grep -E &apos;expr&apos; 在当前目录及其子目录下所有.c和.h文件中寻找&apos;expr&apos;. 参见findrepo\nfind -type f -print0 | xargs -r0 grep -F &apos;example&apos; 在当前目录及其子目录中的常规文件中查找字符串&apos;example&apos;\nfind -maxdepth 1 -type f | xargs grep -F &apos;example&apos; 在当前目录下查找字符串&apos;example&apos;\nfind -maxdepth 1 -type d | while read dir; do echo $dir; echo cmd2; done 对每一个找到的文件执行多个命令(使用while循环)\nfind -type f ! -perm -444 寻找所有不可读的文件(对网站有用)\nfind -type d ! -perm -111 寻找不可访问的目录(对网站有用)\nlocate -r &apos;file[^/]*\\.txt&apos; 使用locate 查找所有符合*file*.txt的文件\nlook reference 在（有序）字典中快速查找\ngrep --color reference /usr/share/dict/words 使字典中匹配的正则表达式高亮\n归档 and compression\ngpg -c file 文件加密\ngpg file.gpg 文件解密\ntar -c dir/ | bzip2 &gt; dir.tar.bz2 将目录dir/压缩打包\nbzip2 -dc dir.tar.bz2 | tar -x 展开压缩包 (对tar.gz文件使用gzip而不是bzip2)\ntar -c dir/ | gzip | gpg -c | ssh user@remote &apos;dd of=dir.tar.gz.gpg&apos; 目录dir/压缩打包并放到远程机器上\nfind dir/ -name &apos;*.txt&apos; | tar -c --files-from=- | bzip2 &gt; dir_txt.tar.bz2 将目录dir/及其子目录下所有.txt文件打包\nfind dir/ -name &apos;*.txt&apos; | xargs cp -a --target-directory=dir_txt/ --parents 将目录dir/及其子目录下所有.txt按照目录结构拷贝到dir_txt/\n( tar -c /dir/to/copy ) | ( cd /where/to/ &amp;&amp; tar -x -p ) 拷贝目录copy/到目录/where/to/并保持文件属性\n( cd /dir/to/copy &amp;&amp; tar -c . ) | ( cd /where/to/ &amp;&amp; tar -x -p ) 拷贝目录copy/下的所有文件到目录/where/to/并保持文件属性\n( tar -c /dir/to/copy ) | ssh -C user@remote &apos;cd /where/to/ &amp;&amp; tar -x -p&apos;  拷贝目录copy/到远程目录/where/to/并保持文件属性\ndd bs=1M if=/dev/sda | gzip | ssh user@remote &apos;dd of=sda.gz&apos; 将整个硬盘备份到远程机器上\nrsync (使用 –dry-run选项进行测试)\nrsync -P rsync://rsync.server.com/path/to/file file 只获取diffs.当下载有问题时可以作多次\nrsync --bwlimit=1000 fromfile tofile 有速度限制的本地拷贝，对I/O有利\nrsync -az -e ssh --delete ~/public_html/ remote.com:&apos;~/public_html&apos; 镜像网站(使用压缩和加密)\nrsync -auz -e ssh remote:/dir/ . &amp;&amp; rsync -auz -e ssh . remote:/dir/ 同步当前目录和远程目录\nssh (安全 Shell)\nssh $USER@$HOST command 在$Host主机上以$User用户运行命令(默认命令为Shell)\nssh -f -Y $USER@$HOSTNAME xeyes 在名为$HOSTNAME的主机上以$USER用户运行GUI命令\nscp -p -r $USER@$HOST: file dir/ 拷贝到$HOST主机$USER&apos;用户的目录下\nssh -g -L 8080:localhost:80 root@$HOST 由本地主机的8080端口转发到$HOST主机的80端口\nssh -R 1434:imap:143 root@$HOST 由主机的1434端口转发到imap的143端口\nwget (多用途下载工具)\n(cd cmdline &amp;&amp; wget -nd -pHEKk http://www.pixelbeat.org/cmdline.html) 在当前目录中下载指定网页及其相关的文件使其可完全浏览\nwget -c http://www.example.com/large.file 继续上次未完的下载\nwget -r -nd -np -l1 -A &apos;*.jpg&apos; http://www.example.com/ 批量下载文件到当前目录中\nwget ftp://remote/file[1-9].iso/ 下载FTP站上的整个目录\nwget -q -O- http://www.pixelbeat.org/timeline.html | grep &apos;a href&apos; | head 直接处理输出\necho &apos;wget url&apos; | at 01:00 在下午一点钟下载指定文件到当前目录\nwget --limit-rate=20k url 限制下载速度(这里限制到20KB/s)\nwget -nv --spider --force-html -i bookmarks.html 检查文件中的链接是否存在\nwget --mirror http://www.example.com/ 更新网站的本地拷贝(可以方便地用于cron)\n网络(ifconfig, route, mii-tool, nslookup 命令皆已过时)\nethtool eth0 显示网卡eth0的状态\nethtool --change eth0 autoneg off speed 100 duplex full 手动设制网卡速度\niwconfig eth1 显示无线网卡eth1的状态\niwconfig eth1 rate 1Mb/s fixed 手动设制无线网卡速度\niwlist scan 显示无线网络列表\nip link show 显示interface列表\nip link set dev eth0 name wan 重命名eth0为wan\nip link set dev eth0 up 启动interface eth0(或关闭)\nip addr show 显示网卡的IP地址\nip addr add 1.2.3.4/24 brd + dev eth0 添加ip和掩码(255.255.255.0)\nip route show 显示路由列表\nip route add default via 1.2.3.254 设置默认网关1.2.3.254\ntc qdisc add dev lo root handle 1:0 netem delay 20msec 增加20ms传输时间到loopback设备(调试用)\ntc qdisc del dev lo root 移除上面添加的传输时间\nhost pixelbeat.org 查寻主机的DNS IP地址\nhostname -i 查寻本地主机的IP地址(同等于host `hostname`)\nwhois pixelbeat.org 查寻某主机或莫IP地址的whois信息\nnetstat -tupl 列出系统中的internet服务\nnetstat -tup 列出活跃的连接\nwindows networking (samba提供所有windows相关的网络支持)\nsmbtree 寻找一个windows主机. 参见findsmb\nnmblookup -A 1.2.3.4 寻找一个指定ip的windows (netbios)名\nsmbclient -L windows_box 显示在windows主机或samba服务器上的所有共享\nmount -t smbfs -o fmask=666,guest //windows_box/share /mnt/share 挂载一个windows共享\necho &apos;message&apos; | smbclient -M windows_box 发送一个弹出信息到windows主机(XP sp2默认关闭此功能)\n文本操作 (sed使用标准输入和标准输出，如果想要编辑文件，则需添加&lt;oldfile &gt;newfile)\nsed &apos;s/string1/string2/g&apos; 使用string2替换string1\nsed &apos;s/\\(.*\\)1/\\12/g&apos; 将任何以1结尾的字符串替换为以2结尾的字符串\nsed &apos;/ *#/d; /^ *$/d&apos; 删除注释和空白行\nsed &apos;:a; /\\\\$/N; s/\\\\\\n//; ta&apos; 连接结尾有\\的行和其下一行\nsed &apos;s/[ \\t]*$//&apos; 删除每行后的空白\nsed &apos;s/\\([\\\\`\\\\&quot;$\\\\\\\\]\\)/\\\\\\1/g&apos; 将所有转义字符之前加上\\\nseq 10 | sed &quot;s/^/      /; s/ *\\(.\\{7,\\}\\)/\\1/&quot; 向右排N(任意数)列\nsed -n &apos;1000p;1000q&apos; 输出第一千行\nsed -n &apos;10,20p;20q&apos; 输出第10-20行\nsed -n &apos;s/.*&lt;title&gt;\\(.*\\)&lt;\\/title&gt;.*/\\1/ip;T;q&apos; 输出HTML文件的&lt;title&gt;&lt;/title&gt;字段中的 内容\nsort -t. -k1,1n -k2,2n -k3,3n -k4,4n 排序IPV4地址\necho &apos;Test&apos; | tr &apos;[:lower:]&apos; &apos;[:upper:]&apos; 转换成大写\ntr -dc &apos;[:print:]&apos; &lt; /dev/urandom 过滤掉不能打印的字符\nhistory | wc -l 计算指定单词出现的次数\n集合操作 (如果是英文文本的话export LANG=C可以提高速度)\nsort file1 file2 | uniq 两个未排序文件的并集\nsort file1 file2 | uniq -d 两个未排序文件的交集\nsort file1 file1 file2 | uniq -u 两个未排序文件的差 集\nsort file1 file2 | uniq -u 两个未排序文件的对称差集\njoin -a1 -a2 file1 file2 两个有序文件的并集\njoin file1 file2 两个有序文件的交集\njoin -v2 file1 file2 两个有序文件的差集\njoin -v1 -v2 file1 file2 两个有序文件的对称差集\n数学\necho &apos;(1 + sqrt(5))/2&apos; | bc -l 方便的计算器(计算 φ)\necho &apos;pad=20; min=64; (100*10^6)/(pad+min)*8)&apos; | bc 更复杂地计算，这里计算了最大的FastE包率\necho &apos;pad=20; min=64; print (100E6)/(pad+min)*8)&apos; | python Python处理数值的科学表示法\necho &apos;pad=20; plot [64:1518] (100*10**6)/(pad+x)*8)&apos; | gnuplot -persist 显示FastE包率相对于包大小的图形\necho &apos;obase=16; ibase=10; 64206&apos; | bc 进制转换(十进制到十六进制)\necho $((0x2dec)) 进制转换(十六进制到十进制)(shell数学扩展)\nunits -t &apos;100m/9.69s&apos; &apos;miles/hour&apos; 单位转换(公尺到英尺)\nunits -t &apos;500GB&apos; &apos;GiB&apos; 单位转换(SI 到IEC 前缀)\nunits -t &apos;1 googol&apos; 定义查找\nseq 100 | (tr &apos;\\n&apos; +; echo 0) | bc 加N(任意数)列. 参见 add and funcpy\n日历\ncal -3 显示一日历\ncal 9 1752 显示指定月，年的日历\ndate -d fri 这个星期五是几号. 参见day\ndate --date=&apos;25 Dec&apos; +%A 今年的圣诞节是星期几\ndate --date &apos;1970-01-01 UTC 2147483647 seconds&apos; 将一相对于1970-01-01 00：00的秒数转换成时间\nTZ=&apos;:America/Los_Angeles&apos; date 显示当前的美国西岸时间(使用tzselect寻找时区)\necho &quot;mail -s &apos;get the train&apos; P@draigBrady.com &lt; /dev/null&quot; | at 17:45 在指定的时间发送邮件\necho &quot;DISPLAY=$DISPLAY xmessage cooker&quot; | at &quot;NOW + 30 minutes&quot; 在给定的时间弹出对话框\nlocales\nprintf &quot;%&apos;d\\n&quot; 1234 根据locale输出正确的数字分隔\nBLOCK_SIZE=\\&apos;1 ls -l 用ls命令作类适于locale()文件分组\necho &quot;I live in `locale territory`&quot; 从locale数据库中展开信息\nLANG=en_IE.utf8 locale int_prefix 查找指定地区的locale信息。参见ccodes\nlocale | cut -d= -f1 | xargs locale -kc | less 显示在locale数据库中的所有字段\nrecode (iconv, dos2unix, unix2dos 已经过时了)\nrecode -l | less 显示所有有效的字符集及其别名\nrecode windows-1252.. file_to_change.txt 转换Windows下的ansi文件到当前的字符集(自动进行回车换行符的转换)\nrecode utf-8/CRLF.. file_to_change.txt 转换Windows下的ansi文件到当前的字符集\nrecode iso-8859-15..utf8 file_to_change.txt 转换Latin9（西欧）字符集文件到utf8\nrecode ../b64 &lt; file.txt &gt; file.b64 Base64编码\nrecode /qp.. &lt; file.txt &gt; file.qp Quoted-printable格式解码\nrecode ..HTML &lt; file.txt &gt; file.html 将文本文件转换成HTML\nrecode -lf windows-1252 | grep euro 在字符表中查找欧元符号\necho -n 0x80 | recode latin-9/x1..dump 显示字符在latin-9中的字符映射\necho -n 0x20AC | recode ucs-2/x2..latin-9/x 显示latin-9编码\necho -n 0x20AC | recode ucs-2/x2..utf-8/x 显示utf-8编码\n光盘\ngzip &lt; /dev/cdrom &gt; cdrom.iso.gz 保存光盘拷贝\nmkisofs -V LABEL -r dir | gzip &gt; cdrom.iso.gz 建立目录dir的光盘镜像\nmount -o loop cdrom.iso /mnt/dir 将光盘镜像挂载到 /mnt/dir (只读)\ncdrecord -v dev=/dev/cdrom blank=fast 清空一张CDRW\ngzip -dc cdrom.iso.gz | cdrecord -v dev=/dev/cdrom - 烧录光盘镜像 (使用 dev=ATAPI -scanbus 来确认该使用的 dev)\ncdparanoia -B 在当前目录下将光盘音轨转录成wav文件\ncdrecord -v dev=/dev/cdrom -audio *.wav 将当前目录下的wav文件烧成音乐光盘 (参见cdrdao)\noggenc --tracknum=&apos;track&apos; track.cdda.wav -o &apos;track.ogg&apos; 将wav文件转换成ogg格式\n磁盘空间 (参见FSlint)\nls -lSr 按文件大小降序显示文件\ndu -s * | sort -k1,1rn | head 显示当前目录下占用空间最大的一批文件. 参见dutop\ndf -h 显示空余的磁盘空间\ndf -i 显示空余的inode\nfdisk -l 显示磁盘分区大小和类型（在root下执行）\nrpm -q -a --qf &apos;%10{SIZE}\\t%{NAME}\\n&apos; | sort -k1,1n 显示所有在rpm发布版上安装的包，并以包字节大小为序\ndpkg-query -W -f=&apos;${Installed-Size;10}\\t${Package}\\n&apos; | sort -k1,1n 显示所有在deb发布版上安装的包，并以KB包大小为序\ndd bs=1 seek=2TB if=/dev/null of=ext3.test 建立一个大的测试文件（不占用空间）. 参见truncate\n监视/调试\ntail -f /var/log/messages 监视Messages日志文件\nstrace -c ls &gt;/dev/null 总结/剖析命令进行的系统调用\nstrace -f -e open ls &gt;/dev/null 显示命令进行的系统调用\nltrace -f -e getenv ls &gt;/dev/null 显示命令调用的库函数\nlsof -p $$ 显示当前进程打开的文件\nlsof ~ 显示打开用户目录的进程\ntcpdump not port 22 显示除了ssh外的网络交通. 参见tcpdump_not_me\nps -e -o pid,args --forest 以树状结构显示进程\nps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed &apos;/^ 0.0 /d&apos; 以CPU占用率为序显示进程\nps -e -orss=,args= | sort -b -k1,1n | pr -TW$COLUMNS 以内存使用量为序显示进程. 参见ps_mem.py\nps -C firefox-bin -L -o pid,tid,pcpu,state 显示指定进程的所有线程信息\nps -p 1,2 显示指定进程ID的进程信息\nlast reboot 显示系统重启记录\nfree -m 显示(剩余的)内存总量(-m以MB为单位显示)\nwatch -n.1 &apos;cat /proc/interrupts&apos; 监测文件/proc/interrupts的变化\n系统信息 (参见sysinfo)\nuname -a 查看内核/操作系统/CPU信息\nhead -n1 /etc/issue 查看操作系统版本\ncat /proc/partitions 显示所有在系统中注册的分区\ngrep MemTotal /proc/meminfo 显示系统可见的内存总量\ngrep &quot;model name&quot; /proc/cpuinfo 显示CPU信息\nlspci -tv 显示PCI信息\nlsusb -tv 显示USB信息\nmount | column -t 显示所有挂载的文件系统并对齐输出\ndmidecode -q | less 显示SMBIOS/DMI 信息\nsmartctl -A /dev/sda | grep Power_On_Hours 系统开机的总体时间\nhdparm -i /dev/sda 显示关于磁盘sda的信息\nhdparm -tT /dev/sda 检测磁盘sda的读取速度\nbadblocks -s /dev/sda 检测磁盘sda上所有的坏扇区\n\n===== 交互 (参见linux keyboard shortcut database) =====\n\nreadline Line editor used by bash, python, bc, gnuplot, ...\nscreen 多窗口的虚拟终端, ...\nmc 强大的文件管理器，可以浏览rpm, tar, ftp, ssh, ...\ngnuplot 交互式并可进行脚本编程的画图工具\nlinks 网页浏览器\nmiscellaneous\nalias hd=&apos;od -Ax -tx1z -v&apos; 方便的十六进制输出。 (用法举例: ? hd /proc/self/cmdline | less)\nalias realpath=&apos;readlink -f&apos; 显示符号链接指向的真实路径(用法举例: ? realpath ~/../$USER)\nset | grep $USER 在当前环境中查找\ntouch -c -t 0304050607 file 改变文件的时间标签 (YYMMDDhhmm)\npython -m SimpleHTTPServer Serve current directory tree at http://$HOSTNAME:8000/\n\nlinux下实时查看tomcat运行日志\n1、先切换到：cd usr/local/tomcat5/logs\n2、tail -f catalina.out\n3、这样运行时就可以实时查看运行日志了\n\n添加防火墙的端口\n1，修改添加\nvi /etc/sysconfig/iptables\n2， 添加\n3，service iptables stop\n4， service iptables start\n\nlinux源码安装\n1， ./configure\n2. make\n3, make install\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>##编辑文件###<br>编辑文件 a.txt:<br>    vi a.txt<br>    i  (进入插入模式)<br>    ~<br>    ~<br>    编辑<br>    ~<br>    ~<br>    Esc (推出编辑模式 )<br>    shitf+q (回到正常模式)+wq(保存)/q!(不保存)    </p>\n<p>###创建目录，连续创建在当前目录的几个子目录和下一个目录###<br>    mkdir -p CDY_1/{20160305,20160306,20160307} CDY_2</p>\n<p>###删除空文件夹###<br>    rmdir a</p>\n<p>###删除文件夹和文件实例###<br>    rm -rf /var/log/httpd/access</p>\n<p>将会删除/var/log/httpd/access目录以及其下所有文件、文件夹<br>-r 就是向下递归，不管有多少级目录，一并删除<br>-f 就是直接强行删除，不作任何提示的意思</p>\n<p>###打开文件，查看文件###<br>    cat a.txt</p>\n<p>###从根目录重新访问###<br>    cd /apps/…./</p>\n<p>###访问当前目录的子目录###<br>    cd apps/…/</p>\n<p>###创建新文件###<br>    touch a.txt</p>\n<p>###显示当前目录###<br>    pwd</p>\n<p>###历史使用过的命令###<br>    history  显示历史试用过的全部命令<br>    history 5       显示最近试用过的5个命令<br>    !5        执行历史编号为5的命令<br>    ！ls    执行最后一次以“ls”结尾的命令</p>\n<p>###命令的使用说明###<br>    man history          “history”这个命令的使用说明</p>\n<p>######</p>\n<p>###列表###<br>    ls 列出当前目录的文件和文件夹<br>    ls -l 列出文件的详细信息。<br>     ls -a ｛文件夹目录｝ 不改变当前路径查看当前目录之下的某个文件夹的里面一级目录的内容列表</p>\n<p>######</p>\n<p>###查看磁盘使用情况###<br>    df -lh</p>\n<p>######</p>\n<p>###快捷键###<br>Ctrl+C  终止一个程序的运行， 比较暴力，就是发送Terminal到当前的程序，比如你正在运行一个查找功能，文件正在查找中，Ctrl+C就会强制结束当前的这个进程<br>Ctrl+Z  挂起一个当前运行的程序， 是把当前的程序挂起，暂停执行这个程序，比如你正在mysql终端中，需要出来搞点其他的文件操作，又不想退出mysql终端（因为下次还得输入用户名密码进入，挺麻烦），于是可以ctrl+z将mysql挂起，然后进行其他操作，然后输入fg回车后就可以回来，当然可以挂起好多进程到后台，然后fg 加编号就能把挂起的进程返回到前台。当然，配合bg和fg命令进行前后台切换会非常方便<br>Ctrl+D     退出当前的SHELL，相当于exit命令</p>\n<p>######</p>\n<p>###修改文件权限###<br>    chmod 764 a.txt</p>\n<p>######</p>\n<p>###任务调度###<br>     crontab -e<br>然后弹出编辑界面  编写任务命令 如 02<strong><em> date &gt; /home/mydate 表示每个月每天凌晨两点钟 执行‘date’这条命令，然后保存在 /home/mydate下，如果目录不存在的话，目录就会被创建<br>**</em></strong>（分别表示第<em>分钟，小时，日，月，星期）<br>或者写  02**</em> /apps/mytask.sh 每天凌晨两点钟会自动执行  /apps/mytask.sh 这个shell文件</p>\n<p>######</p>\n<p>###执行文件###<br>    ./a.sh        ./ 是执行。<br>    sh a.sh      sh 是执行bash读该shell文件，用的读权限。</p>\n<p>######</p>\n<p>###在查看列表的时候， 加上 | more或者 | less###<br>列表超过屏幕的时候自动分页，按空格键翻页</p>\n<p>######</p>\n<p>###查看进程###<br>    ps -ef 或者ps -aux</p>\n<p>######</p>\n<p>###查看当前目录的文件详情###<br>ls -lh</p>\n<p>######</p>\n<p>###结束进程 ###<br>    kill 1777     kill 加上进程号<br>    kill -9 1777 强制关闭一个进程<br>    killall 1777 关闭一个进程和他的子进程</p>\n<p>######</p>\n<p>###查看cpu，内存，进程，用户具体的使用情况###<br>    top<br>    top -d 10    每隔10秒钟更新，动态监控</p>\n<p>######</p>\n<p>###退出###<br>    q</p>\n<p>######</p>\n<p>###在线下载安装软件（root）###<br>     yum install -y pcre pcre-devel<br>     yum install -y zlib zlib-devel<br>     yum install -y openssl openssl-devel  </p>\n<p>######</p>\n<p>###创建目录（nginx-src）并进去；然后，从官方地址（<a href=\"http://nginx.org/）下载，解压，配置，编译，安装：###\" target=\"_blank\" rel=\"noopener\">http://nginx.org/）下载，解压，配置，编译，安装：###</a><br>    mkdir nginx-src &amp;&amp; cd nginx-src<br>    wget <a href=\"http://nginx.org/download/nginx-1.7.3.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/nginx-1.7.3.tar.gz</a><br>    tar xzf nginx-1.7.3.tar.gz<br>    cd nginx-1.7.3<br>    ./configure<br>    make<br>    make install<br>    whereis nginx<br>    nginx: /usr/local/nginx  </p>\n<p>######</p>\n<p>###vi撤销上一步操作###<br>按Esc后再按u</p>\n<p>######</p>\n<p>###SSH远程登录###<br>     ssh apps@ip   ip为要连接的服务器的地址</p>\n<p>######</p>\n<p>###查看当前文件夹的大小###<br>     du -sh </p>\n<p>######</p>\n<p>###修改文件和文件夹的用户和用户组属性###<br>    chown -R user:group apps         将apps目录下的所有档案与子目录的拥有者皆设为 group 群体的使用者 user:                   </p>\n<p>######</p>\n<p>###服务器远程同步###<br>    rsync -avzptL ssh /apps/ <a href=\"mailto:apps@119.29.194.46\" target=\"_blank\" rel=\"noopener\">apps@119.29.194.46</a>:/apps/      把SSH远程的服务器的根目录apps（文件和安装的程序）同步到119.29.194.46的服务器apps根目录下</p>\n<p>######</p>\n<p>###创建软连接（相当于创建快捷方式）###<br>    ln -s /var/tomcat/tomcat-8/bin/startup.sh start.sh</p>\n<p>######</p>\n<p>###文件重命名###<br>    mv text1.sh text.2.sh</p>\n<p>######</p>\n<p>###sftp(linux服务器文件上传和下载)###<br>    sftp root(用户)@192.168.180.65(ip)<br>在sftp中get表示下载即得到；  put表示上传即放置<br>    sftp&gt; get 远程主机下文件的路径   将文件保存到本地电脑的路径<br>    sftp&gt; put 本地文件的路径 将文件版保存到远程主机的路径</p>\n<p>######</p>\n<p>###使用全局正则表达式搜索文本###<br>     grep -r AAAA* 在当前目录下（-r递推到所有子目录）所有文本包含AAAA的文件，打印文本的路径和出现搜索关键词的地方</p>\n<p>######</p>\n<p>###压缩###<br>    zip test.zip test  把当前目录test文件压缩成test.zip<br>    zip -r test.zip test  把当前目录test文件夹压缩成test.zip<br>    tar czvf b2b2c.bak.201605091008.tar.gz b2b2c</p>\n<p>######</p>\n<p>###解压###<br>    tar zxvf b2b2c.2016.05.05.22.tar.gz<br>    tar xzf oneinstack-full.tar.gz<br>    unzip a.zip</p>\n<p>######</p>\n<p>###临时退出，进入一个对话框###<br>    system bash 进入<br>     exit 退出临时框</p>\n<p>######</p>\n<p>系统</p>\n<h3 id=\"查看内核-操作系统-CPU信息\"><a href=\"#查看内核-操作系统-CPU信息\" class=\"headerlink\" title=\"查看内核/操作系统/CPU信息\"></a>查看内核/操作系统/CPU信息</h3><pre><code>uname -a\n</code></pre><p>###查看操作系统版本<br>     head -n 1 /etc/issue </p>\n<h3 id=\"查看CPU信息\"><a href=\"#查看CPU信息\" class=\"headerlink\" title=\"查看CPU信息\"></a>查看CPU信息</h3><pre><code>cat /proc/cpuinfo \n</code></pre><h3 id=\"查看计算机名\"><a href=\"#查看计算机名\" class=\"headerlink\" title=\"查看计算机名\"></a>查看计算机名</h3><pre><code>hostname \n</code></pre><h3 id=\"列出所有PCI设备\"><a href=\"#列出所有PCI设备\" class=\"headerlink\" title=\"列出所有PCI设备\"></a>列出所有PCI设备</h3><pre><code>lspci -tv \n</code></pre><h3 id=\"列出所有USB设备\"><a href=\"#列出所有USB设备\" class=\"headerlink\" title=\"列出所有USB设备\"></a>列出所有USB设备</h3><pre><code>lsusb -tv \n</code></pre><h3 id=\"列出加载的内核模块\"><a href=\"#列出加载的内核模块\" class=\"headerlink\" title=\"列出加载的内核模块\"></a>列出加载的内核模块</h3><pre><code>lsmod \n</code></pre><h3 id=\"查看环境变量\"><a href=\"#查看环境变量\" class=\"headerlink\" title=\"查看环境变量\"></a>查看环境变量</h3><pre><code>env \n</code></pre><p>资源</p>\n<h3 id=\"查看内存使用量和交换区使用量\"><a href=\"#查看内存使用量和交换区使用量\" class=\"headerlink\" title=\"查看内存使用量和交换区使用量\"></a>查看内存使用量和交换区使用量</h3><pre><code>free -m \n</code></pre><h3 id=\"查看各分区使用情况\"><a href=\"#查看各分区使用情况\" class=\"headerlink\" title=\"查看各分区使用情况\"></a>查看各分区使用情况</h3><pre><code>df -h \n</code></pre><h3 id=\"查看指定目录的大小\"><a href=\"#查看指定目录的大小\" class=\"headerlink\" title=\"查看指定目录的大小\"></a>查看指定目录的大小</h3><pre><code>du -sh &lt;目录名&gt; \n</code></pre><h3 id=\"查看内存总量\"><a href=\"#查看内存总量\" class=\"headerlink\" title=\"查看内存总量\"></a>查看内存总量</h3><pre><code>grep MemTotal /proc/meminfo \n</code></pre><h3 id=\"查看空闲内存量\"><a href=\"#查看空闲内存量\" class=\"headerlink\" title=\"查看空闲内存量\"></a>查看空闲内存量</h3><pre><code>grep MemFree /proc/meminfo \n</code></pre><h3 id=\"查看系统运行时间、用户数、负载\"><a href=\"#查看系统运行时间、用户数、负载\" class=\"headerlink\" title=\"查看系统运行时间、用户数、负载\"></a>查看系统运行时间、用户数、负载</h3><pre><code> uptime \n\n# cat /proc/loadavg # 查看系统负载\n磁盘和分区\n# mount | column -t # 查看挂接的分区状态\n# fdisk -l # 查看所有分区\n# swapon -s # 查看所有交换分区\n# hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)\n# dmesg | grep IDE # 查看启动时IDE设备检测状况\n网络\n# ifconfig # 查看所有网络接口的属性\n# iptables -L # 查看防火墙设置\n# route -n # 查看路由表\n# netstat -lntp # 查看所有监听端口\n# netstat -antp # 查看所有已经建立的连接\n# netstat -s # 查看网络统计信息\n进程\n# ps -ef # 查看所有进程\n# top # 实时显示进程状态\n用户\n# w # 查看活动用户\n# id &lt;用户名&gt; # 查看指定用户信息\n# last # 查看用户登录日志\n# cut -d: -f1 /etc/passwd # 查看系统所有用户\n# cut -d: -f1 /etc/group # 查看系统所有组\n# crontab -l # 查看当前用户的计划任务\n服务\n# chkconfig --list # 列出所有系统服务\n# chkconfig --list | grep on # 列出所有启动的系统服务\n程序\n# rpm -qa # 查看所有安装的软件包\nlinux常见命令的列表\n系统命令\napropos whatis 显示和word相关的命令。 参见线程安全\nman -t man | ps2pdf - &gt; man.pdf 生成一个PDF格式的帮助文件\nwhich command 显示命令的完整路径名\ntime command 计算命令运行的时间\ntime cat 开始计时. Ctrl-d停止。参见sw\nnice info 运行一个低优先级命令（这里是info）\nrenice 19 -p $$ 使脚本运行于低优先级。用于非交互任务。\n目录操作\ncd - 回到前一目录\ncd 回到用户目录\n(cd dir &amp;&amp; command) 进入目录dir，执行命令command然后回到当前目录\npushd . 将当前目录压入栈，以后你可以使用popd回到此目录\n文件搜索\nalias l=&apos;ls -l --color=auto&apos; 单字符文件列表命令\nls -lrt 按日期显示文件. 参见newest\nls /usr/bin | pr -T9 -W$COLUMNS 在当前终端宽度上打印9列输出\nfind -name &apos;*.[ch]&apos; | xargs grep -E &apos;expr&apos; 在当前目录及其子目录下所有.c和.h文件中寻找&apos;expr&apos;. 参见findrepo\nfind -type f -print0 | xargs -r0 grep -F &apos;example&apos; 在当前目录及其子目录中的常规文件中查找字符串&apos;example&apos;\nfind -maxdepth 1 -type f | xargs grep -F &apos;example&apos; 在当前目录下查找字符串&apos;example&apos;\nfind -maxdepth 1 -type d | while read dir; do echo $dir; echo cmd2; done 对每一个找到的文件执行多个命令(使用while循环)\nfind -type f ! -perm -444 寻找所有不可读的文件(对网站有用)\nfind -type d ! -perm -111 寻找不可访问的目录(对网站有用)\nlocate -r &apos;file[^/]*\\.txt&apos; 使用locate 查找所有符合*file*.txt的文件\nlook reference 在（有序）字典中快速查找\ngrep --color reference /usr/share/dict/words 使字典中匹配的正则表达式高亮\n归档 and compression\ngpg -c file 文件加密\ngpg file.gpg 文件解密\ntar -c dir/ | bzip2 &gt; dir.tar.bz2 将目录dir/压缩打包\nbzip2 -dc dir.tar.bz2 | tar -x 展开压缩包 (对tar.gz文件使用gzip而不是bzip2)\ntar -c dir/ | gzip | gpg -c | ssh user@remote &apos;dd of=dir.tar.gz.gpg&apos; 目录dir/压缩打包并放到远程机器上\nfind dir/ -name &apos;*.txt&apos; | tar -c --files-from=- | bzip2 &gt; dir_txt.tar.bz2 将目录dir/及其子目录下所有.txt文件打包\nfind dir/ -name &apos;*.txt&apos; | xargs cp -a --target-directory=dir_txt/ --parents 将目录dir/及其子目录下所有.txt按照目录结构拷贝到dir_txt/\n( tar -c /dir/to/copy ) | ( cd /where/to/ &amp;&amp; tar -x -p ) 拷贝目录copy/到目录/where/to/并保持文件属性\n( cd /dir/to/copy &amp;&amp; tar -c . ) | ( cd /where/to/ &amp;&amp; tar -x -p ) 拷贝目录copy/下的所有文件到目录/where/to/并保持文件属性\n( tar -c /dir/to/copy ) | ssh -C user@remote &apos;cd /where/to/ &amp;&amp; tar -x -p&apos;  拷贝目录copy/到远程目录/where/to/并保持文件属性\ndd bs=1M if=/dev/sda | gzip | ssh user@remote &apos;dd of=sda.gz&apos; 将整个硬盘备份到远程机器上\nrsync (使用 –dry-run选项进行测试)\nrsync -P rsync://rsync.server.com/path/to/file file 只获取diffs.当下载有问题时可以作多次\nrsync --bwlimit=1000 fromfile tofile 有速度限制的本地拷贝，对I/O有利\nrsync -az -e ssh --delete ~/public_html/ remote.com:&apos;~/public_html&apos; 镜像网站(使用压缩和加密)\nrsync -auz -e ssh remote:/dir/ . &amp;&amp; rsync -auz -e ssh . remote:/dir/ 同步当前目录和远程目录\nssh (安全 Shell)\nssh $USER@$HOST command 在$Host主机上以$User用户运行命令(默认命令为Shell)\nssh -f -Y $USER@$HOSTNAME xeyes 在名为$HOSTNAME的主机上以$USER用户运行GUI命令\nscp -p -r $USER@$HOST: file dir/ 拷贝到$HOST主机$USER&apos;用户的目录下\nssh -g -L 8080:localhost:80 root@$HOST 由本地主机的8080端口转发到$HOST主机的80端口\nssh -R 1434:imap:143 root@$HOST 由主机的1434端口转发到imap的143端口\nwget (多用途下载工具)\n(cd cmdline &amp;&amp; wget -nd -pHEKk http://www.pixelbeat.org/cmdline.html) 在当前目录中下载指定网页及其相关的文件使其可完全浏览\nwget -c http://www.example.com/large.file 继续上次未完的下载\nwget -r -nd -np -l1 -A &apos;*.jpg&apos; http://www.example.com/ 批量下载文件到当前目录中\nwget ftp://remote/file[1-9].iso/ 下载FTP站上的整个目录\nwget -q -O- http://www.pixelbeat.org/timeline.html | grep &apos;a href&apos; | head 直接处理输出\necho &apos;wget url&apos; | at 01:00 在下午一点钟下载指定文件到当前目录\nwget --limit-rate=20k url 限制下载速度(这里限制到20KB/s)\nwget -nv --spider --force-html -i bookmarks.html 检查文件中的链接是否存在\nwget --mirror http://www.example.com/ 更新网站的本地拷贝(可以方便地用于cron)\n网络(ifconfig, route, mii-tool, nslookup 命令皆已过时)\nethtool eth0 显示网卡eth0的状态\nethtool --change eth0 autoneg off speed 100 duplex full 手动设制网卡速度\niwconfig eth1 显示无线网卡eth1的状态\niwconfig eth1 rate 1Mb/s fixed 手动设制无线网卡速度\niwlist scan 显示无线网络列表\nip link show 显示interface列表\nip link set dev eth0 name wan 重命名eth0为wan\nip link set dev eth0 up 启动interface eth0(或关闭)\nip addr show 显示网卡的IP地址\nip addr add 1.2.3.4/24 brd + dev eth0 添加ip和掩码(255.255.255.0)\nip route show 显示路由列表\nip route add default via 1.2.3.254 设置默认网关1.2.3.254\ntc qdisc add dev lo root handle 1:0 netem delay 20msec 增加20ms传输时间到loopback设备(调试用)\ntc qdisc del dev lo root 移除上面添加的传输时间\nhost pixelbeat.org 查寻主机的DNS IP地址\nhostname -i 查寻本地主机的IP地址(同等于host `hostname`)\nwhois pixelbeat.org 查寻某主机或莫IP地址的whois信息\nnetstat -tupl 列出系统中的internet服务\nnetstat -tup 列出活跃的连接\nwindows networking (samba提供所有windows相关的网络支持)\nsmbtree 寻找一个windows主机. 参见findsmb\nnmblookup -A 1.2.3.4 寻找一个指定ip的windows (netbios)名\nsmbclient -L windows_box 显示在windows主机或samba服务器上的所有共享\nmount -t smbfs -o fmask=666,guest //windows_box/share /mnt/share 挂载一个windows共享\necho &apos;message&apos; | smbclient -M windows_box 发送一个弹出信息到windows主机(XP sp2默认关闭此功能)\n文本操作 (sed使用标准输入和标准输出，如果想要编辑文件，则需添加&lt;oldfile &gt;newfile)\nsed &apos;s/string1/string2/g&apos; 使用string2替换string1\nsed &apos;s/\\(.*\\)1/\\12/g&apos; 将任何以1结尾的字符串替换为以2结尾的字符串\nsed &apos;/ *#/d; /^ *$/d&apos; 删除注释和空白行\nsed &apos;:a; /\\\\$/N; s/\\\\\\n//; ta&apos; 连接结尾有\\的行和其下一行\nsed &apos;s/[ \\t]*$//&apos; 删除每行后的空白\nsed &apos;s/\\([\\\\`\\\\&quot;$\\\\\\\\]\\)/\\\\\\1/g&apos; 将所有转义字符之前加上\\\nseq 10 | sed &quot;s/^/      /; s/ *\\(.\\{7,\\}\\)/\\1/&quot; 向右排N(任意数)列\nsed -n &apos;1000p;1000q&apos; 输出第一千行\nsed -n &apos;10,20p;20q&apos; 输出第10-20行\nsed -n &apos;s/.*&lt;title&gt;\\(.*\\)&lt;\\/title&gt;.*/\\1/ip;T;q&apos; 输出HTML文件的&lt;title&gt;&lt;/title&gt;字段中的 内容\nsort -t. -k1,1n -k2,2n -k3,3n -k4,4n 排序IPV4地址\necho &apos;Test&apos; | tr &apos;[:lower:]&apos; &apos;[:upper:]&apos; 转换成大写\ntr -dc &apos;[:print:]&apos; &lt; /dev/urandom 过滤掉不能打印的字符\nhistory | wc -l 计算指定单词出现的次数\n集合操作 (如果是英文文本的话export LANG=C可以提高速度)\nsort file1 file2 | uniq 两个未排序文件的并集\nsort file1 file2 | uniq -d 两个未排序文件的交集\nsort file1 file1 file2 | uniq -u 两个未排序文件的差 集\nsort file1 file2 | uniq -u 两个未排序文件的对称差集\njoin -a1 -a2 file1 file2 两个有序文件的并集\njoin file1 file2 两个有序文件的交集\njoin -v2 file1 file2 两个有序文件的差集\njoin -v1 -v2 file1 file2 两个有序文件的对称差集\n数学\necho &apos;(1 + sqrt(5))/2&apos; | bc -l 方便的计算器(计算 φ)\necho &apos;pad=20; min=64; (100*10^6)/(pad+min)*8)&apos; | bc 更复杂地计算，这里计算了最大的FastE包率\necho &apos;pad=20; min=64; print (100E6)/(pad+min)*8)&apos; | python Python处理数值的科学表示法\necho &apos;pad=20; plot [64:1518] (100*10**6)/(pad+x)*8)&apos; | gnuplot -persist 显示FastE包率相对于包大小的图形\necho &apos;obase=16; ibase=10; 64206&apos; | bc 进制转换(十进制到十六进制)\necho $((0x2dec)) 进制转换(十六进制到十进制)(shell数学扩展)\nunits -t &apos;100m/9.69s&apos; &apos;miles/hour&apos; 单位转换(公尺到英尺)\nunits -t &apos;500GB&apos; &apos;GiB&apos; 单位转换(SI 到IEC 前缀)\nunits -t &apos;1 googol&apos; 定义查找\nseq 100 | (tr &apos;\\n&apos; +; echo 0) | bc 加N(任意数)列. 参见 add and funcpy\n日历\ncal -3 显示一日历\ncal 9 1752 显示指定月，年的日历\ndate -d fri 这个星期五是几号. 参见day\ndate --date=&apos;25 Dec&apos; +%A 今年的圣诞节是星期几\ndate --date &apos;1970-01-01 UTC 2147483647 seconds&apos; 将一相对于1970-01-01 00：00的秒数转换成时间\nTZ=&apos;:America/Los_Angeles&apos; date 显示当前的美国西岸时间(使用tzselect寻找时区)\necho &quot;mail -s &apos;get the train&apos; P@draigBrady.com &lt; /dev/null&quot; | at 17:45 在指定的时间发送邮件\necho &quot;DISPLAY=$DISPLAY xmessage cooker&quot; | at &quot;NOW + 30 minutes&quot; 在给定的时间弹出对话框\nlocales\nprintf &quot;%&apos;d\\n&quot; 1234 根据locale输出正确的数字分隔\nBLOCK_SIZE=\\&apos;1 ls -l 用ls命令作类适于locale()文件分组\necho &quot;I live in `locale territory`&quot; 从locale数据库中展开信息\nLANG=en_IE.utf8 locale int_prefix 查找指定地区的locale信息。参见ccodes\nlocale | cut -d= -f1 | xargs locale -kc | less 显示在locale数据库中的所有字段\nrecode (iconv, dos2unix, unix2dos 已经过时了)\nrecode -l | less 显示所有有效的字符集及其别名\nrecode windows-1252.. file_to_change.txt 转换Windows下的ansi文件到当前的字符集(自动进行回车换行符的转换)\nrecode utf-8/CRLF.. file_to_change.txt 转换Windows下的ansi文件到当前的字符集\nrecode iso-8859-15..utf8 file_to_change.txt 转换Latin9（西欧）字符集文件到utf8\nrecode ../b64 &lt; file.txt &gt; file.b64 Base64编码\nrecode /qp.. &lt; file.txt &gt; file.qp Quoted-printable格式解码\nrecode ..HTML &lt; file.txt &gt; file.html 将文本文件转换成HTML\nrecode -lf windows-1252 | grep euro 在字符表中查找欧元符号\necho -n 0x80 | recode latin-9/x1..dump 显示字符在latin-9中的字符映射\necho -n 0x20AC | recode ucs-2/x2..latin-9/x 显示latin-9编码\necho -n 0x20AC | recode ucs-2/x2..utf-8/x 显示utf-8编码\n光盘\ngzip &lt; /dev/cdrom &gt; cdrom.iso.gz 保存光盘拷贝\nmkisofs -V LABEL -r dir | gzip &gt; cdrom.iso.gz 建立目录dir的光盘镜像\nmount -o loop cdrom.iso /mnt/dir 将光盘镜像挂载到 /mnt/dir (只读)\ncdrecord -v dev=/dev/cdrom blank=fast 清空一张CDRW\ngzip -dc cdrom.iso.gz | cdrecord -v dev=/dev/cdrom - 烧录光盘镜像 (使用 dev=ATAPI -scanbus 来确认该使用的 dev)\ncdparanoia -B 在当前目录下将光盘音轨转录成wav文件\ncdrecord -v dev=/dev/cdrom -audio *.wav 将当前目录下的wav文件烧成音乐光盘 (参见cdrdao)\noggenc --tracknum=&apos;track&apos; track.cdda.wav -o &apos;track.ogg&apos; 将wav文件转换成ogg格式\n磁盘空间 (参见FSlint)\nls -lSr 按文件大小降序显示文件\ndu -s * | sort -k1,1rn | head 显示当前目录下占用空间最大的一批文件. 参见dutop\ndf -h 显示空余的磁盘空间\ndf -i 显示空余的inode\nfdisk -l 显示磁盘分区大小和类型（在root下执行）\nrpm -q -a --qf &apos;%10{SIZE}\\t%{NAME}\\n&apos; | sort -k1,1n 显示所有在rpm发布版上安装的包，并以包字节大小为序\ndpkg-query -W -f=&apos;${Installed-Size;10}\\t${Package}\\n&apos; | sort -k1,1n 显示所有在deb发布版上安装的包，并以KB包大小为序\ndd bs=1 seek=2TB if=/dev/null of=ext3.test 建立一个大的测试文件（不占用空间）. 参见truncate\n监视/调试\ntail -f /var/log/messages 监视Messages日志文件\nstrace -c ls &gt;/dev/null 总结/剖析命令进行的系统调用\nstrace -f -e open ls &gt;/dev/null 显示命令进行的系统调用\nltrace -f -e getenv ls &gt;/dev/null 显示命令调用的库函数\nlsof -p $$ 显示当前进程打开的文件\nlsof ~ 显示打开用户目录的进程\ntcpdump not port 22 显示除了ssh外的网络交通. 参见tcpdump_not_me\nps -e -o pid,args --forest 以树状结构显示进程\nps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed &apos;/^ 0.0 /d&apos; 以CPU占用率为序显示进程\nps -e -orss=,args= | sort -b -k1,1n | pr -TW$COLUMNS 以内存使用量为序显示进程. 参见ps_mem.py\nps -C firefox-bin -L -o pid,tid,pcpu,state 显示指定进程的所有线程信息\nps -p 1,2 显示指定进程ID的进程信息\nlast reboot 显示系统重启记录\nfree -m 显示(剩余的)内存总量(-m以MB为单位显示)\nwatch -n.1 &apos;cat /proc/interrupts&apos; 监测文件/proc/interrupts的变化\n系统信息 (参见sysinfo)\nuname -a 查看内核/操作系统/CPU信息\nhead -n1 /etc/issue 查看操作系统版本\ncat /proc/partitions 显示所有在系统中注册的分区\ngrep MemTotal /proc/meminfo 显示系统可见的内存总量\ngrep &quot;model name&quot; /proc/cpuinfo 显示CPU信息\nlspci -tv 显示PCI信息\nlsusb -tv 显示USB信息\nmount | column -t 显示所有挂载的文件系统并对齐输出\ndmidecode -q | less 显示SMBIOS/DMI 信息\nsmartctl -A /dev/sda | grep Power_On_Hours 系统开机的总体时间\nhdparm -i /dev/sda 显示关于磁盘sda的信息\nhdparm -tT /dev/sda 检测磁盘sda的读取速度\nbadblocks -s /dev/sda 检测磁盘sda上所有的坏扇区\n\n===== 交互 (参见linux keyboard shortcut database) =====\n\nreadline Line editor used by bash, python, bc, gnuplot, ...\nscreen 多窗口的虚拟终端, ...\nmc 强大的文件管理器，可以浏览rpm, tar, ftp, ssh, ...\ngnuplot 交互式并可进行脚本编程的画图工具\nlinks 网页浏览器\nmiscellaneous\nalias hd=&apos;od -Ax -tx1z -v&apos; 方便的十六进制输出。 (用法举例: ? hd /proc/self/cmdline | less)\nalias realpath=&apos;readlink -f&apos; 显示符号链接指向的真实路径(用法举例: ? realpath ~/../$USER)\nset | grep $USER 在当前环境中查找\ntouch -c -t 0304050607 file 改变文件的时间标签 (YYMMDDhhmm)\npython -m SimpleHTTPServer Serve current directory tree at http://$HOSTNAME:8000/\n\nlinux下实时查看tomcat运行日志\n1、先切换到：cd usr/local/tomcat5/logs\n2、tail -f catalina.out\n3、这样运行时就可以实时查看运行日志了\n\n添加防火墙的端口\n1，修改添加\nvi /etc/sysconfig/iptables\n2， 添加\n3，service iptables stop\n4， service iptables start\n\nlinux源码安装\n1， ./configure\n2. make\n3, make install\n</code></pre>"},{"title":"mysql","date":"2016-10-10T06:12:47.000Z","description":"mysql命令 时间相关查询技巧  --  【SQL之查询】MySQL查询今天、昨天、上周、近30天、去年等的数据的方法 http://blog.csdn.net/cangchen/article/details/44978531","_content":"\n\n## 一、MySQL查询今天、昨天、上周、近30天、去年等的数据的方法：\n删除建立时间超过3天的订单记录\ndelete 订单表 where datediff( dd, order_addtime, getdate() ) > 3 用函数datediff() datediff( dd, 时间1, 时间2 )，意思是：计算时间1到时间2之间的天数 所以，datediff( dd, order_addtime, getdate() ) > 3，就是超过3天的\n### 今天  \n\tselect * from 表名 where to_days(时间字段名) = to_days(now());  \n### 昨天  \n\tSELECT * FROM 表名 WHERETO_DAYS(NOW( ) ) - TO_DAYS( 时间字段名) <= 1  \n### 近7天  \n\tSELECT * FROM 表名 whereDATE_SUB(CURDATE(), INTERVAL 7 DAY) <=date(时间字段名)  \n### 近30天  \n\tSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) <=date(时间字段名)  \n### 本月  \n\tSELECT * FROM 表名 WHEREDATE_FORMAT( 时间字段名, '%Y%m' ) =DATE_FORMAT( CURDATE( ) , '%Y%m' )  \n### 上一月  \n\tSELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , '%Y%m' ) , date_format( 时间字段名, '%Y%m' ) ) =1  \n### 查询本季度数据  \n\tselect * from `ht_invoice_information` whereQUARTER(create_date)=QUARTER(now());\n### 查询上季度数据  \n\tselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));  \n### 查询本年数据  \n\tselect * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());  \n### 查询上年数据  \n\tselect * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));  \n### 查询当前这周的数据   \n\tSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now());  \n### 查询上周的数据  \n\tSELECT name,submittime FROM enterprise WHEREYEARWEEK(date_format(submittime,'%Y-%m-%d')) =YEARWEEK(now())-1;  \n### 查询当前月份的数据  \n\tselect name,submittime from enterprise   where date_format(submittime,'%Y-%m')=date_format(now(),'%Y-%m')  \n### 查询距离当前现在6个月的数据  \n\tselect name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();    \n### 查询上个月的数据\n\tselect name,submittime from enterprise   where date_format(submittime,'%Y-%m')=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m')  \n\tselect * from ` user ` where DATE_FORMAT(pudate, ' %Y%m ' ) = DATE_FORMAT(CURDATE(), ' %Y%m ' ) ;  \n\tselect * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = WEEKOFYEAR(now())  \n\tselect *   \n\tfrom user\n\twhere MONTH (FROM_UNIXTIME(pudate, ' %y-%m-%d ' )) = MONTH (now())  \n\tselect *   \n\tfrom [ user ]   \n\twhere YEAR (FROM_UNIXTIME(pudate, ' %y-%m-%d ' )) = YEAR (now())  \n\tand MONTH (FROM_UNIXTIME(pudate, ' %y-%m-%d ' )) = MONTH (now())  \n\tselect *   \n\tfrom [ user ]   \n\twhere pudate between 上月最后一天  \n\tand 下月第一天  \n\twhere date(regdate)   =   curdate();  \n\tselect   *   from   test   where year(regdate)=year(now())   and month(regdate)=month(now())   and day(regdate)=day(now())  \n\tSELECT date( c_instime ) ,curdate( )  \n\tFROM `t_score`  \n\tWHERE 1  \n\tLIMIT 0 , 30 \n\n## 二、相关函数简介\n### 1、Sql server中DateDiff()用法\nDATEDIFF 函数 [日期和时间]\n功能 \n返回两个日期之间的间隔。\n语法 \n\n\tDATEDIFF ( date-part, date-expression-1, date-expression-2 )\n\tdate-part :\n\tyear | quarter | month | week | day | hour | minute | second | millisecond\n参数 \ndate-part    指定要测量其间隔的日期部分。\n\n有关日期部分的详细信息，请参见日期部分。\n\ndate-expression-1    某一间隔的起始日期。从 date-expression-2 中减去该值，返回两个参数之间 date-parts 的天数。\n\ndate-expression-2    某一间隔的结束日期。从该值中减去 Date-expression-1，返回两个参数之间 date-parts 的天数。\n用法 \n\n此函数计算两个指定日期之间日期部分的数目。结果为日期部分中等于（date2 - date1）的有符号的整数值。\n\n当结果不是日期部分的偶数倍时，DATEDIFF 将被截断而不是被舍入。\n\n当使用 day 作为日期部分时，DATEDIFF 返回两个指定的时间之间（包括第二个日期但不包括第一个日期）的午夜数。\n\n当使用 month 作为日期部分时，DATEDIFF 返回两个日期之间（包括第二个日期但不包括第一个日期）出现的月的第一天的数目。\n\n当使用 week 作为日期部分时，DATEDIFF 返回两个日期（包括第二个日期但不包括第一个日期）之间星期日的数目。\n\n对于更小的时间单位存在溢出值：\n\nmilliseconds    24 天\nseconds    68 年\nminutes    4083 年\nothers    没有溢出限制\n\n如果超出这些限制，此函数将返回溢出错误。\n标准和兼容性 \n\nSQL/92    Transact-SQL 扩展。\nSQL/99    Transact-SQL 扩展。\nSybase    与 Adaptive Server Enterprise 兼容。\n\n下面示例的语句返回 1：\n\n\tSELECT datediff( hour, '4:00AM', '5:50AM' )下面的语句返回 102：\n\tSELECT datediff( month, '1987/05/02', '1995/11/15' )下面的语句返回 0：\n\tSELECT datediff( day, '00:00', '23:59' )下面的语句返回 4：\n\tSELECT datediff( day,\n\t   '1999/07/19 00:00',\n\t   '1999/07/23 23:59' )下面的语句返回 0：\n\tSELECT datediff( month, '1999/07/19', '1999/07/23' )下面的语句返回 1：\n\tSELECT datediff( month, '1999/07/19', '1999/08/23' )\n\n### 2、MySQLDATE_SUB()函数\nMySQL Date 函数\n定义和用法\nDATE_SUB() 函数从日期减去指定的时间间隔。\n语法\n\n\tDATE_SUB(date,INTERVAL expr type)\ndate 参数是合法的日期表达式。expr 参数是您希望添加的时间间隔。\n\ntype 参数可以是下列值：\n<table>\n<tr><th>Type 值</th></tr>\n<tr><td>MICROSECOND</td></tr>\n<tr><td>SECOND</td></tr>\n<tr><td>MINUTE</td></tr>\n<tr><td>HOUR\nDAY</td></tr>\n<tr><td>WEEK</td></tr>\n<tr><td>MONTH</td></tr>\n<tr><td>QUARTER</td></tr>\n<tr><td>YEAR</td></tr>\n<tr><td>SECOND_MICROSECOND</td></tr>\n<tr><td>MINUTE_MICROSECOND</td></tr>\n<tr><td>MINUTE_SECOND</td></tr>\n<tr><td>HOUR_MICROSECOND</td></tr>\n<tr><td>HOUR_SECOND</td></tr>\n<tr><td>HOUR_MINUTE</td></tr>\n<tr><td>DAY_MICROSECOND</td></tr>\n<tr><td>DAY_SECOND</td></tr>\n<tr><td>DAY_MINUTE</td></tr>\n<tr><td>DAY_HOUR</td></tr>\n<tr><td>YEAR_MONTH</td></tr>\n</table>\n\n实例\n\n假设我们有如下的表：\n<table>\n<tr><th>OrderId</th><th>ProductName</th><th>OrderDate</th></tr>\n<tr><td>1</td><td>'Computer'</td><td>2008-12-29 16:25:46.635</td></tr>\n</table>\n\n现在，我们希望从 \"OrderDate\" 减去 2 天。\n我们使用下面的 SELECT 语句：\n\n\tSELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate\n\tFROM Orders\n\n结果：\n<table>\n<tr><th>OrderId</th><th>OrderPayDate</th></tr>\n<tr><td>1</td><td>2008-12-27 16:25:46.635</td></tr>\n</table>\n\n 例2.\n\n\tSELECT DATE_SUB('2010-08-12', INTERVAL '3-2' YEAR_MONTH) AS NewDate  \n   结果：2007-06-12\n\n  例3.\n\n\tSELECT DATE_SUB('2011-09-14 2:44:36', INTERVAL '2:26' HOUR_MINUTE) AS NewDate  \n   结果： 2011-09-1400:18:36\n\n### 3、TO_DAYS(date)\n给定一个日期date, 返回一个天数 (从年份0000-00-00开始的天数 )。\n\n 例：\n\n\tselect TO_DAYS(NOW());\n\t+----------------+\n\t| TO_DAYS(NOW()) |\n\t+----------------+\n\t| 735159 |\n\t+----------------+\n\tselect TO_DAYS(121018);\n\t+-----------------+\n\t| TO_DAYS(121018) |\n\t+-----------------+\n\t| 735159 |\n\t+-----------------+\n\n给定一个日期date，返回一个天数（从年份0开始的天数）。\nTO_DAYS() 不用于阳历出现(1582)前的值，原因是当日历改变时，遗失的日期不会被考虑在内。\n请记住， MySQL“日期和时间类型”中的规则将日期中的二位数年份值转化为四位。例如，  ‘1997-10-07′和 ‘97-10-07′ 被视为同样的日期:\n对于1582 年之前的日期(或许在其它地区为下一年 ), 该函数的结果实不可靠的。\n\n\n### 4、MySQL DATE() 函数\nMySQL Date 函数\n\n定义和用法\n\nDATE() 函数返回日期或日期/时间表达式的日期部分。\n\n实例\n\n假设我们有如下的表：\n<table>\n<tr><th>OrderId</th><th>ProductName</th><th>OrderDate</th></tr>\n<tr><td>1</td><td>'Computer'</td><td>2008-12-29 16:25:46.635</td></tr>\n</table>\n\n我们使用下面的 SELECT 语句：\n\n\tSELECT ProductName, DATE(OrderDate) AS OrderDate\n\tFROM Orders\n\tWHERE OrderId=1\n\n结果：\n<table>\n<tr><th>ProductName</th><th>OrderDate</th></tr>\n<tr><td>'Computer'</td><td>2008-12-29</td></tr>\n</table>\n\n### 5、MySQL NOW() 函数\n\nMySQL Date 函数\n\n定义和用法\n\nNOW() 函数返回当前的日期和时间。\n\n语法\n\nNOW()\n\n实例\n\n例子 1\n\n下面是 SELECT 语句：\n\n\tSELECT NOW(),CURDATE(),CURTIME()\n\n结果类似：\n\n<table>\n<tr><th>NOW()</th><th>CURDATE()</th><th>CURTIME()</th></tr>\n<tr><td>2008-12-29 16:25:46</td><td>2008-12-29</td><td>16:25:46</td></tr>\n</table>\n\n例子 2\n\n下面的 SQL 创建带有日期时间列 (OrderDate) 的 \"Orders\" 表：\n\n\tCREATE TABLE Orders \n\t(\n\tOrderId int NOT NULL,\n\tProductName varchar(50) NOT NULL,\n\tOrderDate datetime NOT NULL DEFAULT NOW(),\n\tPRIMARY KEY (OrderId)\n\t)\n\n请注意，OrderDate 列规定 NOW() 作为默认值。作为结果，当您向表中插入行时，当前日期和时间自动插入列中。\n现在，我们希望在 \"Orders\" 表中插入一条新记录：\n\n\tINSERT INTO Orders (ProductName) VALUES ('Computer')\n\n\"Orders\" 表将类似这样：\n\n<table>\n<tr><th>OrderId</th><th>ProductName</th><th>OrderDate/th></tr>\n<tr><td>1</td><td>'Computer'</td><td>2008-12-29 16:25:46.635</td></tr>\n</table>\n\n\n### 6、MySQL DATE_FORMAT() 函数\n\nMySQL Date 函数\n\n定义和用法\n\nDATE_FORMAT() 函数用于以不同的格式显示日期/时间数据。\n\n语法\n\nDATE_FORMAT(date,format)\n\ndate 参数是合法的日期。format 规定日期/时间的输出格式。\n可以使用的格式有：\n\n\t格式 描述\n\t%a 缩写星期名\n\t%b 缩写月名\n\t%c 月，数值\n\t%D 带有英文前缀的月中的天\n\t%d 月的天，数值(00-31)\n\t%e 月的天，数值(0-31)\n\t%f 微秒\n\t%H 小时 (00-23)\n\t%h 小时 (01-12)\n\t%I 小时 (01-12)\n\t%i 分钟，数值(00-59)\n\t%j 年的天 (001-366)\n\t%k 小时 (0-23)\n\t%l 小时 (1-12)\n\t%M 月名\n\t%m 月，数值(00-12)\n\t%p AM 或 PM\n\t%r 时间，12-小时（hh:mm:ss AM 或 PM）\n\t%S 秒(00-59)\n\t%s 秒(00-59)\n\t%T 时间, 24-小时 (hh:mm:ss)\n\t%U 周 (00-53) 星期日是一周的第一天\n\t%u 周 (00-53) 星期一是一周的第一天\n\t%V 周 (01-53) 星期日是一周的第一天，与 %X 使用\n\t%v 周 (01-53) 星期一是一周的第一天，与 %x 使用\n\t%W 星期名\n\t%w 周的天 （0=星期日, 6=星期六）\n\t%X 年，其中的星期日是周的第一天，4 位，与 %V 使用\n\t%x 年，其中的星期一是周的第一天，4 位，与 %v 使用\n\t%Y 年，4 位\n\t%y 年，2 位\n\n实例\n\n下面的脚本使用 DATE_FORMAT() 函数来显示不同的格式。我们使用 NOW() 来获得当前的日期/时间：\n\t\n\tDATE_FORMAT(NOW(),'%b %d %Y %h:%i %p')\n\tDATE_FORMAT(NOW(),'%m-%d-%Y')\n\tDATE_FORMAT(NOW(),'%d %b %y')\n\tDATE_FORMAT(NOW(),'%d %b %Y %T:%f')\n\n结果类似：\n\n\tDec 29 2008 11:45 PM\n\t12-29-2008\n\t29 Dec 08\n\t29 Dec 2008 16:25:46.635\n\n### 7、MySQL获取季度的函数QUARTER(d)\n\nQUARTER(d)函数返回日期d是一年中的第几季度。值的范围是1～4。\n\n实例\n\n使用QUARTER()函数返回指定日期对应的季度。SQL语句如下：\n\n\tmysql>SELECT QUARTER('14-09-29');\n\n执行结果如下：\n![](https://i.imgur.com/L2TXznO.gif)\n从上图中代码执行的结果可以看出，14年9月29日是2014年的第3个季度。\n\n--------------------------------------------------------------------------------\n提示\n\n“00～69”转换为“2000～2069”，“70～99”转换为“1970～1999”。\n\n\n### 8、MySQL 的 YEARWEEK()函数：\n\n它是获取年份和周数的一个函数，\n函数形式为 \n\n\tYEARWEEK(date[,mode])\n\n例如 2010-3-14 ，礼拜天\n\n\tSELECT YEARWEEK('2010-3-14') \n返回\n 11\n\n\tSELECT YEARWEEK('2010-3-14',1) \n返回\n 10\n\n其中第二个参数是 mode ，具体指的意思如下：\n\n\tMode | First day of week  | Range |  Week 1 is the first week …\n\t0 \t\t\tSunday\t \t\t0-53 \twith a Sunday in this year\n\t1 \t\t\tMonday \t\t\t0-53 \twith more than 3 days this year\n\t2 \t\t\tSunday \t\t\t1-53 \twith a Sunday in this year\n\t3 \t\t\tMonday \t\t\t1-53 \twith more than 3 days this year\n\t4 \t\t\tSunday \t\t\t0-53 \twith more than 3 days this year\n\t5 \t\t\tMonday \t\t\t0-53 \twith a Monday in this year\n\t6 \t\t\tSunday \t\t\t1-53 \twith more than 3 days this year\n\t7 \t\t\tMonday \t\t\t1-53 \twith a Monday in this year\n\n多字段去重查询\n\n\twhere concat(`字段1`, `字段2`, `字段3`,...) like ...\n\n查看mysql安装目录\n\n\tselect @@basedir as basePath from dual\n\n","source":"_posts/mysql.md","raw":"---\ntitle: mysql\ndate: 2016-10-10 14:12:47\ntags: mysql\ncategories:  数据库\ndescription: 'mysql命令 时间相关查询技巧  --  【SQL之查询】MySQL查询今天、昨天、上周、近30天、去年等的数据的方法\nhttp://blog.csdn.net/cangchen/article/details/44978531'\n\n---\n\n\n## 一、MySQL查询今天、昨天、上周、近30天、去年等的数据的方法：\n删除建立时间超过3天的订单记录\ndelete 订单表 where datediff( dd, order_addtime, getdate() ) > 3 用函数datediff() datediff( dd, 时间1, 时间2 )，意思是：计算时间1到时间2之间的天数 所以，datediff( dd, order_addtime, getdate() ) > 3，就是超过3天的\n### 今天  \n\tselect * from 表名 where to_days(时间字段名) = to_days(now());  \n### 昨天  \n\tSELECT * FROM 表名 WHERETO_DAYS(NOW( ) ) - TO_DAYS( 时间字段名) <= 1  \n### 近7天  \n\tSELECT * FROM 表名 whereDATE_SUB(CURDATE(), INTERVAL 7 DAY) <=date(时间字段名)  \n### 近30天  \n\tSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) <=date(时间字段名)  \n### 本月  \n\tSELECT * FROM 表名 WHEREDATE_FORMAT( 时间字段名, '%Y%m' ) =DATE_FORMAT( CURDATE( ) , '%Y%m' )  \n### 上一月  \n\tSELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , '%Y%m' ) , date_format( 时间字段名, '%Y%m' ) ) =1  \n### 查询本季度数据  \n\tselect * from `ht_invoice_information` whereQUARTER(create_date)=QUARTER(now());\n### 查询上季度数据  \n\tselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));  \n### 查询本年数据  \n\tselect * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());  \n### 查询上年数据  \n\tselect * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));  \n### 查询当前这周的数据   \n\tSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now());  \n### 查询上周的数据  \n\tSELECT name,submittime FROM enterprise WHEREYEARWEEK(date_format(submittime,'%Y-%m-%d')) =YEARWEEK(now())-1;  \n### 查询当前月份的数据  \n\tselect name,submittime from enterprise   where date_format(submittime,'%Y-%m')=date_format(now(),'%Y-%m')  \n### 查询距离当前现在6个月的数据  \n\tselect name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();    \n### 查询上个月的数据\n\tselect name,submittime from enterprise   where date_format(submittime,'%Y-%m')=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m')  \n\tselect * from ` user ` where DATE_FORMAT(pudate, ' %Y%m ' ) = DATE_FORMAT(CURDATE(), ' %Y%m ' ) ;  \n\tselect * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = WEEKOFYEAR(now())  \n\tselect *   \n\tfrom user\n\twhere MONTH (FROM_UNIXTIME(pudate, ' %y-%m-%d ' )) = MONTH (now())  \n\tselect *   \n\tfrom [ user ]   \n\twhere YEAR (FROM_UNIXTIME(pudate, ' %y-%m-%d ' )) = YEAR (now())  \n\tand MONTH (FROM_UNIXTIME(pudate, ' %y-%m-%d ' )) = MONTH (now())  \n\tselect *   \n\tfrom [ user ]   \n\twhere pudate between 上月最后一天  \n\tand 下月第一天  \n\twhere date(regdate)   =   curdate();  \n\tselect   *   from   test   where year(regdate)=year(now())   and month(regdate)=month(now())   and day(regdate)=day(now())  \n\tSELECT date( c_instime ) ,curdate( )  \n\tFROM `t_score`  \n\tWHERE 1  \n\tLIMIT 0 , 30 \n\n## 二、相关函数简介\n### 1、Sql server中DateDiff()用法\nDATEDIFF 函数 [日期和时间]\n功能 \n返回两个日期之间的间隔。\n语法 \n\n\tDATEDIFF ( date-part, date-expression-1, date-expression-2 )\n\tdate-part :\n\tyear | quarter | month | week | day | hour | minute | second | millisecond\n参数 \ndate-part    指定要测量其间隔的日期部分。\n\n有关日期部分的详细信息，请参见日期部分。\n\ndate-expression-1    某一间隔的起始日期。从 date-expression-2 中减去该值，返回两个参数之间 date-parts 的天数。\n\ndate-expression-2    某一间隔的结束日期。从该值中减去 Date-expression-1，返回两个参数之间 date-parts 的天数。\n用法 \n\n此函数计算两个指定日期之间日期部分的数目。结果为日期部分中等于（date2 - date1）的有符号的整数值。\n\n当结果不是日期部分的偶数倍时，DATEDIFF 将被截断而不是被舍入。\n\n当使用 day 作为日期部分时，DATEDIFF 返回两个指定的时间之间（包括第二个日期但不包括第一个日期）的午夜数。\n\n当使用 month 作为日期部分时，DATEDIFF 返回两个日期之间（包括第二个日期但不包括第一个日期）出现的月的第一天的数目。\n\n当使用 week 作为日期部分时，DATEDIFF 返回两个日期（包括第二个日期但不包括第一个日期）之间星期日的数目。\n\n对于更小的时间单位存在溢出值：\n\nmilliseconds    24 天\nseconds    68 年\nminutes    4083 年\nothers    没有溢出限制\n\n如果超出这些限制，此函数将返回溢出错误。\n标准和兼容性 \n\nSQL/92    Transact-SQL 扩展。\nSQL/99    Transact-SQL 扩展。\nSybase    与 Adaptive Server Enterprise 兼容。\n\n下面示例的语句返回 1：\n\n\tSELECT datediff( hour, '4:00AM', '5:50AM' )下面的语句返回 102：\n\tSELECT datediff( month, '1987/05/02', '1995/11/15' )下面的语句返回 0：\n\tSELECT datediff( day, '00:00', '23:59' )下面的语句返回 4：\n\tSELECT datediff( day,\n\t   '1999/07/19 00:00',\n\t   '1999/07/23 23:59' )下面的语句返回 0：\n\tSELECT datediff( month, '1999/07/19', '1999/07/23' )下面的语句返回 1：\n\tSELECT datediff( month, '1999/07/19', '1999/08/23' )\n\n### 2、MySQLDATE_SUB()函数\nMySQL Date 函数\n定义和用法\nDATE_SUB() 函数从日期减去指定的时间间隔。\n语法\n\n\tDATE_SUB(date,INTERVAL expr type)\ndate 参数是合法的日期表达式。expr 参数是您希望添加的时间间隔。\n\ntype 参数可以是下列值：\n<table>\n<tr><th>Type 值</th></tr>\n<tr><td>MICROSECOND</td></tr>\n<tr><td>SECOND</td></tr>\n<tr><td>MINUTE</td></tr>\n<tr><td>HOUR\nDAY</td></tr>\n<tr><td>WEEK</td></tr>\n<tr><td>MONTH</td></tr>\n<tr><td>QUARTER</td></tr>\n<tr><td>YEAR</td></tr>\n<tr><td>SECOND_MICROSECOND</td></tr>\n<tr><td>MINUTE_MICROSECOND</td></tr>\n<tr><td>MINUTE_SECOND</td></tr>\n<tr><td>HOUR_MICROSECOND</td></tr>\n<tr><td>HOUR_SECOND</td></tr>\n<tr><td>HOUR_MINUTE</td></tr>\n<tr><td>DAY_MICROSECOND</td></tr>\n<tr><td>DAY_SECOND</td></tr>\n<tr><td>DAY_MINUTE</td></tr>\n<tr><td>DAY_HOUR</td></tr>\n<tr><td>YEAR_MONTH</td></tr>\n</table>\n\n实例\n\n假设我们有如下的表：\n<table>\n<tr><th>OrderId</th><th>ProductName</th><th>OrderDate</th></tr>\n<tr><td>1</td><td>'Computer'</td><td>2008-12-29 16:25:46.635</td></tr>\n</table>\n\n现在，我们希望从 \"OrderDate\" 减去 2 天。\n我们使用下面的 SELECT 语句：\n\n\tSELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate\n\tFROM Orders\n\n结果：\n<table>\n<tr><th>OrderId</th><th>OrderPayDate</th></tr>\n<tr><td>1</td><td>2008-12-27 16:25:46.635</td></tr>\n</table>\n\n 例2.\n\n\tSELECT DATE_SUB('2010-08-12', INTERVAL '3-2' YEAR_MONTH) AS NewDate  \n   结果：2007-06-12\n\n  例3.\n\n\tSELECT DATE_SUB('2011-09-14 2:44:36', INTERVAL '2:26' HOUR_MINUTE) AS NewDate  \n   结果： 2011-09-1400:18:36\n\n### 3、TO_DAYS(date)\n给定一个日期date, 返回一个天数 (从年份0000-00-00开始的天数 )。\n\n 例：\n\n\tselect TO_DAYS(NOW());\n\t+----------------+\n\t| TO_DAYS(NOW()) |\n\t+----------------+\n\t| 735159 |\n\t+----------------+\n\tselect TO_DAYS(121018);\n\t+-----------------+\n\t| TO_DAYS(121018) |\n\t+-----------------+\n\t| 735159 |\n\t+-----------------+\n\n给定一个日期date，返回一个天数（从年份0开始的天数）。\nTO_DAYS() 不用于阳历出现(1582)前的值，原因是当日历改变时，遗失的日期不会被考虑在内。\n请记住， MySQL“日期和时间类型”中的规则将日期中的二位数年份值转化为四位。例如，  ‘1997-10-07′和 ‘97-10-07′ 被视为同样的日期:\n对于1582 年之前的日期(或许在其它地区为下一年 ), 该函数的结果实不可靠的。\n\n\n### 4、MySQL DATE() 函数\nMySQL Date 函数\n\n定义和用法\n\nDATE() 函数返回日期或日期/时间表达式的日期部分。\n\n实例\n\n假设我们有如下的表：\n<table>\n<tr><th>OrderId</th><th>ProductName</th><th>OrderDate</th></tr>\n<tr><td>1</td><td>'Computer'</td><td>2008-12-29 16:25:46.635</td></tr>\n</table>\n\n我们使用下面的 SELECT 语句：\n\n\tSELECT ProductName, DATE(OrderDate) AS OrderDate\n\tFROM Orders\n\tWHERE OrderId=1\n\n结果：\n<table>\n<tr><th>ProductName</th><th>OrderDate</th></tr>\n<tr><td>'Computer'</td><td>2008-12-29</td></tr>\n</table>\n\n### 5、MySQL NOW() 函数\n\nMySQL Date 函数\n\n定义和用法\n\nNOW() 函数返回当前的日期和时间。\n\n语法\n\nNOW()\n\n实例\n\n例子 1\n\n下面是 SELECT 语句：\n\n\tSELECT NOW(),CURDATE(),CURTIME()\n\n结果类似：\n\n<table>\n<tr><th>NOW()</th><th>CURDATE()</th><th>CURTIME()</th></tr>\n<tr><td>2008-12-29 16:25:46</td><td>2008-12-29</td><td>16:25:46</td></tr>\n</table>\n\n例子 2\n\n下面的 SQL 创建带有日期时间列 (OrderDate) 的 \"Orders\" 表：\n\n\tCREATE TABLE Orders \n\t(\n\tOrderId int NOT NULL,\n\tProductName varchar(50) NOT NULL,\n\tOrderDate datetime NOT NULL DEFAULT NOW(),\n\tPRIMARY KEY (OrderId)\n\t)\n\n请注意，OrderDate 列规定 NOW() 作为默认值。作为结果，当您向表中插入行时，当前日期和时间自动插入列中。\n现在，我们希望在 \"Orders\" 表中插入一条新记录：\n\n\tINSERT INTO Orders (ProductName) VALUES ('Computer')\n\n\"Orders\" 表将类似这样：\n\n<table>\n<tr><th>OrderId</th><th>ProductName</th><th>OrderDate/th></tr>\n<tr><td>1</td><td>'Computer'</td><td>2008-12-29 16:25:46.635</td></tr>\n</table>\n\n\n### 6、MySQL DATE_FORMAT() 函数\n\nMySQL Date 函数\n\n定义和用法\n\nDATE_FORMAT() 函数用于以不同的格式显示日期/时间数据。\n\n语法\n\nDATE_FORMAT(date,format)\n\ndate 参数是合法的日期。format 规定日期/时间的输出格式。\n可以使用的格式有：\n\n\t格式 描述\n\t%a 缩写星期名\n\t%b 缩写月名\n\t%c 月，数值\n\t%D 带有英文前缀的月中的天\n\t%d 月的天，数值(00-31)\n\t%e 月的天，数值(0-31)\n\t%f 微秒\n\t%H 小时 (00-23)\n\t%h 小时 (01-12)\n\t%I 小时 (01-12)\n\t%i 分钟，数值(00-59)\n\t%j 年的天 (001-366)\n\t%k 小时 (0-23)\n\t%l 小时 (1-12)\n\t%M 月名\n\t%m 月，数值(00-12)\n\t%p AM 或 PM\n\t%r 时间，12-小时（hh:mm:ss AM 或 PM）\n\t%S 秒(00-59)\n\t%s 秒(00-59)\n\t%T 时间, 24-小时 (hh:mm:ss)\n\t%U 周 (00-53) 星期日是一周的第一天\n\t%u 周 (00-53) 星期一是一周的第一天\n\t%V 周 (01-53) 星期日是一周的第一天，与 %X 使用\n\t%v 周 (01-53) 星期一是一周的第一天，与 %x 使用\n\t%W 星期名\n\t%w 周的天 （0=星期日, 6=星期六）\n\t%X 年，其中的星期日是周的第一天，4 位，与 %V 使用\n\t%x 年，其中的星期一是周的第一天，4 位，与 %v 使用\n\t%Y 年，4 位\n\t%y 年，2 位\n\n实例\n\n下面的脚本使用 DATE_FORMAT() 函数来显示不同的格式。我们使用 NOW() 来获得当前的日期/时间：\n\t\n\tDATE_FORMAT(NOW(),'%b %d %Y %h:%i %p')\n\tDATE_FORMAT(NOW(),'%m-%d-%Y')\n\tDATE_FORMAT(NOW(),'%d %b %y')\n\tDATE_FORMAT(NOW(),'%d %b %Y %T:%f')\n\n结果类似：\n\n\tDec 29 2008 11:45 PM\n\t12-29-2008\n\t29 Dec 08\n\t29 Dec 2008 16:25:46.635\n\n### 7、MySQL获取季度的函数QUARTER(d)\n\nQUARTER(d)函数返回日期d是一年中的第几季度。值的范围是1～4。\n\n实例\n\n使用QUARTER()函数返回指定日期对应的季度。SQL语句如下：\n\n\tmysql>SELECT QUARTER('14-09-29');\n\n执行结果如下：\n![](https://i.imgur.com/L2TXznO.gif)\n从上图中代码执行的结果可以看出，14年9月29日是2014年的第3个季度。\n\n--------------------------------------------------------------------------------\n提示\n\n“00～69”转换为“2000～2069”，“70～99”转换为“1970～1999”。\n\n\n### 8、MySQL 的 YEARWEEK()函数：\n\n它是获取年份和周数的一个函数，\n函数形式为 \n\n\tYEARWEEK(date[,mode])\n\n例如 2010-3-14 ，礼拜天\n\n\tSELECT YEARWEEK('2010-3-14') \n返回\n 11\n\n\tSELECT YEARWEEK('2010-3-14',1) \n返回\n 10\n\n其中第二个参数是 mode ，具体指的意思如下：\n\n\tMode | First day of week  | Range |  Week 1 is the first week …\n\t0 \t\t\tSunday\t \t\t0-53 \twith a Sunday in this year\n\t1 \t\t\tMonday \t\t\t0-53 \twith more than 3 days this year\n\t2 \t\t\tSunday \t\t\t1-53 \twith a Sunday in this year\n\t3 \t\t\tMonday \t\t\t1-53 \twith more than 3 days this year\n\t4 \t\t\tSunday \t\t\t0-53 \twith more than 3 days this year\n\t5 \t\t\tMonday \t\t\t0-53 \twith a Monday in this year\n\t6 \t\t\tSunday \t\t\t1-53 \twith more than 3 days this year\n\t7 \t\t\tMonday \t\t\t1-53 \twith a Monday in this year\n\n多字段去重查询\n\n\twhere concat(`字段1`, `字段2`, `字段3`,...) like ...\n\n查看mysql安装目录\n\n\tselect @@basedir as basePath from dual\n\n","slug":"mysql","published":1,"updated":"2018-12-04T14:55:48.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0icw00181wu0jfw1pqvj","content":"<h2 id=\"一、MySQL查询今天、昨天、上周、近30天、去年等的数据的方法：\"><a href=\"#一、MySQL查询今天、昨天、上周、近30天、去年等的数据的方法：\" class=\"headerlink\" title=\"一、MySQL查询今天、昨天、上周、近30天、去年等的数据的方法：\"></a>一、MySQL查询今天、昨天、上周、近30天、去年等的数据的方法：</h2><p>删除建立时间超过3天的订单记录<br>delete 订单表 where datediff( dd, order_addtime, getdate() ) &gt; 3 用函数datediff() datediff( dd, 时间1, 时间2 )，意思是：计算时间1到时间2之间的天数 所以，datediff( dd, order_addtime, getdate() ) &gt; 3，就是超过3天的</p>\n<h3 id=\"今天\"><a href=\"#今天\" class=\"headerlink\" title=\"今天\"></a>今天</h3><pre><code>select * from 表名 where to_days(时间字段名) = to_days(now());  \n</code></pre><h3 id=\"昨天\"><a href=\"#昨天\" class=\"headerlink\" title=\"昨天\"></a>昨天</h3><pre><code>SELECT * FROM 表名 WHERETO_DAYS(NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1  \n</code></pre><h3 id=\"近7天\"><a href=\"#近7天\" class=\"headerlink\" title=\"近7天\"></a>近7天</h3><pre><code>SELECT * FROM 表名 whereDATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;=date(时间字段名)  \n</code></pre><h3 id=\"近30天\"><a href=\"#近30天\" class=\"headerlink\" title=\"近30天\"></a>近30天</h3><pre><code>SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;=date(时间字段名)  \n</code></pre><h3 id=\"本月\"><a href=\"#本月\" class=\"headerlink\" title=\"本月\"></a>本月</h3><pre><code>SELECT * FROM 表名 WHEREDATE_FORMAT( 时间字段名, &apos;%Y%m&apos; ) =DATE_FORMAT( CURDATE( ) , &apos;%Y%m&apos; )  \n</code></pre><h3 id=\"上一月\"><a href=\"#上一月\" class=\"headerlink\" title=\"上一月\"></a>上一月</h3><pre><code>SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , &apos;%Y%m&apos; ) , date_format( 时间字段名, &apos;%Y%m&apos; ) ) =1  \n</code></pre><h3 id=\"查询本季度数据\"><a href=\"#查询本季度数据\" class=\"headerlink\" title=\"查询本季度数据\"></a>查询本季度数据</h3><pre><code>select * from `ht_invoice_information` whereQUARTER(create_date)=QUARTER(now());\n</code></pre><h3 id=\"查询上季度数据\"><a href=\"#查询上季度数据\" class=\"headerlink\" title=\"查询上季度数据\"></a>查询上季度数据</h3><pre><code>select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));  \n</code></pre><h3 id=\"查询本年数据\"><a href=\"#查询本年数据\" class=\"headerlink\" title=\"查询本年数据\"></a>查询本年数据</h3><pre><code>select * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());  \n</code></pre><h3 id=\"查询上年数据\"><a href=\"#查询上年数据\" class=\"headerlink\" title=\"查询上年数据\"></a>查询上年数据</h3><pre><code>select * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));  \n</code></pre><h3 id=\"查询当前这周的数据\"><a href=\"#查询当前这周的数据\" class=\"headerlink\" title=\"查询当前这周的数据\"></a>查询当前这周的数据</h3><pre><code>SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&apos;%Y-%m-%d&apos;)) = YEARWEEK(now());  \n</code></pre><h3 id=\"查询上周的数据\"><a href=\"#查询上周的数据\" class=\"headerlink\" title=\"查询上周的数据\"></a>查询上周的数据</h3><pre><code>SELECT name,submittime FROM enterprise WHEREYEARWEEK(date_format(submittime,&apos;%Y-%m-%d&apos;)) =YEARWEEK(now())-1;  \n</code></pre><h3 id=\"查询当前月份的数据\"><a href=\"#查询当前月份的数据\" class=\"headerlink\" title=\"查询当前月份的数据\"></a>查询当前月份的数据</h3><pre><code>select name,submittime from enterprise   where date_format(submittime,&apos;%Y-%m&apos;)=date_format(now(),&apos;%Y-%m&apos;)  \n</code></pre><h3 id=\"查询距离当前现在6个月的数据\"><a href=\"#查询距离当前现在6个月的数据\" class=\"headerlink\" title=\"查询距离当前现在6个月的数据\"></a>查询距离当前现在6个月的数据</h3><pre><code>select name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();    \n</code></pre><h3 id=\"查询上个月的数据\"><a href=\"#查询上个月的数据\" class=\"headerlink\" title=\"查询上个月的数据\"></a>查询上个月的数据</h3><pre><code>select name,submittime from enterprise   where date_format(submittime,&apos;%Y-%m&apos;)=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),&apos;%Y-%m&apos;)  \nselect * from ` user ` where DATE_FORMAT(pudate, &apos; %Y%m &apos; ) = DATE_FORMAT(CURDATE(), &apos; %Y%m &apos; ) ;  \nselect * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,&apos;%y-%m-%d&apos;)) = WEEKOFYEAR(now())  \nselect *   \nfrom user\nwhere MONTH (FROM_UNIXTIME(pudate, &apos; %y-%m-%d &apos; )) = MONTH (now())  \nselect *   \nfrom [ user ]   \nwhere YEAR (FROM_UNIXTIME(pudate, &apos; %y-%m-%d &apos; )) = YEAR (now())  \nand MONTH (FROM_UNIXTIME(pudate, &apos; %y-%m-%d &apos; )) = MONTH (now())  \nselect *   \nfrom [ user ]   \nwhere pudate between 上月最后一天  \nand 下月第一天  \nwhere date(regdate)   =   curdate();  \nselect   *   from   test   where year(regdate)=year(now())   and month(regdate)=month(now())   and day(regdate)=day(now())  \nSELECT date( c_instime ) ,curdate( )  \nFROM `t_score`  \nWHERE 1  \nLIMIT 0 , 30 \n</code></pre><h2 id=\"二、相关函数简介\"><a href=\"#二、相关函数简介\" class=\"headerlink\" title=\"二、相关函数简介\"></a>二、相关函数简介</h2><h3 id=\"1、Sql-server中DateDiff-用法\"><a href=\"#1、Sql-server中DateDiff-用法\" class=\"headerlink\" title=\"1、Sql server中DateDiff()用法\"></a>1、Sql server中DateDiff()用法</h3><p>DATEDIFF 函数 [日期和时间]<br>功能<br>返回两个日期之间的间隔。<br>语法 </p>\n<pre><code>DATEDIFF ( date-part, date-expression-1, date-expression-2 )\ndate-part :\nyear | quarter | month | week | day | hour | minute | second | millisecond\n</code></pre><p>参数<br>date-part    指定要测量其间隔的日期部分。</p>\n<p>有关日期部分的详细信息，请参见日期部分。</p>\n<p>date-expression-1    某一间隔的起始日期。从 date-expression-2 中减去该值，返回两个参数之间 date-parts 的天数。</p>\n<p>date-expression-2    某一间隔的结束日期。从该值中减去 Date-expression-1，返回两个参数之间 date-parts 的天数。<br>用法 </p>\n<p>此函数计算两个指定日期之间日期部分的数目。结果为日期部分中等于（date2 - date1）的有符号的整数值。</p>\n<p>当结果不是日期部分的偶数倍时，DATEDIFF 将被截断而不是被舍入。</p>\n<p>当使用 day 作为日期部分时，DATEDIFF 返回两个指定的时间之间（包括第二个日期但不包括第一个日期）的午夜数。</p>\n<p>当使用 month 作为日期部分时，DATEDIFF 返回两个日期之间（包括第二个日期但不包括第一个日期）出现的月的第一天的数目。</p>\n<p>当使用 week 作为日期部分时，DATEDIFF 返回两个日期（包括第二个日期但不包括第一个日期）之间星期日的数目。</p>\n<p>对于更小的时间单位存在溢出值：</p>\n<p>milliseconds    24 天<br>seconds    68 年<br>minutes    4083 年<br>others    没有溢出限制</p>\n<p>如果超出这些限制，此函数将返回溢出错误。<br>标准和兼容性 </p>\n<p>SQL/92    Transact-SQL 扩展。<br>SQL/99    Transact-SQL 扩展。<br>Sybase    与 Adaptive Server Enterprise 兼容。</p>\n<p>下面示例的语句返回 1：</p>\n<pre><code>SELECT datediff( hour, &apos;4:00AM&apos;, &apos;5:50AM&apos; )下面的语句返回 102：\nSELECT datediff( month, &apos;1987/05/02&apos;, &apos;1995/11/15&apos; )下面的语句返回 0：\nSELECT datediff( day, &apos;00:00&apos;, &apos;23:59&apos; )下面的语句返回 4：\nSELECT datediff( day,\n   &apos;1999/07/19 00:00&apos;,\n   &apos;1999/07/23 23:59&apos; )下面的语句返回 0：\nSELECT datediff( month, &apos;1999/07/19&apos;, &apos;1999/07/23&apos; )下面的语句返回 1：\nSELECT datediff( month, &apos;1999/07/19&apos;, &apos;1999/08/23&apos; )\n</code></pre><h3 id=\"2、MySQLDATE-SUB-函数\"><a href=\"#2、MySQLDATE-SUB-函数\" class=\"headerlink\" title=\"2、MySQLDATE_SUB()函数\"></a>2、MySQLDATE_SUB()函数</h3><p>MySQL Date 函数<br>定义和用法<br>DATE_SUB() 函数从日期减去指定的时间间隔。<br>语法</p>\n<pre><code>DATE_SUB(date,INTERVAL expr type)\n</code></pre><p>date 参数是合法的日期表达式。expr 参数是您希望添加的时间间隔。</p>\n<p>type 参数可以是下列值：</p>\n<table><br><tr><th>Type 值</th></tr><br><tr><td>MICROSECOND</td></tr><br><tr><td>SECOND</td></tr><br><tr><td>MINUTE</td></tr><br><tr><td>HOUR<br>DAY</td></tr><br><tr><td>WEEK</td></tr><br><tr><td>MONTH</td></tr><br><tr><td>QUARTER</td></tr><br><tr><td>YEAR</td></tr><br><tr><td>SECOND_MICROSECOND</td></tr><br><tr><td>MINUTE_MICROSECOND</td></tr><br><tr><td>MINUTE_SECOND</td></tr><br><tr><td>HOUR_MICROSECOND</td></tr><br><tr><td>HOUR_SECOND</td></tr><br><tr><td>HOUR_MINUTE</td></tr><br><tr><td>DAY_MICROSECOND</td></tr><br><tr><td>DAY_SECOND</td></tr><br><tr><td>DAY_MINUTE</td></tr><br><tr><td>DAY_HOUR</td></tr><br><tr><td>YEAR_MONTH</td></tr><br></table>\n\n<p>实例</p>\n<p>假设我们有如下的表：</p>\n<table><br><tr><th>OrderId</th><th>ProductName</th><th>OrderDate</th></tr><br><tr><td>1</td><td>‘Computer’</td><td>2008-12-29 16:25:46.635</td></tr><br></table>\n\n<p>现在，我们希望从 “OrderDate” 减去 2 天。<br>我们使用下面的 SELECT 语句：</p>\n<pre><code>SELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate\nFROM Orders\n</code></pre><p>结果：</p>\n<table><br><tr><th>OrderId</th><th>OrderPayDate</th></tr><br><tr><td>1</td><td>2008-12-27 16:25:46.635</td></tr><br></table>\n\n<p> 例2.</p>\n<pre><code>SELECT DATE_SUB(&apos;2010-08-12&apos;, INTERVAL &apos;3-2&apos; YEAR_MONTH) AS NewDate  \n</code></pre><p>   结果：2007-06-12</p>\n<p>  例3.</p>\n<pre><code>SELECT DATE_SUB(&apos;2011-09-14 2:44:36&apos;, INTERVAL &apos;2:26&apos; HOUR_MINUTE) AS NewDate  \n</code></pre><p>   结果： 2011-09-1400:18:36</p>\n<h3 id=\"3、TO-DAYS-date\"><a href=\"#3、TO-DAYS-date\" class=\"headerlink\" title=\"3、TO_DAYS(date)\"></a>3、TO_DAYS(date)</h3><p>给定一个日期date, 返回一个天数 (从年份0000-00-00开始的天数 )。</p>\n<p> 例：</p>\n<pre><code>select TO_DAYS(NOW());\n+----------------+\n| TO_DAYS(NOW()) |\n+----------------+\n| 735159 |\n+----------------+\nselect TO_DAYS(121018);\n+-----------------+\n| TO_DAYS(121018) |\n+-----------------+\n| 735159 |\n+-----------------+\n</code></pre><p>给定一个日期date，返回一个天数（从年份0开始的天数）。<br>TO_DAYS() 不用于阳历出现(1582)前的值，原因是当日历改变时，遗失的日期不会被考虑在内。<br>请记住， MySQL“日期和时间类型”中的规则将日期中的二位数年份值转化为四位。例如，  ‘1997-10-07′和 ‘97-10-07′ 被视为同样的日期:<br>对于1582 年之前的日期(或许在其它地区为下一年 ), 该函数的结果实不可靠的。</p>\n<h3 id=\"4、MySQL-DATE-函数\"><a href=\"#4、MySQL-DATE-函数\" class=\"headerlink\" title=\"4、MySQL DATE() 函数\"></a>4、MySQL DATE() 函数</h3><p>MySQL Date 函数</p>\n<p>定义和用法</p>\n<p>DATE() 函数返回日期或日期/时间表达式的日期部分。</p>\n<p>实例</p>\n<p>假设我们有如下的表：</p>\n<table><br><tr><th>OrderId</th><th>ProductName</th><th>OrderDate</th></tr><br><tr><td>1</td><td>‘Computer’</td><td>2008-12-29 16:25:46.635</td></tr><br></table>\n\n<p>我们使用下面的 SELECT 语句：</p>\n<pre><code>SELECT ProductName, DATE(OrderDate) AS OrderDate\nFROM Orders\nWHERE OrderId=1\n</code></pre><p>结果：</p>\n<table><br><tr><th>ProductName</th><th>OrderDate</th></tr><br><tr><td>‘Computer’</td><td>2008-12-29</td></tr><br></table>\n\n<h3 id=\"5、MySQL-NOW-函数\"><a href=\"#5、MySQL-NOW-函数\" class=\"headerlink\" title=\"5、MySQL NOW() 函数\"></a>5、MySQL NOW() 函数</h3><p>MySQL Date 函数</p>\n<p>定义和用法</p>\n<p>NOW() 函数返回当前的日期和时间。</p>\n<p>语法</p>\n<p>NOW()</p>\n<p>实例</p>\n<p>例子 1</p>\n<p>下面是 SELECT 语句：</p>\n<pre><code>SELECT NOW(),CURDATE(),CURTIME()\n</code></pre><p>结果类似：</p>\n<table><br><tr><th>NOW()</th><th>CURDATE()</th><th>CURTIME()</th></tr><br><tr><td>2008-12-29 16:25:46</td><td>2008-12-29</td><td>16:25:46</td></tr><br></table>\n\n<p>例子 2</p>\n<p>下面的 SQL 创建带有日期时间列 (OrderDate) 的 “Orders” 表：</p>\n<pre><code>CREATE TABLE Orders \n(\nOrderId int NOT NULL,\nProductName varchar(50) NOT NULL,\nOrderDate datetime NOT NULL DEFAULT NOW(),\nPRIMARY KEY (OrderId)\n)\n</code></pre><p>请注意，OrderDate 列规定 NOW() 作为默认值。作为结果，当您向表中插入行时，当前日期和时间自动插入列中。<br>现在，我们希望在 “Orders” 表中插入一条新记录：</p>\n<pre><code>INSERT INTO Orders (ProductName) VALUES (&apos;Computer&apos;)\n</code></pre><p>“Orders” 表将类似这样：</p>\n<table><br><tr><th>OrderId</th><th>ProductName</th><th>OrderDate/th&gt;</th></tr><br><tr><td>1</td><td>‘Computer’</td><td>2008-12-29 16:25:46.635</td></tr><br></table>\n\n\n<h3 id=\"6、MySQL-DATE-FORMAT-函数\"><a href=\"#6、MySQL-DATE-FORMAT-函数\" class=\"headerlink\" title=\"6、MySQL DATE_FORMAT() 函数\"></a>6、MySQL DATE_FORMAT() 函数</h3><p>MySQL Date 函数</p>\n<p>定义和用法</p>\n<p>DATE_FORMAT() 函数用于以不同的格式显示日期/时间数据。</p>\n<p>语法</p>\n<p>DATE_FORMAT(date,format)</p>\n<p>date 参数是合法的日期。format 规定日期/时间的输出格式。<br>可以使用的格式有：</p>\n<pre><code>格式 描述\n%a 缩写星期名\n%b 缩写月名\n%c 月，数值\n%D 带有英文前缀的月中的天\n%d 月的天，数值(00-31)\n%e 月的天，数值(0-31)\n%f 微秒\n%H 小时 (00-23)\n%h 小时 (01-12)\n%I 小时 (01-12)\n%i 分钟，数值(00-59)\n%j 年的天 (001-366)\n%k 小时 (0-23)\n%l 小时 (1-12)\n%M 月名\n%m 月，数值(00-12)\n%p AM 或 PM\n%r 时间，12-小时（hh:mm:ss AM 或 PM）\n%S 秒(00-59)\n%s 秒(00-59)\n%T 时间, 24-小时 (hh:mm:ss)\n%U 周 (00-53) 星期日是一周的第一天\n%u 周 (00-53) 星期一是一周的第一天\n%V 周 (01-53) 星期日是一周的第一天，与 %X 使用\n%v 周 (01-53) 星期一是一周的第一天，与 %x 使用\n%W 星期名\n%w 周的天 （0=星期日, 6=星期六）\n%X 年，其中的星期日是周的第一天，4 位，与 %V 使用\n%x 年，其中的星期一是周的第一天，4 位，与 %v 使用\n%Y 年，4 位\n%y 年，2 位\n</code></pre><p>实例</p>\n<p>下面的脚本使用 DATE_FORMAT() 函数来显示不同的格式。我们使用 NOW() 来获得当前的日期/时间：</p>\n<pre><code>DATE_FORMAT(NOW(),&apos;%b %d %Y %h:%i %p&apos;)\nDATE_FORMAT(NOW(),&apos;%m-%d-%Y&apos;)\nDATE_FORMAT(NOW(),&apos;%d %b %y&apos;)\nDATE_FORMAT(NOW(),&apos;%d %b %Y %T:%f&apos;)\n</code></pre><p>结果类似：</p>\n<pre><code>Dec 29 2008 11:45 PM\n12-29-2008\n29 Dec 08\n29 Dec 2008 16:25:46.635\n</code></pre><h3 id=\"7、MySQL获取季度的函数QUARTER-d\"><a href=\"#7、MySQL获取季度的函数QUARTER-d\" class=\"headerlink\" title=\"7、MySQL获取季度的函数QUARTER(d)\"></a>7、MySQL获取季度的函数QUARTER(d)</h3><p>QUARTER(d)函数返回日期d是一年中的第几季度。值的范围是1～4。</p>\n<p>实例</p>\n<p>使用QUARTER()函数返回指定日期对应的季度。SQL语句如下：</p>\n<pre><code>mysql&gt;SELECT QUARTER(&apos;14-09-29&apos;);\n</code></pre><p>执行结果如下：<br><img src=\"https://i.imgur.com/L2TXznO.gif\" alt=\"\"><br>从上图中代码执行的结果可以看出，14年9月29日是2014年的第3个季度。</p>\n<hr>\n<p>提示</p>\n<p>“00～69”转换为“2000～2069”，“70～99”转换为“1970～1999”。</p>\n<h3 id=\"8、MySQL-的-YEARWEEK-函数：\"><a href=\"#8、MySQL-的-YEARWEEK-函数：\" class=\"headerlink\" title=\"8、MySQL 的 YEARWEEK()函数：\"></a>8、MySQL 的 YEARWEEK()函数：</h3><p>它是获取年份和周数的一个函数，<br>函数形式为 </p>\n<pre><code>YEARWEEK(date[,mode])\n</code></pre><p>例如 2010-3-14 ，礼拜天</p>\n<pre><code>SELECT YEARWEEK(&apos;2010-3-14&apos;) \n</code></pre><p>返回<br> 11</p>\n<pre><code>SELECT YEARWEEK(&apos;2010-3-14&apos;,1) \n</code></pre><p>返回<br> 10</p>\n<p>其中第二个参数是 mode ，具体指的意思如下：</p>\n<pre><code>Mode | First day of week  | Range |  Week 1 is the first week …\n0             Sunday             0-53     with a Sunday in this year\n1             Monday             0-53     with more than 3 days this year\n2             Sunday             1-53     with a Sunday in this year\n3             Monday             1-53     with more than 3 days this year\n4             Sunday             0-53     with more than 3 days this year\n5             Monday             0-53     with a Monday in this year\n6             Sunday             1-53     with more than 3 days this year\n7             Monday             1-53     with a Monday in this year\n</code></pre><p>多字段去重查询</p>\n<pre><code>where concat(`字段1`, `字段2`, `字段3`,...) like ...\n</code></pre><p>查看mysql安装目录</p>\n<pre><code>select @@basedir as basePath from dual\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、MySQL查询今天、昨天、上周、近30天、去年等的数据的方法：\"><a href=\"#一、MySQL查询今天、昨天、上周、近30天、去年等的数据的方法：\" class=\"headerlink\" title=\"一、MySQL查询今天、昨天、上周、近30天、去年等的数据的方法：\"></a>一、MySQL查询今天、昨天、上周、近30天、去年等的数据的方法：</h2><p>删除建立时间超过3天的订单记录<br>delete 订单表 where datediff( dd, order_addtime, getdate() ) &gt; 3 用函数datediff() datediff( dd, 时间1, 时间2 )，意思是：计算时间1到时间2之间的天数 所以，datediff( dd, order_addtime, getdate() ) &gt; 3，就是超过3天的</p>\n<h3 id=\"今天\"><a href=\"#今天\" class=\"headerlink\" title=\"今天\"></a>今天</h3><pre><code>select * from 表名 where to_days(时间字段名) = to_days(now());  \n</code></pre><h3 id=\"昨天\"><a href=\"#昨天\" class=\"headerlink\" title=\"昨天\"></a>昨天</h3><pre><code>SELECT * FROM 表名 WHERETO_DAYS(NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1  \n</code></pre><h3 id=\"近7天\"><a href=\"#近7天\" class=\"headerlink\" title=\"近7天\"></a>近7天</h3><pre><code>SELECT * FROM 表名 whereDATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;=date(时间字段名)  \n</code></pre><h3 id=\"近30天\"><a href=\"#近30天\" class=\"headerlink\" title=\"近30天\"></a>近30天</h3><pre><code>SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;=date(时间字段名)  \n</code></pre><h3 id=\"本月\"><a href=\"#本月\" class=\"headerlink\" title=\"本月\"></a>本月</h3><pre><code>SELECT * FROM 表名 WHEREDATE_FORMAT( 时间字段名, &apos;%Y%m&apos; ) =DATE_FORMAT( CURDATE( ) , &apos;%Y%m&apos; )  \n</code></pre><h3 id=\"上一月\"><a href=\"#上一月\" class=\"headerlink\" title=\"上一月\"></a>上一月</h3><pre><code>SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , &apos;%Y%m&apos; ) , date_format( 时间字段名, &apos;%Y%m&apos; ) ) =1  \n</code></pre><h3 id=\"查询本季度数据\"><a href=\"#查询本季度数据\" class=\"headerlink\" title=\"查询本季度数据\"></a>查询本季度数据</h3><pre><code>select * from `ht_invoice_information` whereQUARTER(create_date)=QUARTER(now());\n</code></pre><h3 id=\"查询上季度数据\"><a href=\"#查询上季度数据\" class=\"headerlink\" title=\"查询上季度数据\"></a>查询上季度数据</h3><pre><code>select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));  \n</code></pre><h3 id=\"查询本年数据\"><a href=\"#查询本年数据\" class=\"headerlink\" title=\"查询本年数据\"></a>查询本年数据</h3><pre><code>select * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());  \n</code></pre><h3 id=\"查询上年数据\"><a href=\"#查询上年数据\" class=\"headerlink\" title=\"查询上年数据\"></a>查询上年数据</h3><pre><code>select * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));  \n</code></pre><h3 id=\"查询当前这周的数据\"><a href=\"#查询当前这周的数据\" class=\"headerlink\" title=\"查询当前这周的数据\"></a>查询当前这周的数据</h3><pre><code>SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&apos;%Y-%m-%d&apos;)) = YEARWEEK(now());  \n</code></pre><h3 id=\"查询上周的数据\"><a href=\"#查询上周的数据\" class=\"headerlink\" title=\"查询上周的数据\"></a>查询上周的数据</h3><pre><code>SELECT name,submittime FROM enterprise WHEREYEARWEEK(date_format(submittime,&apos;%Y-%m-%d&apos;)) =YEARWEEK(now())-1;  \n</code></pre><h3 id=\"查询当前月份的数据\"><a href=\"#查询当前月份的数据\" class=\"headerlink\" title=\"查询当前月份的数据\"></a>查询当前月份的数据</h3><pre><code>select name,submittime from enterprise   where date_format(submittime,&apos;%Y-%m&apos;)=date_format(now(),&apos;%Y-%m&apos;)  \n</code></pre><h3 id=\"查询距离当前现在6个月的数据\"><a href=\"#查询距离当前现在6个月的数据\" class=\"headerlink\" title=\"查询距离当前现在6个月的数据\"></a>查询距离当前现在6个月的数据</h3><pre><code>select name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();    \n</code></pre><h3 id=\"查询上个月的数据\"><a href=\"#查询上个月的数据\" class=\"headerlink\" title=\"查询上个月的数据\"></a>查询上个月的数据</h3><pre><code>select name,submittime from enterprise   where date_format(submittime,&apos;%Y-%m&apos;)=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),&apos;%Y-%m&apos;)  \nselect * from ` user ` where DATE_FORMAT(pudate, &apos; %Y%m &apos; ) = DATE_FORMAT(CURDATE(), &apos; %Y%m &apos; ) ;  \nselect * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,&apos;%y-%m-%d&apos;)) = WEEKOFYEAR(now())  \nselect *   \nfrom user\nwhere MONTH (FROM_UNIXTIME(pudate, &apos; %y-%m-%d &apos; )) = MONTH (now())  \nselect *   \nfrom [ user ]   \nwhere YEAR (FROM_UNIXTIME(pudate, &apos; %y-%m-%d &apos; )) = YEAR (now())  \nand MONTH (FROM_UNIXTIME(pudate, &apos; %y-%m-%d &apos; )) = MONTH (now())  \nselect *   \nfrom [ user ]   \nwhere pudate between 上月最后一天  \nand 下月第一天  \nwhere date(regdate)   =   curdate();  \nselect   *   from   test   where year(regdate)=year(now())   and month(regdate)=month(now())   and day(regdate)=day(now())  \nSELECT date( c_instime ) ,curdate( )  \nFROM `t_score`  \nWHERE 1  \nLIMIT 0 , 30 \n</code></pre><h2 id=\"二、相关函数简介\"><a href=\"#二、相关函数简介\" class=\"headerlink\" title=\"二、相关函数简介\"></a>二、相关函数简介</h2><h3 id=\"1、Sql-server中DateDiff-用法\"><a href=\"#1、Sql-server中DateDiff-用法\" class=\"headerlink\" title=\"1、Sql server中DateDiff()用法\"></a>1、Sql server中DateDiff()用法</h3><p>DATEDIFF 函数 [日期和时间]<br>功能<br>返回两个日期之间的间隔。<br>语法 </p>\n<pre><code>DATEDIFF ( date-part, date-expression-1, date-expression-2 )\ndate-part :\nyear | quarter | month | week | day | hour | minute | second | millisecond\n</code></pre><p>参数<br>date-part    指定要测量其间隔的日期部分。</p>\n<p>有关日期部分的详细信息，请参见日期部分。</p>\n<p>date-expression-1    某一间隔的起始日期。从 date-expression-2 中减去该值，返回两个参数之间 date-parts 的天数。</p>\n<p>date-expression-2    某一间隔的结束日期。从该值中减去 Date-expression-1，返回两个参数之间 date-parts 的天数。<br>用法 </p>\n<p>此函数计算两个指定日期之间日期部分的数目。结果为日期部分中等于（date2 - date1）的有符号的整数值。</p>\n<p>当结果不是日期部分的偶数倍时，DATEDIFF 将被截断而不是被舍入。</p>\n<p>当使用 day 作为日期部分时，DATEDIFF 返回两个指定的时间之间（包括第二个日期但不包括第一个日期）的午夜数。</p>\n<p>当使用 month 作为日期部分时，DATEDIFF 返回两个日期之间（包括第二个日期但不包括第一个日期）出现的月的第一天的数目。</p>\n<p>当使用 week 作为日期部分时，DATEDIFF 返回两个日期（包括第二个日期但不包括第一个日期）之间星期日的数目。</p>\n<p>对于更小的时间单位存在溢出值：</p>\n<p>milliseconds    24 天<br>seconds    68 年<br>minutes    4083 年<br>others    没有溢出限制</p>\n<p>如果超出这些限制，此函数将返回溢出错误。<br>标准和兼容性 </p>\n<p>SQL/92    Transact-SQL 扩展。<br>SQL/99    Transact-SQL 扩展。<br>Sybase    与 Adaptive Server Enterprise 兼容。</p>\n<p>下面示例的语句返回 1：</p>\n<pre><code>SELECT datediff( hour, &apos;4:00AM&apos;, &apos;5:50AM&apos; )下面的语句返回 102：\nSELECT datediff( month, &apos;1987/05/02&apos;, &apos;1995/11/15&apos; )下面的语句返回 0：\nSELECT datediff( day, &apos;00:00&apos;, &apos;23:59&apos; )下面的语句返回 4：\nSELECT datediff( day,\n   &apos;1999/07/19 00:00&apos;,\n   &apos;1999/07/23 23:59&apos; )下面的语句返回 0：\nSELECT datediff( month, &apos;1999/07/19&apos;, &apos;1999/07/23&apos; )下面的语句返回 1：\nSELECT datediff( month, &apos;1999/07/19&apos;, &apos;1999/08/23&apos; )\n</code></pre><h3 id=\"2、MySQLDATE-SUB-函数\"><a href=\"#2、MySQLDATE-SUB-函数\" class=\"headerlink\" title=\"2、MySQLDATE_SUB()函数\"></a>2、MySQLDATE_SUB()函数</h3><p>MySQL Date 函数<br>定义和用法<br>DATE_SUB() 函数从日期减去指定的时间间隔。<br>语法</p>\n<pre><code>DATE_SUB(date,INTERVAL expr type)\n</code></pre><p>date 参数是合法的日期表达式。expr 参数是您希望添加的时间间隔。</p>\n<p>type 参数可以是下列值：</p>\n<table><br><tr><th>Type 值</th></tr><br><tr><td>MICROSECOND</td></tr><br><tr><td>SECOND</td></tr><br><tr><td>MINUTE</td></tr><br><tr><td>HOUR<br>DAY</td></tr><br><tr><td>WEEK</td></tr><br><tr><td>MONTH</td></tr><br><tr><td>QUARTER</td></tr><br><tr><td>YEAR</td></tr><br><tr><td>SECOND_MICROSECOND</td></tr><br><tr><td>MINUTE_MICROSECOND</td></tr><br><tr><td>MINUTE_SECOND</td></tr><br><tr><td>HOUR_MICROSECOND</td></tr><br><tr><td>HOUR_SECOND</td></tr><br><tr><td>HOUR_MINUTE</td></tr><br><tr><td>DAY_MICROSECOND</td></tr><br><tr><td>DAY_SECOND</td></tr><br><tr><td>DAY_MINUTE</td></tr><br><tr><td>DAY_HOUR</td></tr><br><tr><td>YEAR_MONTH</td></tr><br></table>\n\n<p>实例</p>\n<p>假设我们有如下的表：</p>\n<table><br><tr><th>OrderId</th><th>ProductName</th><th>OrderDate</th></tr><br><tr><td>1</td><td>‘Computer’</td><td>2008-12-29 16:25:46.635</td></tr><br></table>\n\n<p>现在，我们希望从 “OrderDate” 减去 2 天。<br>我们使用下面的 SELECT 语句：</p>\n<pre><code>SELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate\nFROM Orders\n</code></pre><p>结果：</p>\n<table><br><tr><th>OrderId</th><th>OrderPayDate</th></tr><br><tr><td>1</td><td>2008-12-27 16:25:46.635</td></tr><br></table>\n\n<p> 例2.</p>\n<pre><code>SELECT DATE_SUB(&apos;2010-08-12&apos;, INTERVAL &apos;3-2&apos; YEAR_MONTH) AS NewDate  \n</code></pre><p>   结果：2007-06-12</p>\n<p>  例3.</p>\n<pre><code>SELECT DATE_SUB(&apos;2011-09-14 2:44:36&apos;, INTERVAL &apos;2:26&apos; HOUR_MINUTE) AS NewDate  \n</code></pre><p>   结果： 2011-09-1400:18:36</p>\n<h3 id=\"3、TO-DAYS-date\"><a href=\"#3、TO-DAYS-date\" class=\"headerlink\" title=\"3、TO_DAYS(date)\"></a>3、TO_DAYS(date)</h3><p>给定一个日期date, 返回一个天数 (从年份0000-00-00开始的天数 )。</p>\n<p> 例：</p>\n<pre><code>select TO_DAYS(NOW());\n+----------------+\n| TO_DAYS(NOW()) |\n+----------------+\n| 735159 |\n+----------------+\nselect TO_DAYS(121018);\n+-----------------+\n| TO_DAYS(121018) |\n+-----------------+\n| 735159 |\n+-----------------+\n</code></pre><p>给定一个日期date，返回一个天数（从年份0开始的天数）。<br>TO_DAYS() 不用于阳历出现(1582)前的值，原因是当日历改变时，遗失的日期不会被考虑在内。<br>请记住， MySQL“日期和时间类型”中的规则将日期中的二位数年份值转化为四位。例如，  ‘1997-10-07′和 ‘97-10-07′ 被视为同样的日期:<br>对于1582 年之前的日期(或许在其它地区为下一年 ), 该函数的结果实不可靠的。</p>\n<h3 id=\"4、MySQL-DATE-函数\"><a href=\"#4、MySQL-DATE-函数\" class=\"headerlink\" title=\"4、MySQL DATE() 函数\"></a>4、MySQL DATE() 函数</h3><p>MySQL Date 函数</p>\n<p>定义和用法</p>\n<p>DATE() 函数返回日期或日期/时间表达式的日期部分。</p>\n<p>实例</p>\n<p>假设我们有如下的表：</p>\n<table><br><tr><th>OrderId</th><th>ProductName</th><th>OrderDate</th></tr><br><tr><td>1</td><td>‘Computer’</td><td>2008-12-29 16:25:46.635</td></tr><br></table>\n\n<p>我们使用下面的 SELECT 语句：</p>\n<pre><code>SELECT ProductName, DATE(OrderDate) AS OrderDate\nFROM Orders\nWHERE OrderId=1\n</code></pre><p>结果：</p>\n<table><br><tr><th>ProductName</th><th>OrderDate</th></tr><br><tr><td>‘Computer’</td><td>2008-12-29</td></tr><br></table>\n\n<h3 id=\"5、MySQL-NOW-函数\"><a href=\"#5、MySQL-NOW-函数\" class=\"headerlink\" title=\"5、MySQL NOW() 函数\"></a>5、MySQL NOW() 函数</h3><p>MySQL Date 函数</p>\n<p>定义和用法</p>\n<p>NOW() 函数返回当前的日期和时间。</p>\n<p>语法</p>\n<p>NOW()</p>\n<p>实例</p>\n<p>例子 1</p>\n<p>下面是 SELECT 语句：</p>\n<pre><code>SELECT NOW(),CURDATE(),CURTIME()\n</code></pre><p>结果类似：</p>\n<table><br><tr><th>NOW()</th><th>CURDATE()</th><th>CURTIME()</th></tr><br><tr><td>2008-12-29 16:25:46</td><td>2008-12-29</td><td>16:25:46</td></tr><br></table>\n\n<p>例子 2</p>\n<p>下面的 SQL 创建带有日期时间列 (OrderDate) 的 “Orders” 表：</p>\n<pre><code>CREATE TABLE Orders \n(\nOrderId int NOT NULL,\nProductName varchar(50) NOT NULL,\nOrderDate datetime NOT NULL DEFAULT NOW(),\nPRIMARY KEY (OrderId)\n)\n</code></pre><p>请注意，OrderDate 列规定 NOW() 作为默认值。作为结果，当您向表中插入行时，当前日期和时间自动插入列中。<br>现在，我们希望在 “Orders” 表中插入一条新记录：</p>\n<pre><code>INSERT INTO Orders (ProductName) VALUES (&apos;Computer&apos;)\n</code></pre><p>“Orders” 表将类似这样：</p>\n<table><br><tr><th>OrderId</th><th>ProductName</th><th>OrderDate/th&gt;</th></tr><br><tr><td>1</td><td>‘Computer’</td><td>2008-12-29 16:25:46.635</td></tr><br></table>\n\n\n<h3 id=\"6、MySQL-DATE-FORMAT-函数\"><a href=\"#6、MySQL-DATE-FORMAT-函数\" class=\"headerlink\" title=\"6、MySQL DATE_FORMAT() 函数\"></a>6、MySQL DATE_FORMAT() 函数</h3><p>MySQL Date 函数</p>\n<p>定义和用法</p>\n<p>DATE_FORMAT() 函数用于以不同的格式显示日期/时间数据。</p>\n<p>语法</p>\n<p>DATE_FORMAT(date,format)</p>\n<p>date 参数是合法的日期。format 规定日期/时间的输出格式。<br>可以使用的格式有：</p>\n<pre><code>格式 描述\n%a 缩写星期名\n%b 缩写月名\n%c 月，数值\n%D 带有英文前缀的月中的天\n%d 月的天，数值(00-31)\n%e 月的天，数值(0-31)\n%f 微秒\n%H 小时 (00-23)\n%h 小时 (01-12)\n%I 小时 (01-12)\n%i 分钟，数值(00-59)\n%j 年的天 (001-366)\n%k 小时 (0-23)\n%l 小时 (1-12)\n%M 月名\n%m 月，数值(00-12)\n%p AM 或 PM\n%r 时间，12-小时（hh:mm:ss AM 或 PM）\n%S 秒(00-59)\n%s 秒(00-59)\n%T 时间, 24-小时 (hh:mm:ss)\n%U 周 (00-53) 星期日是一周的第一天\n%u 周 (00-53) 星期一是一周的第一天\n%V 周 (01-53) 星期日是一周的第一天，与 %X 使用\n%v 周 (01-53) 星期一是一周的第一天，与 %x 使用\n%W 星期名\n%w 周的天 （0=星期日, 6=星期六）\n%X 年，其中的星期日是周的第一天，4 位，与 %V 使用\n%x 年，其中的星期一是周的第一天，4 位，与 %v 使用\n%Y 年，4 位\n%y 年，2 位\n</code></pre><p>实例</p>\n<p>下面的脚本使用 DATE_FORMAT() 函数来显示不同的格式。我们使用 NOW() 来获得当前的日期/时间：</p>\n<pre><code>DATE_FORMAT(NOW(),&apos;%b %d %Y %h:%i %p&apos;)\nDATE_FORMAT(NOW(),&apos;%m-%d-%Y&apos;)\nDATE_FORMAT(NOW(),&apos;%d %b %y&apos;)\nDATE_FORMAT(NOW(),&apos;%d %b %Y %T:%f&apos;)\n</code></pre><p>结果类似：</p>\n<pre><code>Dec 29 2008 11:45 PM\n12-29-2008\n29 Dec 08\n29 Dec 2008 16:25:46.635\n</code></pre><h3 id=\"7、MySQL获取季度的函数QUARTER-d\"><a href=\"#7、MySQL获取季度的函数QUARTER-d\" class=\"headerlink\" title=\"7、MySQL获取季度的函数QUARTER(d)\"></a>7、MySQL获取季度的函数QUARTER(d)</h3><p>QUARTER(d)函数返回日期d是一年中的第几季度。值的范围是1～4。</p>\n<p>实例</p>\n<p>使用QUARTER()函数返回指定日期对应的季度。SQL语句如下：</p>\n<pre><code>mysql&gt;SELECT QUARTER(&apos;14-09-29&apos;);\n</code></pre><p>执行结果如下：<br><img src=\"https://i.imgur.com/L2TXznO.gif\" alt=\"\"><br>从上图中代码执行的结果可以看出，14年9月29日是2014年的第3个季度。</p>\n<hr>\n<p>提示</p>\n<p>“00～69”转换为“2000～2069”，“70～99”转换为“1970～1999”。</p>\n<h3 id=\"8、MySQL-的-YEARWEEK-函数：\"><a href=\"#8、MySQL-的-YEARWEEK-函数：\" class=\"headerlink\" title=\"8、MySQL 的 YEARWEEK()函数：\"></a>8、MySQL 的 YEARWEEK()函数：</h3><p>它是获取年份和周数的一个函数，<br>函数形式为 </p>\n<pre><code>YEARWEEK(date[,mode])\n</code></pre><p>例如 2010-3-14 ，礼拜天</p>\n<pre><code>SELECT YEARWEEK(&apos;2010-3-14&apos;) \n</code></pre><p>返回<br> 11</p>\n<pre><code>SELECT YEARWEEK(&apos;2010-3-14&apos;,1) \n</code></pre><p>返回<br> 10</p>\n<p>其中第二个参数是 mode ，具体指的意思如下：</p>\n<pre><code>Mode | First day of week  | Range |  Week 1 is the first week …\n0             Sunday             0-53     with a Sunday in this year\n1             Monday             0-53     with more than 3 days this year\n2             Sunday             1-53     with a Sunday in this year\n3             Monday             1-53     with more than 3 days this year\n4             Sunday             0-53     with more than 3 days this year\n5             Monday             0-53     with a Monday in this year\n6             Sunday             1-53     with more than 3 days this year\n7             Monday             1-53     with a Monday in this year\n</code></pre><p>多字段去重查询</p>\n<pre><code>where concat(`字段1`, `字段2`, `字段3`,...) like ...\n</code></pre><p>查看mysql安装目录</p>\n<pre><code>select @@basedir as basePath from dual\n</code></pre>"},{"title":"php","date":"2016-04-01T02:27:12.000Z","description":"一些关于php的自学笔记","_content":"\nPHP 脚本以 <?php 开头，以 ?> 结尾：\n\nLocal 和 Global 作用域\n函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。\n函数内部声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。\n\necho 和 print 之间的差异：\n\n + echo - 能够输出一个以上的字符串，每个字符串用“,”隔开\n + print - 只能输出一个字符串，并始终返回 1\n\n\nstrlen() 函数返回字符串的长度，以字符计。\n\nstrpos() 函数用于检索字符串内指定的字符或文本。\n如果找到匹配，则会返回首个匹配的字符位置。如果未找到匹配，则将返回 FALSE。\n\ncount() 函数用于返回数组的长度（元素数）：","source":"_posts/php.md","raw":"---\ntitle: php\ndate: 2016-04-01 10:27:12\ndescription: '一些关于php的自学笔记'\ntags: 'php'\ncategories: '后端'\n\n---\n\nPHP 脚本以 <?php 开头，以 ?> 结尾：\n\nLocal 和 Global 作用域\n函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。\n函数内部声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。\n\necho 和 print 之间的差异：\n\n + echo - 能够输出一个以上的字符串，每个字符串用“,”隔开\n + print - 只能输出一个字符串，并始终返回 1\n\n\nstrlen() 函数返回字符串的长度，以字符计。\n\nstrpos() 函数用于检索字符串内指定的字符或文本。\n如果找到匹配，则会返回首个匹配的字符位置。如果未找到匹配，则将返回 FALSE。\n\ncount() 函数用于返回数组的长度（元素数）：","slug":"php","published":1,"updated":"2018-12-17T13:37:49.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0icy001b1wu0h24yha7f","content":"<p>PHP 脚本以 &lt;?php 开头，以 ?&gt; 结尾：</p>\n<p>Local 和 Global 作用域<br>函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。<br>函数内部声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。</p>\n<p>echo 和 print 之间的差异：</p>\n<ul>\n<li>echo - 能够输出一个以上的字符串，每个字符串用“,”隔开</li>\n<li>print - 只能输出一个字符串，并始终返回 1</li>\n</ul>\n<p>strlen() 函数返回字符串的长度，以字符计。</p>\n<p>strpos() 函数用于检索字符串内指定的字符或文本。<br>如果找到匹配，则会返回首个匹配的字符位置。如果未找到匹配，则将返回 FALSE。</p>\n<p>count() 函数用于返回数组的长度（元素数）：</p>\n","site":{"data":{}},"excerpt":"","more":"<p>PHP 脚本以 &lt;?php 开头，以 ?&gt; 结尾：</p>\n<p>Local 和 Global 作用域<br>函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。<br>函数内部声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。</p>\n<p>echo 和 print 之间的差异：</p>\n<ul>\n<li>echo - 能够输出一个以上的字符串，每个字符串用“,”隔开</li>\n<li>print - 只能输出一个字符串，并始终返回 1</li>\n</ul>\n<p>strlen() 函数返回字符串的长度，以字符计。</p>\n<p>strpos() 函数用于检索字符串内指定的字符或文本。<br>如果找到匹配，则会返回首个匹配的字符位置。如果未找到匹配，则将返回 FALSE。</p>\n<p>count() 函数用于返回数组的长度（元素数）：</p>\n"},{"title":"prototype、_ _proto_ _ 与constructor","date":"2018-06-20T02:27:12.000Z","description":"讲解JS中的prototype、_ _proto_ _ 与constructor","_content":"\n# 讲解JS中的prototype、_ _proto_ _ 与constructor\n---\n![](https://i.imgur.com/spnZ8Hr.png)\n--- \n\n### 首先，我们需要牢记两点：①__proto__和constructor属性是对象所独有的；② prototype属性是函数所独有的。但是由于JS中函数也是一种对象，所以函数也拥有__proto__和constructor属性，这点是致使我们产生困惑的很大原因之一\n\n## 一，_ _proto_ _\n\n  _ _proto_ _ 它是对象所独有的，可以看到__proto__属性都是由一个对象指向一个对象，即指向它们的原型对象（也可以理解为父对象），那么这个属性的作用是什么呢？它的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的__proto__属性所指向的那个对象（可以理解为父对象）里找，如果父对象也不存在这个属性，则继续往父对象的__proto__属性所指向的那个对象（可以理解为爷爷对象）里找，如果还没找到，则继续往上找….直到原型链顶端null（可以理解为原始人。。。），此时若还没找到，则返回undefined（可以理解为，再往上就已经不是“人”的范畴了，找不到了，到此为止），由以上这种通过__proto__属性来连接对象直到null的一条链即为我们所谓的原型链。\n\n## 二，prototype\n\nprototype属性，别忘了一点，就是我们前面提到要牢记的两点中的第二点，它是函数所独有的，它是从一个函数指向一个对象。它的含义是函数的原型对象，也就是这个函数（其实所有函数都可以作为构造函数）所创建的实例的原型对象，由此可知：f1.__proto__ === Foo.prototype，它们两个完全一样。那prototype属性的作用又是什么呢？它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。\n\n## constructor\nconstructor属性也是对象才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数，从图中可以看出Function这个对象比较特殊，它的构造函数就是它自己（因为Function可以看成是一个函数，也可以是一个对象），所有函数最终都是由Function()构造函数得来，所以constructor属性的终点就是Function()。\n\n---\n\n#总结一下： \n1. 我们需要牢记两点：①__proto__和constructor属性是对象所独有的；② prototype属性是函数所独有的，因为函数也是一种对象，所以函数也拥有__proto__和constructor属性。\n\n2. __proto__属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的__proto__属性所指向的那个对象（父对象）里找，一直找，直到__proto__属性的终点null，然后返回undefined，通过__proto__属性将对象连接起来的这条链路即我们所谓的原型链。\n\n3. prototype属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，即f1.__proto__ === Foo.prototype。\n\n4. constructor属性的含义就是指向该对象的构造函数，所有函数（此时看成对象了）最终的构造函数都指向Function()。\n\n![](https://i.imgur.com/nDwLg2Y.jpg)\n\n","source":"_posts/prototype、__proto__与constructor.md","raw":"---\ntitle: prototype、_ _proto_ _ 与constructor\ndate: 2018-06-20 10:27:12\ndescription: '讲解JS中的prototype、_ _proto_ _ 与constructor'\ntags: [js, 原型]\ncategories: '前端'\n\n---\n\n# 讲解JS中的prototype、_ _proto_ _ 与constructor\n---\n![](https://i.imgur.com/spnZ8Hr.png)\n--- \n\n### 首先，我们需要牢记两点：①__proto__和constructor属性是对象所独有的；② prototype属性是函数所独有的。但是由于JS中函数也是一种对象，所以函数也拥有__proto__和constructor属性，这点是致使我们产生困惑的很大原因之一\n\n## 一，_ _proto_ _\n\n  _ _proto_ _ 它是对象所独有的，可以看到__proto__属性都是由一个对象指向一个对象，即指向它们的原型对象（也可以理解为父对象），那么这个属性的作用是什么呢？它的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的__proto__属性所指向的那个对象（可以理解为父对象）里找，如果父对象也不存在这个属性，则继续往父对象的__proto__属性所指向的那个对象（可以理解为爷爷对象）里找，如果还没找到，则继续往上找….直到原型链顶端null（可以理解为原始人。。。），此时若还没找到，则返回undefined（可以理解为，再往上就已经不是“人”的范畴了，找不到了，到此为止），由以上这种通过__proto__属性来连接对象直到null的一条链即为我们所谓的原型链。\n\n## 二，prototype\n\nprototype属性，别忘了一点，就是我们前面提到要牢记的两点中的第二点，它是函数所独有的，它是从一个函数指向一个对象。它的含义是函数的原型对象，也就是这个函数（其实所有函数都可以作为构造函数）所创建的实例的原型对象，由此可知：f1.__proto__ === Foo.prototype，它们两个完全一样。那prototype属性的作用又是什么呢？它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。\n\n## constructor\nconstructor属性也是对象才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数，从图中可以看出Function这个对象比较特殊，它的构造函数就是它自己（因为Function可以看成是一个函数，也可以是一个对象），所有函数最终都是由Function()构造函数得来，所以constructor属性的终点就是Function()。\n\n---\n\n#总结一下： \n1. 我们需要牢记两点：①__proto__和constructor属性是对象所独有的；② prototype属性是函数所独有的，因为函数也是一种对象，所以函数也拥有__proto__和constructor属性。\n\n2. __proto__属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的__proto__属性所指向的那个对象（父对象）里找，一直找，直到__proto__属性的终点null，然后返回undefined，通过__proto__属性将对象连接起来的这条链路即我们所谓的原型链。\n\n3. prototype属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，即f1.__proto__ === Foo.prototype。\n\n4. constructor属性的含义就是指向该对象的构造函数，所有函数（此时看成对象了）最终的构造函数都指向Function()。\n\n![](https://i.imgur.com/nDwLg2Y.jpg)\n\n","slug":"prototype、__proto__与constructor","published":1,"updated":"2018-12-17T13:37:49.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0id1001e1wu06j8ksbku","content":"<h1 id=\"讲解JS中的prototype、-proto-与constructor\"><a href=\"#讲解JS中的prototype、-proto-与constructor\" class=\"headerlink\" title=\"讲解JS中的prototype、_ proto _ 与constructor\"></a>讲解JS中的prototype、_ <em>proto</em> _ 与constructor</h1><hr>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://i.imgur.com/spnZ8Hr.png\" alt=\"\"></h2><h3 id=\"首先，我们需要牢记两点：①proto和constructor属性是对象所独有的；②-prototype属性是函数所独有的。但是由于JS中函数也是一种对象，所以函数也拥有proto和constructor属性，这点是致使我们产生困惑的很大原因之一\"><a href=\"#首先，我们需要牢记两点：①proto和constructor属性是对象所独有的；②-prototype属性是函数所独有的。但是由于JS中函数也是一种对象，所以函数也拥有proto和constructor属性，这点是致使我们产生困惑的很大原因之一\" class=\"headerlink\" title=\"首先，我们需要牢记两点：①proto和constructor属性是对象所独有的；② prototype属性是函数所独有的。但是由于JS中函数也是一种对象，所以函数也拥有proto和constructor属性，这点是致使我们产生困惑的很大原因之一\"></a>首先，我们需要牢记两点：①<strong>proto</strong>和constructor属性是对象所独有的；② prototype属性是函数所独有的。但是由于JS中函数也是一种对象，所以函数也拥有<strong>proto</strong>和constructor属性，这点是致使我们产生困惑的很大原因之一</h3><h2 id=\"一，-proto\"><a href=\"#一，-proto\" class=\"headerlink\" title=\"一，_ proto _\"></a>一，_ <em>proto</em> _</h2><p>  _ <em>proto</em> _ 它是对象所独有的，可以看到<strong>proto</strong>属性都是由一个对象指向一个对象，即指向它们的原型对象（也可以理解为父对象），那么这个属性的作用是什么呢？它的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<strong>proto</strong>属性所指向的那个对象（可以理解为父对象）里找，如果父对象也不存在这个属性，则继续往父对象的<strong>proto</strong>属性所指向的那个对象（可以理解为爷爷对象）里找，如果还没找到，则继续往上找….直到原型链顶端null（可以理解为原始人。。。），此时若还没找到，则返回undefined（可以理解为，再往上就已经不是“人”的范畴了，找不到了，到此为止），由以上这种通过<strong>proto</strong>属性来连接对象直到null的一条链即为我们所谓的原型链。</p>\n<h2 id=\"二，prototype\"><a href=\"#二，prototype\" class=\"headerlink\" title=\"二，prototype\"></a>二，prototype</h2><p>prototype属性，别忘了一点，就是我们前面提到要牢记的两点中的第二点，它是函数所独有的，它是从一个函数指向一个对象。它的含义是函数的原型对象，也就是这个函数（其实所有函数都可以作为构造函数）所创建的实例的原型对象，由此可知：f1.<strong>proto</strong> === Foo.prototype，它们两个完全一样。那prototype属性的作用又是什么呢？它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。</p>\n<h2 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h2><p>constructor属性也是对象才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数，从图中可以看出Function这个对象比较特殊，它的构造函数就是它自己（因为Function可以看成是一个函数，也可以是一个对象），所有函数最终都是由Function()构造函数得来，所以constructor属性的终点就是Function()。</p>\n<hr>\n<p>#总结一下： </p>\n<ol>\n<li><p>我们需要牢记两点：①<strong>proto</strong>和constructor属性是对象所独有的；② prototype属性是函数所独有的，因为函数也是一种对象，所以函数也拥有<strong>proto</strong>和constructor属性。</p>\n</li>\n<li><p><strong>proto</strong>属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<strong>proto</strong>属性所指向的那个对象（父对象）里找，一直找，直到<strong>proto</strong>属性的终点null，然后返回undefined，通过<strong>proto</strong>属性将对象连接起来的这条链路即我们所谓的原型链。</p>\n</li>\n<li><p>prototype属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，即f1.<strong>proto</strong> === Foo.prototype。</p>\n</li>\n<li><p>constructor属性的含义就是指向该对象的构造函数，所有函数（此时看成对象了）最终的构造函数都指向Function()。</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/nDwLg2Y.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"讲解JS中的prototype、-proto-与constructor\"><a href=\"#讲解JS中的prototype、-proto-与constructor\" class=\"headerlink\" title=\"讲解JS中的prototype、_ proto _ 与constructor\"></a>讲解JS中的prototype、_ <em>proto</em> _ 与constructor</h1><hr>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://i.imgur.com/spnZ8Hr.png\" alt=\"\"></h2><h3 id=\"首先，我们需要牢记两点：①proto和constructor属性是对象所独有的；②-prototype属性是函数所独有的。但是由于JS中函数也是一种对象，所以函数也拥有proto和constructor属性，这点是致使我们产生困惑的很大原因之一\"><a href=\"#首先，我们需要牢记两点：①proto和constructor属性是对象所独有的；②-prototype属性是函数所独有的。但是由于JS中函数也是一种对象，所以函数也拥有proto和constructor属性，这点是致使我们产生困惑的很大原因之一\" class=\"headerlink\" title=\"首先，我们需要牢记两点：①proto和constructor属性是对象所独有的；② prototype属性是函数所独有的。但是由于JS中函数也是一种对象，所以函数也拥有proto和constructor属性，这点是致使我们产生困惑的很大原因之一\"></a>首先，我们需要牢记两点：①<strong>proto</strong>和constructor属性是对象所独有的；② prototype属性是函数所独有的。但是由于JS中函数也是一种对象，所以函数也拥有<strong>proto</strong>和constructor属性，这点是致使我们产生困惑的很大原因之一</h3><h2 id=\"一，-proto\"><a href=\"#一，-proto\" class=\"headerlink\" title=\"一，_ proto _\"></a>一，_ <em>proto</em> _</h2><p>  _ <em>proto</em> _ 它是对象所独有的，可以看到<strong>proto</strong>属性都是由一个对象指向一个对象，即指向它们的原型对象（也可以理解为父对象），那么这个属性的作用是什么呢？它的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<strong>proto</strong>属性所指向的那个对象（可以理解为父对象）里找，如果父对象也不存在这个属性，则继续往父对象的<strong>proto</strong>属性所指向的那个对象（可以理解为爷爷对象）里找，如果还没找到，则继续往上找….直到原型链顶端null（可以理解为原始人。。。），此时若还没找到，则返回undefined（可以理解为，再往上就已经不是“人”的范畴了，找不到了，到此为止），由以上这种通过<strong>proto</strong>属性来连接对象直到null的一条链即为我们所谓的原型链。</p>\n<h2 id=\"二，prototype\"><a href=\"#二，prototype\" class=\"headerlink\" title=\"二，prototype\"></a>二，prototype</h2><p>prototype属性，别忘了一点，就是我们前面提到要牢记的两点中的第二点，它是函数所独有的，它是从一个函数指向一个对象。它的含义是函数的原型对象，也就是这个函数（其实所有函数都可以作为构造函数）所创建的实例的原型对象，由此可知：f1.<strong>proto</strong> === Foo.prototype，它们两个完全一样。那prototype属性的作用又是什么呢？它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。</p>\n<h2 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h2><p>constructor属性也是对象才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数，从图中可以看出Function这个对象比较特殊，它的构造函数就是它自己（因为Function可以看成是一个函数，也可以是一个对象），所有函数最终都是由Function()构造函数得来，所以constructor属性的终点就是Function()。</p>\n<hr>\n<p>#总结一下： </p>\n<ol>\n<li><p>我们需要牢记两点：①<strong>proto</strong>和constructor属性是对象所独有的；② prototype属性是函数所独有的，因为函数也是一种对象，所以函数也拥有<strong>proto</strong>和constructor属性。</p>\n</li>\n<li><p><strong>proto</strong>属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<strong>proto</strong>属性所指向的那个对象（父对象）里找，一直找，直到<strong>proto</strong>属性的终点null，然后返回undefined，通过<strong>proto</strong>属性将对象连接起来的这条链路即我们所谓的原型链。</p>\n</li>\n<li><p>prototype属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，即f1.<strong>proto</strong> === Foo.prototype。</p>\n</li>\n<li><p>constructor属性的含义就是指向该对象的构造函数，所有函数（此时看成对象了）最终的构造函数都指向Function()。</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/nDwLg2Y.jpg\" alt=\"\"></p>\n"},{"title":"vue踩坑","date":"2018-07-03T02:13:39.000Z","description":"一些关于我在开发vue框架开发过程中积累一些比较巧妙的地方的知识点，不断累计，持续更新~","_content":"\n\n\n##多个单页面应用 \n\n![](https://i.imgur.com/b7y8Yuq.png)\n\n---\n\n##路由命名\n在 import 路由文件后，我将它命名为Router，就会出现报错，最终发现原因是：\nrouter 才是Vue实例化的配置字段名称，写个其他的它当然不认识了。真是低级错误。\n给自己一个红牌警告！\n\n---\n\n","source":"_posts/vue踩坑.md","raw":"---\ntitle: vue踩坑\ndate: 2018-07-03 10:13:39\ntags: 框架\ncategories: '前端'\ndescription: '一些关于我在开发vue框架开发过程中积累一些比较巧妙的地方的知识点，不断累计，持续更新~'\n\n---\n\n\n\n##多个单页面应用 \n\n![](https://i.imgur.com/b7y8Yuq.png)\n\n---\n\n##路由命名\n在 import 路由文件后，我将它命名为Router，就会出现报错，最终发现原因是：\nrouter 才是Vue实例化的配置字段名称，写个其他的它当然不认识了。真是低级错误。\n给自己一个红牌警告！\n\n---\n\n","slug":"vue踩坑","published":1,"updated":"2018-12-17T13:37:49.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0id3001g1wu00e8jjp9j","content":"<p>##多个单页面应用 </p>\n<p><img src=\"https://i.imgur.com/b7y8Yuq.png\" alt=\"\"></p>\n<hr>\n<p>##路由命名<br>在 import 路由文件后，我将它命名为Router，就会出现报错，最终发现原因是：<br>router 才是Vue实例化的配置字段名称，写个其他的它当然不认识了。真是低级错误。<br>给自己一个红牌警告！</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>##多个单页面应用 </p>\n<p><img src=\"https://i.imgur.com/b7y8Yuq.png\" alt=\"\"></p>\n<hr>\n<p>##路由命名<br>在 import 路由文件后，我将它命名为Router，就会出现报错，最终发现原因是：<br>router 才是Vue实例化的配置字段名称，写个其他的它当然不认识了。真是低级错误。<br>给自己一个红牌警告！</p>\n<hr>\n"},{"title":"websocket教程","date":"2018-07-03T02:13:39.000Z","description":"websocket教程","_content":"\n# websocket教程\n---\n\n![](https://i.imgur.com/k9dbMl5.png)\n\n### HTTP 协议有一个缺陷：通信只能由客户端发起，于是websocket出现了。 websocket实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。可以和服务端实现实时通讯的功能。\n\n#### 下面是js代码demo和介绍\n\n\t<script type=\"text/javascript\">\n\t    var websocket = null;\n\t\n\t    //判断当前浏览器是否支持WebSocket\n\t    if('WebSocket' in window){\n\t        websocket = new WebSocket(\"ws://localhost:7081/websocket/123456\");\n\t    }\n\t    else{\n\t        alert('Not support websocket')\n\t    }\n\t\n\t    //连接发生错误的回调方法\n\t    websocket.onerror = function(event){\n\t        console.error(\"WebSocket error observed:\", event);\n\t    };\n\t\n\t    //连接成功建立的回调方法\n\t    websocket.onopen = function(event){\n\t         console.log(\"WebSocket connects successful:\", event);\n\t    }\n\t\n\t    //接收到消息的回调方法\n\t    websocket.onmessage = function(event){\n\t\t\talert(event.data);\n\t    }\n\t\n\t    //连接关闭的回调方法\n\t    websocket.onclose = function(){\n\t        \n\t    }\n\t\n\t    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\n\t    window.onbeforeunload = function(){\n\t        websocket.close();\n\t    }\n\t\n\t    //关闭连接\n\t     websocket.close();\n\t\n\t    //发送消息\n\t    websocket.send(\"hellow\");\n\t</script>\n\n---\n\n#### 下面是websocket在各大浏览器的兼容性情况\n\n\n![](https://i.imgur.com/Np3TCdV.png)\n\n","source":"_posts/websocket教程.md","raw":"---\ntitle: websocket教程\ndate: 2018-07-03 10:13:39\ntags: [http, 聊天通讯]\ncategories: '前端'\ndescription: 'websocket教程'\n\n---\n\n# websocket教程\n---\n\n![](https://i.imgur.com/k9dbMl5.png)\n\n### HTTP 协议有一个缺陷：通信只能由客户端发起，于是websocket出现了。 websocket实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。可以和服务端实现实时通讯的功能。\n\n#### 下面是js代码demo和介绍\n\n\t<script type=\"text/javascript\">\n\t    var websocket = null;\n\t\n\t    //判断当前浏览器是否支持WebSocket\n\t    if('WebSocket' in window){\n\t        websocket = new WebSocket(\"ws://localhost:7081/websocket/123456\");\n\t    }\n\t    else{\n\t        alert('Not support websocket')\n\t    }\n\t\n\t    //连接发生错误的回调方法\n\t    websocket.onerror = function(event){\n\t        console.error(\"WebSocket error observed:\", event);\n\t    };\n\t\n\t    //连接成功建立的回调方法\n\t    websocket.onopen = function(event){\n\t         console.log(\"WebSocket connects successful:\", event);\n\t    }\n\t\n\t    //接收到消息的回调方法\n\t    websocket.onmessage = function(event){\n\t\t\talert(event.data);\n\t    }\n\t\n\t    //连接关闭的回调方法\n\t    websocket.onclose = function(){\n\t        \n\t    }\n\t\n\t    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\n\t    window.onbeforeunload = function(){\n\t        websocket.close();\n\t    }\n\t\n\t    //关闭连接\n\t     websocket.close();\n\t\n\t    //发送消息\n\t    websocket.send(\"hellow\");\n\t</script>\n\n---\n\n#### 下面是websocket在各大浏览器的兼容性情况\n\n\n![](https://i.imgur.com/Np3TCdV.png)\n\n","slug":"websocket教程","published":1,"updated":"2018-12-17T13:37:49.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0id7001k1wu0p2lff4q8","content":"<h1 id=\"websocket教程\"><a href=\"#websocket教程\" class=\"headerlink\" title=\"websocket教程\"></a>websocket教程</h1><hr>\n<p><img src=\"https://i.imgur.com/k9dbMl5.png\" alt=\"\"></p>\n<h3 id=\"HTTP-协议有一个缺陷：通信只能由客户端发起，于是websocket出现了。-websocket实现了浏览器与服务器全双工-full-duplex-通信——允许服务器主动发送信息给客户端。可以和服务端实现实时通讯的功能。\"><a href=\"#HTTP-协议有一个缺陷：通信只能由客户端发起，于是websocket出现了。-websocket实现了浏览器与服务器全双工-full-duplex-通信——允许服务器主动发送信息给客户端。可以和服务端实现实时通讯的功能。\" class=\"headerlink\" title=\"HTTP 协议有一个缺陷：通信只能由客户端发起，于是websocket出现了。 websocket实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。可以和服务端实现实时通讯的功能。\"></a>HTTP 协议有一个缺陷：通信只能由客户端发起，于是websocket出现了。 websocket实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。可以和服务端实现实时通讯的功能。</h3><h4 id=\"下面是js代码demo和介绍\"><a href=\"#下面是js代码demo和介绍\" class=\"headerlink\" title=\"下面是js代码demo和介绍\"></a>下面是js代码demo和介绍</h4><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    var websocket = null;\n\n    //判断当前浏览器是否支持WebSocket\n    if(&apos;WebSocket&apos; in window){\n        websocket = new WebSocket(&quot;ws://localhost:7081/websocket/123456&quot;);\n    }\n    else{\n        alert(&apos;Not support websocket&apos;)\n    }\n\n    //连接发生错误的回调方法\n    websocket.onerror = function(event){\n        console.error(&quot;WebSocket error observed:&quot;, event);\n    };\n\n    //连接成功建立的回调方法\n    websocket.onopen = function(event){\n         console.log(&quot;WebSocket connects successful:&quot;, event);\n    }\n\n    //接收到消息的回调方法\n    websocket.onmessage = function(event){\n        alert(event.data);\n    }\n\n    //连接关闭的回调方法\n    websocket.onclose = function(){\n\n    }\n\n    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\n    window.onbeforeunload = function(){\n        websocket.close();\n    }\n\n    //关闭连接\n     websocket.close();\n\n    //发送消息\n    websocket.send(&quot;hellow&quot;);\n&lt;/script&gt;\n</code></pre><hr>\n<h4 id=\"下面是websocket在各大浏览器的兼容性情况\"><a href=\"#下面是websocket在各大浏览器的兼容性情况\" class=\"headerlink\" title=\"下面是websocket在各大浏览器的兼容性情况\"></a>下面是websocket在各大浏览器的兼容性情况</h4><p><img src=\"https://i.imgur.com/Np3TCdV.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"websocket教程\"><a href=\"#websocket教程\" class=\"headerlink\" title=\"websocket教程\"></a>websocket教程</h1><hr>\n<p><img src=\"https://i.imgur.com/k9dbMl5.png\" alt=\"\"></p>\n<h3 id=\"HTTP-协议有一个缺陷：通信只能由客户端发起，于是websocket出现了。-websocket实现了浏览器与服务器全双工-full-duplex-通信——允许服务器主动发送信息给客户端。可以和服务端实现实时通讯的功能。\"><a href=\"#HTTP-协议有一个缺陷：通信只能由客户端发起，于是websocket出现了。-websocket实现了浏览器与服务器全双工-full-duplex-通信——允许服务器主动发送信息给客户端。可以和服务端实现实时通讯的功能。\" class=\"headerlink\" title=\"HTTP 协议有一个缺陷：通信只能由客户端发起，于是websocket出现了。 websocket实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。可以和服务端实现实时通讯的功能。\"></a>HTTP 协议有一个缺陷：通信只能由客户端发起，于是websocket出现了。 websocket实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。可以和服务端实现实时通讯的功能。</h3><h4 id=\"下面是js代码demo和介绍\"><a href=\"#下面是js代码demo和介绍\" class=\"headerlink\" title=\"下面是js代码demo和介绍\"></a>下面是js代码demo和介绍</h4><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    var websocket = null;\n\n    //判断当前浏览器是否支持WebSocket\n    if(&apos;WebSocket&apos; in window){\n        websocket = new WebSocket(&quot;ws://localhost:7081/websocket/123456&quot;);\n    }\n    else{\n        alert(&apos;Not support websocket&apos;)\n    }\n\n    //连接发生错误的回调方法\n    websocket.onerror = function(event){\n        console.error(&quot;WebSocket error observed:&quot;, event);\n    };\n\n    //连接成功建立的回调方法\n    websocket.onopen = function(event){\n         console.log(&quot;WebSocket connects successful:&quot;, event);\n    }\n\n    //接收到消息的回调方法\n    websocket.onmessage = function(event){\n        alert(event.data);\n    }\n\n    //连接关闭的回调方法\n    websocket.onclose = function(){\n\n    }\n\n    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\n    window.onbeforeunload = function(){\n        websocket.close();\n    }\n\n    //关闭连接\n     websocket.close();\n\n    //发送消息\n    websocket.send(&quot;hellow&quot;);\n&lt;/script&gt;\n</code></pre><hr>\n<h4 id=\"下面是websocket在各大浏览器的兼容性情况\"><a href=\"#下面是websocket在各大浏览器的兼容性情况\" class=\"headerlink\" title=\"下面是websocket在各大浏览器的兼容性情况\"></a>下面是websocket在各大浏览器的兼容性情况</h4><p><img src=\"https://i.imgur.com/Np3TCdV.png\" alt=\"\"></p>\n"},{"title":"前端兼容性积累","date":"2018-05-03T02:43:25.000Z","description":"一些关于我在永别vue框架开发过程中积累一些比较巧妙的地方的知识点，不断累计，持续更新~","_content":"\n\n# 一，IE6 IE7 IE8 不支持 JSON 对象。\n解决办法：\n调用的页面里引用json2.js即可解决问题(推荐方法)。\n即:<script type=\"text/JavaScript\" src=\"js/json2.js\"></script>\n下载地址http://www.json.org/json-zh.html\n\n# 二，ie678不支持jquery2.0以上版本\n解决办法：\n降低到1.9以下版本\n\n# 三，ie下的addeventlistener和queryselector的报错和innerHtml等事件的无效，ie中门户的头脚不能正常出现\n解决办法：\n用jquery封装好的方法\n\n# 四，ie下使用jquery ajax的时候，安全性拒绝访问域数据源。\n解决办法：\n\n- 1步骤，添加ajax的参数crossDomain: true == !(document.all),//设置crossDomain为true,解决ie9及其以下的juqey ajax无效直往errer回调\n- 2步骤，或者IE的安全设置：设置“通过域访问数据源” 为启动\n\n\n\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><!-- IE=edge告诉IE使用最新的引擎渲染网页，chrome=1则可以激活Chrome Frame -->\n\t\t    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=5/6/7/8/9/10/Edge\"><!-- 告诉IE浏览器，IE8/9都会以IE5，6，7，8，9，10，Edge引擎来渲染页面 -->\n\t\t    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE7/8/9/10\"><!-- 模仿IE7，8，9，10的行为 -->\n\t\t    <meta name=\"description\" content=\"轩辕实习工场是以就业为导向，为大学生提供云计算和大数据专业的实践教学与技能、素质培训，实现双证就业；平台提供线上实习、实习协调、创新创业、继续教育、培训认证等服务。\">\n\t\t    <script type=\"text/javascript\">\n\t\t        if (!-[1, ] && document.documentMode <= '8') {\n\t\t            alert(\n\t\t                '\\u4f60\\u7684\\u6d4f\\u89c8\\u5668\\u7248\\u672c\\u592a\\u006c\\u006f\\u0077\\u4e86\\u002c\\u5df2\\u7ecf\\u548c\\u65f6\\u4ee3\\u8131\\u8f68\\u4e86\\u002c\\u8bf7\\u66f4\\u65b0\\u5230\\u0069\\u0065\\u0039\\u53ca\\u5176\\u4ee5\\u4e0a\\u7684\\u7248\\u672c\\uff1b\\u6216\\u4f7f\\u7528\\u8c37\\u6b4c\\uff0c\\u706b\\u72d0\\uff0c\\u0033\\u0036\\u0030\\u7b49\\u6d4f\\u89c8\\u5668\\u8bbf\\u95ee'\n\t\t            );\n\t\t        }// !-[1, ]这是一个判断IE浏览器的精简脚本; documentMode 是 IE 浏览器特定属性\n\t\t    </script>","source":"_posts/前端兼容性积累.md","raw":"---\ntitle: 前端兼容性积累\ndate: 2018-05-03 10:43:25\ntags: 兼容性\ncategories: '前端'\ndescription: '一些关于我在永别vue框架开发过程中积累一些比较巧妙的地方的知识点，不断累计，持续更新~'\n\n---\n\n\n# 一，IE6 IE7 IE8 不支持 JSON 对象。\n解决办法：\n调用的页面里引用json2.js即可解决问题(推荐方法)。\n即:<script type=\"text/JavaScript\" src=\"js/json2.js\"></script>\n下载地址http://www.json.org/json-zh.html\n\n# 二，ie678不支持jquery2.0以上版本\n解决办法：\n降低到1.9以下版本\n\n# 三，ie下的addeventlistener和queryselector的报错和innerHtml等事件的无效，ie中门户的头脚不能正常出现\n解决办法：\n用jquery封装好的方法\n\n# 四，ie下使用jquery ajax的时候，安全性拒绝访问域数据源。\n解决办法：\n\n- 1步骤，添加ajax的参数crossDomain: true == !(document.all),//设置crossDomain为true,解决ie9及其以下的juqey ajax无效直往errer回调\n- 2步骤，或者IE的安全设置：设置“通过域访问数据源” 为启动\n\n\n\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><!-- IE=edge告诉IE使用最新的引擎渲染网页，chrome=1则可以激活Chrome Frame -->\n\t\t    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=5/6/7/8/9/10/Edge\"><!-- 告诉IE浏览器，IE8/9都会以IE5，6，7，8，9，10，Edge引擎来渲染页面 -->\n\t\t    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE7/8/9/10\"><!-- 模仿IE7，8，9，10的行为 -->\n\t\t    <meta name=\"description\" content=\"轩辕实习工场是以就业为导向，为大学生提供云计算和大数据专业的实践教学与技能、素质培训，实现双证就业；平台提供线上实习、实习协调、创新创业、继续教育、培训认证等服务。\">\n\t\t    <script type=\"text/javascript\">\n\t\t        if (!-[1, ] && document.documentMode <= '8') {\n\t\t            alert(\n\t\t                '\\u4f60\\u7684\\u6d4f\\u89c8\\u5668\\u7248\\u672c\\u592a\\u006c\\u006f\\u0077\\u4e86\\u002c\\u5df2\\u7ecf\\u548c\\u65f6\\u4ee3\\u8131\\u8f68\\u4e86\\u002c\\u8bf7\\u66f4\\u65b0\\u5230\\u0069\\u0065\\u0039\\u53ca\\u5176\\u4ee5\\u4e0a\\u7684\\u7248\\u672c\\uff1b\\u6216\\u4f7f\\u7528\\u8c37\\u6b4c\\uff0c\\u706b\\u72d0\\uff0c\\u0033\\u0036\\u0030\\u7b49\\u6d4f\\u89c8\\u5668\\u8bbf\\u95ee'\n\t\t            );\n\t\t        }// !-[1, ]这是一个判断IE浏览器的精简脚本; documentMode 是 IE 浏览器特定属性\n\t\t    </script>","slug":"前端兼容性积累","published":1,"updated":"2018-12-17T13:37:49.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0id9001n1wu0vuo4bgiz","content":"<h1 id=\"一，IE6-IE7-IE8-不支持-JSON-对象。\"><a href=\"#一，IE6-IE7-IE8-不支持-JSON-对象。\" class=\"headerlink\" title=\"一，IE6 IE7 IE8 不支持 JSON 对象。\"></a>一，IE6 IE7 IE8 不支持 JSON 对象。</h1><p>解决办法：<br>调用的页面里引用json2.js即可解决问题(推荐方法)。<br>即:<script type=\"text/JavaScript\" src=\"js/json2.js\"></script><br>下载地址<a href=\"http://www.json.org/json-zh.html\" target=\"_blank\" rel=\"noopener\">http://www.json.org/json-zh.html</a></p>\n<h1 id=\"二，ie678不支持jquery2-0以上版本\"><a href=\"#二，ie678不支持jquery2-0以上版本\" class=\"headerlink\" title=\"二，ie678不支持jquery2.0以上版本\"></a>二，ie678不支持jquery2.0以上版本</h1><p>解决办法：<br>降低到1.9以下版本</p>\n<h1 id=\"三，ie下的addeventlistener和queryselector的报错和innerHtml等事件的无效，ie中门户的头脚不能正常出现\"><a href=\"#三，ie下的addeventlistener和queryselector的报错和innerHtml等事件的无效，ie中门户的头脚不能正常出现\" class=\"headerlink\" title=\"三，ie下的addeventlistener和queryselector的报错和innerHtml等事件的无效，ie中门户的头脚不能正常出现\"></a>三，ie下的addeventlistener和queryselector的报错和innerHtml等事件的无效，ie中门户的头脚不能正常出现</h1><p>解决办法：<br>用jquery封装好的方法</p>\n<h1 id=\"四，ie下使用jquery-ajax的时候，安全性拒绝访问域数据源。\"><a href=\"#四，ie下使用jquery-ajax的时候，安全性拒绝访问域数据源。\" class=\"headerlink\" title=\"四，ie下使用jquery ajax的时候，安全性拒绝访问域数据源。\"></a>四，ie下使用jquery ajax的时候，安全性拒绝访问域数据源。</h1><p>解决办法：</p>\n<ul>\n<li>1步骤，添加ajax的参数crossDomain: true == !(document.all),//设置crossDomain为true,解决ie9及其以下的juqey ajax无效直往errer回调</li>\n<li>2步骤，或者IE的安全设置：设置“通过域访问数据源” 为启动</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;&lt;!-- IE=edge告诉IE使用最新的引擎渲染网页，chrome=1则可以激活Chrome Frame --&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=5/6/7/8/9/10/Edge&quot;&gt;&lt;!-- 告诉IE浏览器，IE8/9都会以IE5，6，7，8，9，10，Edge引擎来渲染页面 --&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=EmulateIE7/8/9/10&quot;&gt;&lt;!-- 模仿IE7，8，9，10的行为 --&gt;\n    &lt;meta name=&quot;description&quot; content=&quot;轩辕实习工场是以就业为导向，为大学生提供云计算和大数据专业的实践教学与技能、素质培训，实现双证就业；平台提供线上实习、实习协调、创新创业、继续教育、培训认证等服务。&quot;&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n        if (!-[1, ] &amp;&amp; document.documentMode &lt;= &apos;8&apos;) {\n            alert(\n                &apos;\\u4f60\\u7684\\u6d4f\\u89c8\\u5668\\u7248\\u672c\\u592a\\u006c\\u006f\\u0077\\u4e86\\u002c\\u5df2\\u7ecf\\u548c\\u65f6\\u4ee3\\u8131\\u8f68\\u4e86\\u002c\\u8bf7\\u66f4\\u65b0\\u5230\\u0069\\u0065\\u0039\\u53ca\\u5176\\u4ee5\\u4e0a\\u7684\\u7248\\u672c\\uff1b\\u6216\\u4f7f\\u7528\\u8c37\\u6b4c\\uff0c\\u706b\\u72d0\\uff0c\\u0033\\u0036\\u0030\\u7b49\\u6d4f\\u89c8\\u5668\\u8bbf\\u95ee&apos;\n            );\n        }// !-[1, ]这是一个判断IE浏览器的精简脚本; documentMode 是 IE 浏览器特定属性\n    &lt;/script&gt;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一，IE6-IE7-IE8-不支持-JSON-对象。\"><a href=\"#一，IE6-IE7-IE8-不支持-JSON-对象。\" class=\"headerlink\" title=\"一，IE6 IE7 IE8 不支持 JSON 对象。\"></a>一，IE6 IE7 IE8 不支持 JSON 对象。</h1><p>解决办法：<br>调用的页面里引用json2.js即可解决问题(推荐方法)。<br>即:<script type=\"text/JavaScript\" src=\"js/json2.js\"></script><br>下载地址<a href=\"http://www.json.org/json-zh.html\" target=\"_blank\" rel=\"noopener\">http://www.json.org/json-zh.html</a></p>\n<h1 id=\"二，ie678不支持jquery2-0以上版本\"><a href=\"#二，ie678不支持jquery2-0以上版本\" class=\"headerlink\" title=\"二，ie678不支持jquery2.0以上版本\"></a>二，ie678不支持jquery2.0以上版本</h1><p>解决办法：<br>降低到1.9以下版本</p>\n<h1 id=\"三，ie下的addeventlistener和queryselector的报错和innerHtml等事件的无效，ie中门户的头脚不能正常出现\"><a href=\"#三，ie下的addeventlistener和queryselector的报错和innerHtml等事件的无效，ie中门户的头脚不能正常出现\" class=\"headerlink\" title=\"三，ie下的addeventlistener和queryselector的报错和innerHtml等事件的无效，ie中门户的头脚不能正常出现\"></a>三，ie下的addeventlistener和queryselector的报错和innerHtml等事件的无效，ie中门户的头脚不能正常出现</h1><p>解决办法：<br>用jquery封装好的方法</p>\n<h1 id=\"四，ie下使用jquery-ajax的时候，安全性拒绝访问域数据源。\"><a href=\"#四，ie下使用jquery-ajax的时候，安全性拒绝访问域数据源。\" class=\"headerlink\" title=\"四，ie下使用jquery ajax的时候，安全性拒绝访问域数据源。\"></a>四，ie下使用jquery ajax的时候，安全性拒绝访问域数据源。</h1><p>解决办法：</p>\n<ul>\n<li>1步骤，添加ajax的参数crossDomain: true == !(document.all),//设置crossDomain为true,解决ie9及其以下的juqey ajax无效直往errer回调</li>\n<li>2步骤，或者IE的安全设置：设置“通过域访问数据源” 为启动</li>\n</ul>\n<pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;&lt;!-- IE=edge告诉IE使用最新的引擎渲染网页，chrome=1则可以激活Chrome Frame --&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=5/6/7/8/9/10/Edge&quot;&gt;&lt;!-- 告诉IE浏览器，IE8/9都会以IE5，6，7，8，9，10，Edge引擎来渲染页面 --&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=EmulateIE7/8/9/10&quot;&gt;&lt;!-- 模仿IE7，8，9，10的行为 --&gt;\n    &lt;meta name=&quot;description&quot; content=&quot;轩辕实习工场是以就业为导向，为大学生提供云计算和大数据专业的实践教学与技能、素质培训，实现双证就业；平台提供线上实习、实习协调、创新创业、继续教育、培训认证等服务。&quot;&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n        if (!-[1, ] &amp;&amp; document.documentMode &lt;= &apos;8&apos;) {\n            alert(\n                &apos;\\u4f60\\u7684\\u6d4f\\u89c8\\u5668\\u7248\\u672c\\u592a\\u006c\\u006f\\u0077\\u4e86\\u002c\\u5df2\\u7ecf\\u548c\\u65f6\\u4ee3\\u8131\\u8f68\\u4e86\\u002c\\u8bf7\\u66f4\\u65b0\\u5230\\u0069\\u0065\\u0039\\u53ca\\u5176\\u4ee5\\u4e0a\\u7684\\u7248\\u672c\\uff1b\\u6216\\u4f7f\\u7528\\u8c37\\u6b4c\\uff0c\\u706b\\u72d0\\uff0c\\u0033\\u0036\\u0030\\u7b49\\u6d4f\\u89c8\\u5668\\u8bbf\\u95ee&apos;\n            );\n        }// !-[1, ]这是一个判断IE浏览器的精简脚本; documentMode 是 IE 浏览器特定属性\n    &lt;/script&gt;\n</code></pre>"},{"title":"把es6编译成es5（兼容性）","date":"2018-07-03T01:55:16.000Z","description":"vue2.0编译打包后的语法版本兼容性问题处理","_content":"\n\n##1, 解决过程第一步\nIE浏览器报Promise未定义的错误\n背景： 一个vue-cli构建的vue项目，一个使用angular的项目，两个项目在其他浏览器一切正常，但是ie中会报Promise未定义的错误\n \n解决办法： \n\n####vue的项目：\n\n- 1. 　npm install babel-polyfill --save\n- 2. 　在main.ts中 import \"babel-polyfill\"\n- 3.    如果使用了vuex，则在vuex的index.ts文件中也要  import \"babel-polyfill\"，最好放在 import Vuex from 'vuex' 的前面\n \n####angular的项目：\n这个项目比较老，都是采用文件引入的方式，所以用import的方式会报错，这里解决办法：\n\n- 1.    npm install babel-polyfill --save\n- 2.    从  node_modules  文件夹下找到 _babel-polyfill@6.26.0@babel-polyfill  (名字根据版本号改变)下的  dist  中  polyfill.min.js ，  将其拷贝到一个文件夹中，我这里是babel-polyfill\n- 3.    在引入文件的index.html中引入即可,  <script src=\"/babel-polyfill/polyfill.min.js\" type=\"text/javascript\"></script>\n\n##2, 解决过程第二步\nhttps://www.jianshu.com/p/2b373b0910ed\n\n安装babel-cli \n\n\tnpm install --save-dev babel-cli\n装Babel的preset以正确识别ES6代码  \n\n\tnpm install --save-dev babel-preset-es2015\n然后再在项目根目录下面新建一个名为 .babelrc 文件，内容如下：\n\n\t{\n\t  \"presets\": [\n\t    \"es2015\"\n\t  ]\n\t}","source":"_posts/把es6编译成es5（兼容性）.md","raw":"---\ntitle: 把es6编译成es5（兼容性）\ndate: 2018-07-03 09:55:16\ntags: '架构'\ncategories: '前端'\ndescription: 'vue2.0编译打包后的语法版本兼容性问题处理'\n\n---\n\n\n##1, 解决过程第一步\nIE浏览器报Promise未定义的错误\n背景： 一个vue-cli构建的vue项目，一个使用angular的项目，两个项目在其他浏览器一切正常，但是ie中会报Promise未定义的错误\n \n解决办法： \n\n####vue的项目：\n\n- 1. 　npm install babel-polyfill --save\n- 2. 　在main.ts中 import \"babel-polyfill\"\n- 3.    如果使用了vuex，则在vuex的index.ts文件中也要  import \"babel-polyfill\"，最好放在 import Vuex from 'vuex' 的前面\n \n####angular的项目：\n这个项目比较老，都是采用文件引入的方式，所以用import的方式会报错，这里解决办法：\n\n- 1.    npm install babel-polyfill --save\n- 2.    从  node_modules  文件夹下找到 _babel-polyfill@6.26.0@babel-polyfill  (名字根据版本号改变)下的  dist  中  polyfill.min.js ，  将其拷贝到一个文件夹中，我这里是babel-polyfill\n- 3.    在引入文件的index.html中引入即可,  <script src=\"/babel-polyfill/polyfill.min.js\" type=\"text/javascript\"></script>\n\n##2, 解决过程第二步\nhttps://www.jianshu.com/p/2b373b0910ed\n\n安装babel-cli \n\n\tnpm install --save-dev babel-cli\n装Babel的preset以正确识别ES6代码  \n\n\tnpm install --save-dev babel-preset-es2015\n然后再在项目根目录下面新建一个名为 .babelrc 文件，内容如下：\n\n\t{\n\t  \"presets\": [\n\t    \"es2015\"\n\t  ]\n\t}","slug":"把es6编译成es5（兼容性）","published":1,"updated":"2018-12-17T13:37:49.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0ide001q1wu0ocf8vkng","content":"<p>##1, 解决过程第一步<br>IE浏览器报Promise未定义的错误<br>背景： 一个vue-cli构建的vue项目，一个使用angular的项目，两个项目在其他浏览器一切正常，但是ie中会报Promise未定义的错误</p>\n<p>解决办法： </p>\n<p>####vue的项目：</p>\n<ul>\n<li><ol>\n<li>　npm install babel-polyfill –save</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>　在main.ts中 import “babel-polyfill”</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>如果使用了vuex，则在vuex的index.ts文件中也要  import “babel-polyfill”，最好放在 import Vuex from ‘vuex’ 的前面</li>\n</ol>\n</li>\n</ul>\n<p>####angular的项目：<br>这个项目比较老，都是采用文件引入的方式，所以用import的方式会报错，这里解决办法：</p>\n<ul>\n<li><ol>\n<li>npm install babel-polyfill –save</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>从  node_modules  文件夹下找到 <a href=\"mailto:_babel-polyfill@6.26.0\" target=\"_blank\" rel=\"noopener\">_babel-polyfill@6.26.0</a>@babel-polyfill  (名字根据版本号改变)下的  dist  中  polyfill.min.js ，  将其拷贝到一个文件夹中，我这里是babel-polyfill</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>在引入文件的index.html中引入即可,  <script src=\"/babel-polyfill/polyfill.min.js\" type=\"text/javascript\"></script></li>\n</ol>\n</li>\n</ul>\n<p>##2, 解决过程第二步<br><a href=\"https://www.jianshu.com/p/2b373b0910ed\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/2b373b0910ed</a></p>\n<p>安装babel-cli </p>\n<pre><code>npm install --save-dev babel-cli\n</code></pre><p>装Babel的preset以正确识别ES6代码  </p>\n<pre><code>npm install --save-dev babel-preset-es2015\n</code></pre><p>然后再在项目根目录下面新建一个名为 .babelrc 文件，内容如下：</p>\n<pre><code>{\n  &quot;presets&quot;: [\n    &quot;es2015&quot;\n  ]\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>##1, 解决过程第一步<br>IE浏览器报Promise未定义的错误<br>背景： 一个vue-cli构建的vue项目，一个使用angular的项目，两个项目在其他浏览器一切正常，但是ie中会报Promise未定义的错误</p>\n<p>解决办法： </p>\n<p>####vue的项目：</p>\n<ul>\n<li><ol>\n<li>　npm install babel-polyfill –save</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>　在main.ts中 import “babel-polyfill”</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>如果使用了vuex，则在vuex的index.ts文件中也要  import “babel-polyfill”，最好放在 import Vuex from ‘vuex’ 的前面</li>\n</ol>\n</li>\n</ul>\n<p>####angular的项目：<br>这个项目比较老，都是采用文件引入的方式，所以用import的方式会报错，这里解决办法：</p>\n<ul>\n<li><ol>\n<li>npm install babel-polyfill –save</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>从  node_modules  文件夹下找到 <a href=\"mailto:_babel-polyfill@6.26.0\" target=\"_blank\" rel=\"noopener\">_babel-polyfill@6.26.0</a>@babel-polyfill  (名字根据版本号改变)下的  dist  中  polyfill.min.js ，  将其拷贝到一个文件夹中，我这里是babel-polyfill</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>在引入文件的index.html中引入即可,  <script src=\"/babel-polyfill/polyfill.min.js\" type=\"text/javascript\"></script></li>\n</ol>\n</li>\n</ul>\n<p>##2, 解决过程第二步<br><a href=\"https://www.jianshu.com/p/2b373b0910ed\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/2b373b0910ed</a></p>\n<p>安装babel-cli </p>\n<pre><code>npm install --save-dev babel-cli\n</code></pre><p>装Babel的preset以正确识别ES6代码  </p>\n<pre><code>npm install --save-dev babel-preset-es2015\n</code></pre><p>然后再在项目根目录下面新建一个名为 .babelrc 文件，内容如下：</p>\n<pre><code>{\n  &quot;presets&quot;: [\n    &quot;es2015&quot;\n  ]\n}\n</code></pre>"},{"title":"webpack + react + antd + css_modules","date":"2018-11-25T02:27:12.000Z","description":"搭建webpack + react + antd + css_modules","_content":"\n# webpack + react + antd + css_modules\n---\n###下图是项目目录结构图，红色部分可直接忽略。\n\n![](https://i.imgur.com/GyCWtfh.png)\n\n## 一，初始化项目\n###新建项目文件夹，进入目录执行命令\n\n\t\tnpm init\n\n可以自动创建一个package.json文件。这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。\n\n## 二，安装webpack\n\n\t//全局安装\n\tnpm install -g webpack\n\t//安装到你的项目目录，在本项目中安装Webpack作为依赖包\n\tnpm install --save-dev webpack\n\n## 三，新建模板页面和入口js文件。\n\n### 在根目录下吸纳建src目录，此目录为存放源代码的目录。 进入src目录：\n\n1. 新建index.tmpl.html文件\n\n\t\t<!doctype html>\n\t\t<html lang=\"en\">\n\t\t\n\t\t<head>\n\t\t    <meta charset=\"UTF-8\">\n\t\t    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n\t\t    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\t\t    <title></title>\n\t\t</head>\n\t\t\n\t\t<body>\n\t\t    <div id=\"root\"></div>\n\t\t    <!-- <script type=\"text/javascript\" src=\"./static/layui/layui.all.js\"></script> -->\n\t\t    <!-- CDN外链的js引入可以写在这里，打包时候把js的整个文件夹copy到输出目录即可 -->\n\t\t</body>\n\t\t\n\t\t</html>\n\n2.新建index.js文件\n\n\timport React from 'react';\n\timport { render } from 'react-dom';\n\timport \"babel-polyfill\";\n\t\n\tclass App extends React.Component {\n\t    \n\t    render() {\n\t        return (\n\t            <div>\n\t                //此处可以用一级路由来分拨路由页面。 省略\n\t            </div>\n\t        )\n\t    }\n\t}\n\t\n\trender(<App />, document.getElementById('root'))\n\n## 四，正式使用webpack（一切皆模块）\n\n\nwebpack可以用本地开发服务器作为环境，亦可打包输出后在生产环境上执行。 因此开发环境和生产环境分开配置比较友好。\n\nWebpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。\n\nwebpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(...)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n### 开发环境\n\n进入根目录\n\n1. 新建webpack.config.js文件。\n\n\t\tconst webpack = require('webpack');\n\t\tconst HtmlWebpackPlugin = require('html-webpack-plugin');//第三方插件，需要安装\n\t\tconst path = require('path');\n\t\tconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");//第三方插件，需要安装\n\t\t\n\t\tmodule.exports = {\n\t\t    devtool: 'eval-source-map',//配置source maps，四种之一\n\t\t    devServer: {\n\t\t        contentBase: \"./dist\",//本地服务器所加载的页面所在的目录\n\t\t        historyApiFallback: true,//不跳转\n\t\t        inline: true,//实时刷新\n\t\t        hot: true\n\t\t    },\n\t\t    resolve: {\n\t\t        alias: {\n\t\t            '@': path.resolve(\"src\")//别名，在js文件访问src文件时候，可以直接用别名@代替\n\t\t        },\n\t\t        extensions: ['*', '.js', '.jsx', '.json', '.less', '.css']\n\t\t    },\n\t\t    module: {\n\t\t        rules: [\n\t\t            {\n\t\t                test: /(\\.jsx|\\.js)$/,\n\t\t                use: {\n\t\t                    loader: \"babel-loader\"\n\t\t                },\n\t\t                exclude: /node_modules/\n\t\t            },\n\t\t            {\n\t\t                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n\t\t                loader: 'url-loader',\n\t\t                options: {\n\t\t                    limit: 10000,\n\t\t                    outputPath: \"images\"\n\t\t                }\n\t\t            },\n\t\t            {\n\t\t                test: /(\\.less|\\.css)$/,\n\t\t                use: [//从下往上来选择解析\n\t\t                    MiniCssExtractPlugin.loader,\n\t\t                    {\n\t\t                        loader: 'css-loader',\n\t\t                        options: {\n\t\t                            importLoaders: 1,\n\t\t                            minimize: {\n\t\t                                autoprefixer: {\n\t\t                                    add: true,\n\t\t                                    remove: true,\n\t\t                                    browsers: ['last 2 versions'],\n\t\t                                },\n\t\t                                discardComments: {\n\t\t                                    removeAll: true,\n\t\t                                },\n\t\t                                discardUnused: false,\n\t\t                                mergeIdents: false,\n\t\t                                reduceIdents: false,\n\t\t                                safe: true\n\t\t                            }\n\t\t                        }\n\t\t                    },\n\t\t                    {\n\t\t                        loader: 'less-loader',\n\t\t                        options: {\n\t\t                            javascriptEnabled: true\n\t\t                        }\n\t\t                    }\n\t\t                ]\n\t\t            }\n\t\t        ],\n\t\t    },\n\t\t    plugins: [\n\t\t        new webpack.BannerPlugin('版权所有，翻版必究'),\n\t\t        new HtmlWebpackPlugin({//此插件可以配置多入口多页面\n\t\t            template: __dirname + \"/src/index.tmpl.html\",//一个这个插件的实例，并传入相关的参数\n\t\t            inject: true,\n\t\t            favicon: path.resolve('favicon.ico'),\n\t\t            minify: {\n\t\t                collapseWhitespace: true,\n\t\t            }\n\t\t        }),\n\t\t        new webpack.HotModuleReplacementPlugin(),//热加载插件\n\t\t        new webpack.optimize.OccurrenceOrderPlugin(),//为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n\t\t        new webpack.DefinePlugin({\n\t\t            'process.env': {\n\t\t                'http_env': JSON.stringify(process.env.http_env)\n\t\t            }\n\t\t        }),\n\t\t        new MiniCssExtractPlugin({//压缩JS代码，分离CSS和JS文件\n\t\t            filename: 'css/style.css',\n\t\t            chunkFilename: 'css/style.[contenthash:5].css'\n\t\t        }),\n\t\t    ],\n\t\t}\n\n2. Babel\n\nBabel用新不用旧，可以\n\nBabel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：\n\n- 让你能使用最新的JavaScript代码（ES6，ES7...），而不用管新标准是否被当前使用的浏览器完全支持；\n- 让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；\n- 新建.babelrc文件\n \n\t\t {\n\t\t    \"presets\": [\n\t\t      \"es2015\",\n\t\t      \"react\",\n\t\t      [\n\t\t        \"env\",\n\t\t        {\n\t\t          \"modules\": false,\n\t\t          \"useBuiltIns\": false,\n\t\t          \"uglify\": true,\n\t\t          \"targets\": {\n\t\t            \"browsers\": [\"last 2 versions\"]\n\t\t          }\n\t\t        }\n\t\t      ]\n\t\t    ],\n\t\t    \"plugins\": [\n\t\t      \"transform-decorators-legacy\",\n\t\t      \"transform-class-properties\",\n\t\t      \"syntax-dynamic-import\",\n\t\t      [\"transform-runtime\",{\"polyfill\": false}],\n\t\t      [\"transform-object-rest-spread\",{\"useBuiltIns\": true}],\n\t\t      [\"import\", { \"libraryName\": \"antd\", \"style\": true }]\n\t\t    ]\n\t\t  }\n\n其中transform-decorators-legacy为装饰器。\n\nBabel其实可以完全在 webpack.config.js 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。\n\n3. 同理postcss的配置也可以单独配置，减轻webpack的压力和复杂度。\n\n在根目录新建postcss.config.js\n\n\t// postcss.config.js\n\tmodule.exports = {\n\t    plugins: [\n\t        require('autoprefixer')\n\t    ]\n\t}\n\n4.新建webpack.production.config.js文件，比webpack.config.js多了output的配置，少了本地服务器的配置，其余可以不变。\n\n\tconst webpack = require('webpack');\n\tconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\tconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\n\tconst path = require('path');\n\tconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n\tconst CopyWebpackPlugin = require('copy-webpack-plugin');\n\t\n\tmodule.exports = {\n\t    devtool: \"null\",\n\t    entry: __dirname + \"/src/index.js\", //已多次提及的唯一入口文件\n\t    output: {\n\t        path: __dirname + \"/dist\", //打包后的文件存放的地方\n\t        filename: \"js/bundle.js\" //打包后输出文件的文件名\n\t    },\n\t    resolve: {\n\t        alias: {\n\t            '@': path.resolve(\"src\")\n\t        },\n\t        extensions: ['*', '.js', '.jsx', '.json', '.less', '.css']\n\t    },\n\t    module: {\n\t        rules: [\n\t            {\n\t                test: /(\\.jsx|\\.js)$/,\n\t                use: {\n\t                    loader: \"babel-loader\"\n\t                },\n\t                exclude: /node_modules/\n\t            },\n\t            {\n\t                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n\t                loader: 'url-loader',\n\t                options: {\n\t                    limit: 10000,\n\t                    outputPath: \"images\"\n\t                }\n\t            },\n\t            {\n\t                test: /(\\.less|\\.css)$/,\n\t                use: [\n\t                    MiniCssExtractPlugin.loader,\n\t                    {\n\t                        loader: 'css-loader',\n\t                        options: {\n\t                            importLoaders: 1,\n\t                            minimize: {\n\t                                autoprefixer: {\n\t                                    add: true,\n\t                                    remove: true,\n\t                                    browsers: ['last 2 versions'],\n\t                                },\n\t                                discardComments: {\n\t                                    removeAll: true,\n\t                                },\n\t                                discardUnused: false,\n\t                                mergeIdents: false,\n\t                                reduceIdents: false,\n\t                                safe: true\n\t                            }\n\t                        }\n\t                    },\n\t                    {\n\t                        loader: 'less-loader',\n\t                        options: {\n\t                            javascriptEnabled: true\n\t                        }\n\t                    }\n\t                ]\n\t            }\n\t        ]\n\t    },\n\t    plugins: [\n\t        new CleanWebpackPlugin(['dist', 'build'], { root: __dirname, verbose: true, dry: false }),\n\t        new webpack.BannerPlugin('版权所有，翻版必究'),\n\t        new HtmlWebpackPlugin({//此插件可以配置多入口多页面\n\t            template: __dirname + \"/src/index.tmpl.html\",//一个这个插件的实例，并传入相关的参数\n\t            inject: true,\n\t            favicon: path.resolve('favicon.ico'),\n\t            minify: {\n\t                collapseWhitespace: true,\n\t            }\n\t        }),\n\t        new webpack.HotModuleReplacementPlugin(),\n\t        new webpack.optimize.OccurrenceOrderPlugin(),\n\t        new webpack.DefinePlugin({\n\t            'process.env': {\n\t                'http_env': JSON.stringify(process.env.http_env)\n\t            }\n\t        }),\n\t        new MiniCssExtractPlugin({\n\t            filename: 'css/style.css',\n\t            chunkFilename: 'css/style.[contenthash:5].css'\n\t        }),\n\t        new CopyWebpackPlugin([{\n\t            from: path.join(__dirname, 'src/static'),\n\t            to: path.join(__dirname, 'dist', 'static')\n\t        }])\n\t    ]\n\t}\n\n\n## 五，修改package.json文件的script字段\n\n### script 是指定义了npm的脚本字段\n\nstart：用以开启本地服务器\nbuild： 执行webpack.production.config.js文件\n\n说明：cross-env为跨平台传参 NODE_ENV 和 http_env ，NODE_ENV是要指定开发环境还是生产环境，http_env是自定义的api主机ip地址，为测试环境和生产环境区分开来。支持多生产环境。\n\n\n\t{\n\t  \"name\": \"zzj-webpack-sample-project\",\n\t  \"version\": \"1.0.0\",\n\t  \"description\": \"这是我的第一个webpack个人搭建\",\n\t  \"scripts\": {\n\t    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\t    \"start\": \"webpack\",\n\t    \"server\": \"cross-env NODE_ENV=development http_env=development webpack-dev-server --open --mode development\",\n\t    \"build\": \"cross-env NODE_ENV=production http_env=production webpack --config ./webpack.production.config.js --progress --mode production\"\n\t  },\n\t  \"main\": \"main.js\",\n\t  \"dependencies\": {\n\t    \"@antv/data-set\": \"^0.9.6\",\n\t    \"@antv/g2\": \"^3.2.7\",\n\t    \"antd\": \"^3.10.8\",\n\t    \"axios\": \"^0.18.0\",\n\t    \"babel-plugin-transform-object-assign\": \"^6.22.0\",\n\t    \"babel-polyfill\": \"^6.26.0\",\n\t    \"codemirror\": \"^5.40.0\",\n\t    \"crypto-js\": \"^3.1.9-1\",\n\t    \"extract-text-webpack-plugin\": \"^4.0.0-beta.0\",\n\t    \"immutability-helper\": \"^2.8.1\",\n\t    \"jquery\": \"^3.3.1\",\n\t    \"js-cookie\": \"^2.2.0\",\n\t    \"layui-layer\": \"^1.0.9\",\n\t    \"mobx\": \"^4.1.0\",\n\t    \"mobx-react\": \"^5.0.0\",\n\t    \"object-assign\": \"^4.1.1\",\n\t    \"postcss-flexbugs-fixes\": \"^4.1.0\",\n\t    \"promise\": \"^8.0.1\",\n\t    \"react\": \"^16.2.0\",\n\t    \"react-codemirror\": \"^1.0.0\",\n\t    \"react-codemirror2\": \"^5.1.0\",\n\t    \"react-dnd\": \"^5.0.0\",\n\t    \"react-dnd-html5-backend\": \"^5.0.1\",\n\t    \"react-dom\": \"^16.2.0\",\n\t    \"react-loadable\": \"^5.3.1\",\n\t    \"react-router-dom\": \"^4.2.2\",\n\t    \"viser-react\": \"^2.3.3\",\n\t    \"webpack\": \"^4.26.0\",\n\t    \"whatwg-fetch\": \"^2.0.4\"\n\t  },\n\t  \"devDependencies\": {\n\t    \"autoprefixer\": \"^9.3.1\",\n\t    \"babel-cli\": \"^6.26.0\",\n\t    \"babel-core\": \"^6.26.0\",\n\t    \"babel-loader\": \"^7.1.3\",\n\t    \"babel-plugin-import\": \"^1.6.6\",\n\t    \"babel-plugin-react-transform\": \"^3.0.0\",\n\t    \"babel-plugin-syntax-dynamic-import\": \"^6.18.0\",\n\t    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n\t    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\n\t    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n\t    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n\t    \"babel-preset-env\": \"^1.6.1\",\n\t    \"babel-preset-es2015\": \"^6.24.1\",\n\t    \"babel-preset-react\": \"^6.24.1\",\n\t    \"babel-runtime\": \"^6.26.0\",\n\t    \"clean-webpack-plugin\": \"^1.0.0\",\n\t    \"compression\": \"^1.7.2\",\n\t    \"copy-webpack-plugin\": \"^4.5.1\",\n\t    \"cross-env\": \"^5.1.3\",\n\t    \"css-loader\": \"^0.28.11\",\n\t    \"express\": \"^4.16.2\",\n\t    \"file-loader\": \"^1.1.11\",\n\t    \"html-webpack-plugin\": \"^3.2.0\",\n\t    \"less\": \"^2.7.3\",\n\t    \"less-loader\": \"^4.1.0\",\n\t    \"mini-css-extract-plugin\": \"^0.4.5\",\n\t    \"opn\": \"^5.2.0\",\n\t    \"ora\": \"^2.0.0\",\n\t    \"postcss-loader\": \"^3.0.0\",\n\t    \"rimraf\": \"^2.6.2\",\n\t    \"style-loader\": \"^0.21.0\",\n\t    \"url-loader\": \"^1.0.1\",\n\t    \"webpack-cli\": \"^3.1.1\",\n\t    \"webpack-dev-middleware\": \"^3.1.3\",\n\t    \"webpack-dev-server\": \"^3.1.10\",\n\t    \"webpack-hot-middleware\": \"^2.22.1\"\n\t  },\n\t  \"author\": \"Tsang\",\n\t  \"license\": \"ISC\"\n\t}\n","source":"_posts/搭建webpack+react+antd+less+css_modules.md","raw":"---\ntitle: webpack + react + antd + css_modules\ndate: 2018-11-25 10:27:12\ndescription: '搭建webpack + react + antd + css_modules'\ntags: [js, 架构]\ncategories: '前端'\n\n---\n\n# webpack + react + antd + css_modules\n---\n###下图是项目目录结构图，红色部分可直接忽略。\n\n![](https://i.imgur.com/GyCWtfh.png)\n\n## 一，初始化项目\n###新建项目文件夹，进入目录执行命令\n\n\t\tnpm init\n\n可以自动创建一个package.json文件。这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。\n\n## 二，安装webpack\n\n\t//全局安装\n\tnpm install -g webpack\n\t//安装到你的项目目录，在本项目中安装Webpack作为依赖包\n\tnpm install --save-dev webpack\n\n## 三，新建模板页面和入口js文件。\n\n### 在根目录下吸纳建src目录，此目录为存放源代码的目录。 进入src目录：\n\n1. 新建index.tmpl.html文件\n\n\t\t<!doctype html>\n\t\t<html lang=\"en\">\n\t\t\n\t\t<head>\n\t\t    <meta charset=\"UTF-8\">\n\t\t    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n\t\t    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\t\t    <title></title>\n\t\t</head>\n\t\t\n\t\t<body>\n\t\t    <div id=\"root\"></div>\n\t\t    <!-- <script type=\"text/javascript\" src=\"./static/layui/layui.all.js\"></script> -->\n\t\t    <!-- CDN外链的js引入可以写在这里，打包时候把js的整个文件夹copy到输出目录即可 -->\n\t\t</body>\n\t\t\n\t\t</html>\n\n2.新建index.js文件\n\n\timport React from 'react';\n\timport { render } from 'react-dom';\n\timport \"babel-polyfill\";\n\t\n\tclass App extends React.Component {\n\t    \n\t    render() {\n\t        return (\n\t            <div>\n\t                //此处可以用一级路由来分拨路由页面。 省略\n\t            </div>\n\t        )\n\t    }\n\t}\n\t\n\trender(<App />, document.getElementById('root'))\n\n## 四，正式使用webpack（一切皆模块）\n\n\nwebpack可以用本地开发服务器作为环境，亦可打包输出后在生产环境上执行。 因此开发环境和生产环境分开配置比较友好。\n\nWebpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。\n\nwebpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(...)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n### 开发环境\n\n进入根目录\n\n1. 新建webpack.config.js文件。\n\n\t\tconst webpack = require('webpack');\n\t\tconst HtmlWebpackPlugin = require('html-webpack-plugin');//第三方插件，需要安装\n\t\tconst path = require('path');\n\t\tconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");//第三方插件，需要安装\n\t\t\n\t\tmodule.exports = {\n\t\t    devtool: 'eval-source-map',//配置source maps，四种之一\n\t\t    devServer: {\n\t\t        contentBase: \"./dist\",//本地服务器所加载的页面所在的目录\n\t\t        historyApiFallback: true,//不跳转\n\t\t        inline: true,//实时刷新\n\t\t        hot: true\n\t\t    },\n\t\t    resolve: {\n\t\t        alias: {\n\t\t            '@': path.resolve(\"src\")//别名，在js文件访问src文件时候，可以直接用别名@代替\n\t\t        },\n\t\t        extensions: ['*', '.js', '.jsx', '.json', '.less', '.css']\n\t\t    },\n\t\t    module: {\n\t\t        rules: [\n\t\t            {\n\t\t                test: /(\\.jsx|\\.js)$/,\n\t\t                use: {\n\t\t                    loader: \"babel-loader\"\n\t\t                },\n\t\t                exclude: /node_modules/\n\t\t            },\n\t\t            {\n\t\t                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n\t\t                loader: 'url-loader',\n\t\t                options: {\n\t\t                    limit: 10000,\n\t\t                    outputPath: \"images\"\n\t\t                }\n\t\t            },\n\t\t            {\n\t\t                test: /(\\.less|\\.css)$/,\n\t\t                use: [//从下往上来选择解析\n\t\t                    MiniCssExtractPlugin.loader,\n\t\t                    {\n\t\t                        loader: 'css-loader',\n\t\t                        options: {\n\t\t                            importLoaders: 1,\n\t\t                            minimize: {\n\t\t                                autoprefixer: {\n\t\t                                    add: true,\n\t\t                                    remove: true,\n\t\t                                    browsers: ['last 2 versions'],\n\t\t                                },\n\t\t                                discardComments: {\n\t\t                                    removeAll: true,\n\t\t                                },\n\t\t                                discardUnused: false,\n\t\t                                mergeIdents: false,\n\t\t                                reduceIdents: false,\n\t\t                                safe: true\n\t\t                            }\n\t\t                        }\n\t\t                    },\n\t\t                    {\n\t\t                        loader: 'less-loader',\n\t\t                        options: {\n\t\t                            javascriptEnabled: true\n\t\t                        }\n\t\t                    }\n\t\t                ]\n\t\t            }\n\t\t        ],\n\t\t    },\n\t\t    plugins: [\n\t\t        new webpack.BannerPlugin('版权所有，翻版必究'),\n\t\t        new HtmlWebpackPlugin({//此插件可以配置多入口多页面\n\t\t            template: __dirname + \"/src/index.tmpl.html\",//一个这个插件的实例，并传入相关的参数\n\t\t            inject: true,\n\t\t            favicon: path.resolve('favicon.ico'),\n\t\t            minify: {\n\t\t                collapseWhitespace: true,\n\t\t            }\n\t\t        }),\n\t\t        new webpack.HotModuleReplacementPlugin(),//热加载插件\n\t\t        new webpack.optimize.OccurrenceOrderPlugin(),//为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n\t\t        new webpack.DefinePlugin({\n\t\t            'process.env': {\n\t\t                'http_env': JSON.stringify(process.env.http_env)\n\t\t            }\n\t\t        }),\n\t\t        new MiniCssExtractPlugin({//压缩JS代码，分离CSS和JS文件\n\t\t            filename: 'css/style.css',\n\t\t            chunkFilename: 'css/style.[contenthash:5].css'\n\t\t        }),\n\t\t    ],\n\t\t}\n\n2. Babel\n\nBabel用新不用旧，可以\n\nBabel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：\n\n- 让你能使用最新的JavaScript代码（ES6，ES7...），而不用管新标准是否被当前使用的浏览器完全支持；\n- 让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；\n- 新建.babelrc文件\n \n\t\t {\n\t\t    \"presets\": [\n\t\t      \"es2015\",\n\t\t      \"react\",\n\t\t      [\n\t\t        \"env\",\n\t\t        {\n\t\t          \"modules\": false,\n\t\t          \"useBuiltIns\": false,\n\t\t          \"uglify\": true,\n\t\t          \"targets\": {\n\t\t            \"browsers\": [\"last 2 versions\"]\n\t\t          }\n\t\t        }\n\t\t      ]\n\t\t    ],\n\t\t    \"plugins\": [\n\t\t      \"transform-decorators-legacy\",\n\t\t      \"transform-class-properties\",\n\t\t      \"syntax-dynamic-import\",\n\t\t      [\"transform-runtime\",{\"polyfill\": false}],\n\t\t      [\"transform-object-rest-spread\",{\"useBuiltIns\": true}],\n\t\t      [\"import\", { \"libraryName\": \"antd\", \"style\": true }]\n\t\t    ]\n\t\t  }\n\n其中transform-decorators-legacy为装饰器。\n\nBabel其实可以完全在 webpack.config.js 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。\n\n3. 同理postcss的配置也可以单独配置，减轻webpack的压力和复杂度。\n\n在根目录新建postcss.config.js\n\n\t// postcss.config.js\n\tmodule.exports = {\n\t    plugins: [\n\t        require('autoprefixer')\n\t    ]\n\t}\n\n4.新建webpack.production.config.js文件，比webpack.config.js多了output的配置，少了本地服务器的配置，其余可以不变。\n\n\tconst webpack = require('webpack');\n\tconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\tconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\n\tconst path = require('path');\n\tconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n\tconst CopyWebpackPlugin = require('copy-webpack-plugin');\n\t\n\tmodule.exports = {\n\t    devtool: \"null\",\n\t    entry: __dirname + \"/src/index.js\", //已多次提及的唯一入口文件\n\t    output: {\n\t        path: __dirname + \"/dist\", //打包后的文件存放的地方\n\t        filename: \"js/bundle.js\" //打包后输出文件的文件名\n\t    },\n\t    resolve: {\n\t        alias: {\n\t            '@': path.resolve(\"src\")\n\t        },\n\t        extensions: ['*', '.js', '.jsx', '.json', '.less', '.css']\n\t    },\n\t    module: {\n\t        rules: [\n\t            {\n\t                test: /(\\.jsx|\\.js)$/,\n\t                use: {\n\t                    loader: \"babel-loader\"\n\t                },\n\t                exclude: /node_modules/\n\t            },\n\t            {\n\t                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n\t                loader: 'url-loader',\n\t                options: {\n\t                    limit: 10000,\n\t                    outputPath: \"images\"\n\t                }\n\t            },\n\t            {\n\t                test: /(\\.less|\\.css)$/,\n\t                use: [\n\t                    MiniCssExtractPlugin.loader,\n\t                    {\n\t                        loader: 'css-loader',\n\t                        options: {\n\t                            importLoaders: 1,\n\t                            minimize: {\n\t                                autoprefixer: {\n\t                                    add: true,\n\t                                    remove: true,\n\t                                    browsers: ['last 2 versions'],\n\t                                },\n\t                                discardComments: {\n\t                                    removeAll: true,\n\t                                },\n\t                                discardUnused: false,\n\t                                mergeIdents: false,\n\t                                reduceIdents: false,\n\t                                safe: true\n\t                            }\n\t                        }\n\t                    },\n\t                    {\n\t                        loader: 'less-loader',\n\t                        options: {\n\t                            javascriptEnabled: true\n\t                        }\n\t                    }\n\t                ]\n\t            }\n\t        ]\n\t    },\n\t    plugins: [\n\t        new CleanWebpackPlugin(['dist', 'build'], { root: __dirname, verbose: true, dry: false }),\n\t        new webpack.BannerPlugin('版权所有，翻版必究'),\n\t        new HtmlWebpackPlugin({//此插件可以配置多入口多页面\n\t            template: __dirname + \"/src/index.tmpl.html\",//一个这个插件的实例，并传入相关的参数\n\t            inject: true,\n\t            favicon: path.resolve('favicon.ico'),\n\t            minify: {\n\t                collapseWhitespace: true,\n\t            }\n\t        }),\n\t        new webpack.HotModuleReplacementPlugin(),\n\t        new webpack.optimize.OccurrenceOrderPlugin(),\n\t        new webpack.DefinePlugin({\n\t            'process.env': {\n\t                'http_env': JSON.stringify(process.env.http_env)\n\t            }\n\t        }),\n\t        new MiniCssExtractPlugin({\n\t            filename: 'css/style.css',\n\t            chunkFilename: 'css/style.[contenthash:5].css'\n\t        }),\n\t        new CopyWebpackPlugin([{\n\t            from: path.join(__dirname, 'src/static'),\n\t            to: path.join(__dirname, 'dist', 'static')\n\t        }])\n\t    ]\n\t}\n\n\n## 五，修改package.json文件的script字段\n\n### script 是指定义了npm的脚本字段\n\nstart：用以开启本地服务器\nbuild： 执行webpack.production.config.js文件\n\n说明：cross-env为跨平台传参 NODE_ENV 和 http_env ，NODE_ENV是要指定开发环境还是生产环境，http_env是自定义的api主机ip地址，为测试环境和生产环境区分开来。支持多生产环境。\n\n\n\t{\n\t  \"name\": \"zzj-webpack-sample-project\",\n\t  \"version\": \"1.0.0\",\n\t  \"description\": \"这是我的第一个webpack个人搭建\",\n\t  \"scripts\": {\n\t    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\t    \"start\": \"webpack\",\n\t    \"server\": \"cross-env NODE_ENV=development http_env=development webpack-dev-server --open --mode development\",\n\t    \"build\": \"cross-env NODE_ENV=production http_env=production webpack --config ./webpack.production.config.js --progress --mode production\"\n\t  },\n\t  \"main\": \"main.js\",\n\t  \"dependencies\": {\n\t    \"@antv/data-set\": \"^0.9.6\",\n\t    \"@antv/g2\": \"^3.2.7\",\n\t    \"antd\": \"^3.10.8\",\n\t    \"axios\": \"^0.18.0\",\n\t    \"babel-plugin-transform-object-assign\": \"^6.22.0\",\n\t    \"babel-polyfill\": \"^6.26.0\",\n\t    \"codemirror\": \"^5.40.0\",\n\t    \"crypto-js\": \"^3.1.9-1\",\n\t    \"extract-text-webpack-plugin\": \"^4.0.0-beta.0\",\n\t    \"immutability-helper\": \"^2.8.1\",\n\t    \"jquery\": \"^3.3.1\",\n\t    \"js-cookie\": \"^2.2.0\",\n\t    \"layui-layer\": \"^1.0.9\",\n\t    \"mobx\": \"^4.1.0\",\n\t    \"mobx-react\": \"^5.0.0\",\n\t    \"object-assign\": \"^4.1.1\",\n\t    \"postcss-flexbugs-fixes\": \"^4.1.0\",\n\t    \"promise\": \"^8.0.1\",\n\t    \"react\": \"^16.2.0\",\n\t    \"react-codemirror\": \"^1.0.0\",\n\t    \"react-codemirror2\": \"^5.1.0\",\n\t    \"react-dnd\": \"^5.0.0\",\n\t    \"react-dnd-html5-backend\": \"^5.0.1\",\n\t    \"react-dom\": \"^16.2.0\",\n\t    \"react-loadable\": \"^5.3.1\",\n\t    \"react-router-dom\": \"^4.2.2\",\n\t    \"viser-react\": \"^2.3.3\",\n\t    \"webpack\": \"^4.26.0\",\n\t    \"whatwg-fetch\": \"^2.0.4\"\n\t  },\n\t  \"devDependencies\": {\n\t    \"autoprefixer\": \"^9.3.1\",\n\t    \"babel-cli\": \"^6.26.0\",\n\t    \"babel-core\": \"^6.26.0\",\n\t    \"babel-loader\": \"^7.1.3\",\n\t    \"babel-plugin-import\": \"^1.6.6\",\n\t    \"babel-plugin-react-transform\": \"^3.0.0\",\n\t    \"babel-plugin-syntax-dynamic-import\": \"^6.18.0\",\n\t    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n\t    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\n\t    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n\t    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n\t    \"babel-preset-env\": \"^1.6.1\",\n\t    \"babel-preset-es2015\": \"^6.24.1\",\n\t    \"babel-preset-react\": \"^6.24.1\",\n\t    \"babel-runtime\": \"^6.26.0\",\n\t    \"clean-webpack-plugin\": \"^1.0.0\",\n\t    \"compression\": \"^1.7.2\",\n\t    \"copy-webpack-plugin\": \"^4.5.1\",\n\t    \"cross-env\": \"^5.1.3\",\n\t    \"css-loader\": \"^0.28.11\",\n\t    \"express\": \"^4.16.2\",\n\t    \"file-loader\": \"^1.1.11\",\n\t    \"html-webpack-plugin\": \"^3.2.0\",\n\t    \"less\": \"^2.7.3\",\n\t    \"less-loader\": \"^4.1.0\",\n\t    \"mini-css-extract-plugin\": \"^0.4.5\",\n\t    \"opn\": \"^5.2.0\",\n\t    \"ora\": \"^2.0.0\",\n\t    \"postcss-loader\": \"^3.0.0\",\n\t    \"rimraf\": \"^2.6.2\",\n\t    \"style-loader\": \"^0.21.0\",\n\t    \"url-loader\": \"^1.0.1\",\n\t    \"webpack-cli\": \"^3.1.1\",\n\t    \"webpack-dev-middleware\": \"^3.1.3\",\n\t    \"webpack-dev-server\": \"^3.1.10\",\n\t    \"webpack-hot-middleware\": \"^2.22.1\"\n\t  },\n\t  \"author\": \"Tsang\",\n\t  \"license\": \"ISC\"\n\t}\n","slug":"搭建webpack+react+antd+less+css_modules","published":1,"updated":"2018-12-17T13:37:49.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0idi001t1wu0308yn54z","content":"<h1 id=\"webpack-react-antd-css-modules\"><a href=\"#webpack-react-antd-css-modules\" class=\"headerlink\" title=\"webpack + react + antd + css_modules\"></a>webpack + react + antd + css_modules</h1><hr>\n<p>###下图是项目目录结构图，红色部分可直接忽略。</p>\n<p><img src=\"https://i.imgur.com/GyCWtfh.png\" alt=\"\"></p>\n<h2 id=\"一，初始化项目\"><a href=\"#一，初始化项目\" class=\"headerlink\" title=\"一，初始化项目\"></a>一，初始化项目</h2><p>###新建项目文件夹，进入目录执行命令</p>\n<pre><code>npm init\n</code></pre><p>可以自动创建一个package.json文件。这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。</p>\n<h2 id=\"二，安装webpack\"><a href=\"#二，安装webpack\" class=\"headerlink\" title=\"二，安装webpack\"></a>二，安装webpack</h2><pre><code>//全局安装\nnpm install -g webpack\n//安装到你的项目目录，在本项目中安装Webpack作为依赖包\nnpm install --save-dev webpack\n</code></pre><h2 id=\"三，新建模板页面和入口js文件。\"><a href=\"#三，新建模板页面和入口js文件。\" class=\"headerlink\" title=\"三，新建模板页面和入口js文件。\"></a>三，新建模板页面和入口js文件。</h2><h3 id=\"在根目录下吸纳建src目录，此目录为存放源代码的目录。-进入src目录：\"><a href=\"#在根目录下吸纳建src目录，此目录为存放源代码的目录。-进入src目录：\" class=\"headerlink\" title=\"在根目录下吸纳建src目录，此目录为存放源代码的目录。 进入src目录：\"></a>在根目录下吸纳建src目录，此目录为存放源代码的目录。 进入src目录：</h3><ol>\n<li><p>新建index.tmpl.html文件</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n    &lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;./static/layui/layui.all.js&quot;&gt;&lt;/script&gt; --&gt;\n    &lt;!-- CDN外链的js引入可以写在这里，打包时候把js的整个文件夹copy到输出目录即可 --&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre></li>\n</ol>\n<p>2.新建index.js文件</p>\n<pre><code>import React from &apos;react&apos;;\nimport { render } from &apos;react-dom&apos;;\nimport &quot;babel-polyfill&quot;;\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            &lt;div&gt;\n                //此处可以用一级路由来分拨路由页面。 省略\n            &lt;/div&gt;\n        )\n    }\n}\n\nrender(&lt;App /&gt;, document.getElementById(&apos;root&apos;))\n</code></pre><h2 id=\"四，正式使用webpack（一切皆模块）\"><a href=\"#四，正式使用webpack（一切皆模块）\" class=\"headerlink\" title=\"四，正式使用webpack（一切皆模块）\"></a>四，正式使用webpack（一切皆模块）</h2><p>webpack可以用本地开发服务器作为环境，亦可打包输出后在生产环境上执行。 因此开发环境和生产环境分开配置比较友好。</p>\n<p>Webpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。</p>\n<p>webpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(…)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3><p>进入根目录</p>\n<ol>\n<li><p>新建webpack.config.js文件。</p>\n<pre><code>const webpack = require(&apos;webpack&apos;);\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);//第三方插件，需要安装\nconst path = require(&apos;path&apos;);\nconst MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);//第三方插件，需要安装\n\nmodule.exports = {\n    devtool: &apos;eval-source-map&apos;,//配置source maps，四种之一\n    devServer: {\n        contentBase: &quot;./dist&quot;,//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true,//实时刷新\n        hot: true\n    },\n    resolve: {\n        alias: {\n            &apos;@&apos;: path.resolve(&quot;src&quot;)//别名，在js文件访问src文件时候，可以直接用别名@代替\n        },\n        extensions: [&apos;*&apos;, &apos;.js&apos;, &apos;.jsx&apos;, &apos;.json&apos;, &apos;.less&apos;, &apos;.css&apos;]\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: &quot;babel-loader&quot;\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n                loader: &apos;url-loader&apos;,\n                options: {\n                    limit: 10000,\n                    outputPath: &quot;images&quot;\n                }\n            },\n            {\n                test: /(\\.less|\\.css)$/,\n                use: [//从下往上来选择解析\n                    MiniCssExtractPlugin.loader,\n                    {\n                        loader: &apos;css-loader&apos;,\n                        options: {\n                            importLoaders: 1,\n                            minimize: {\n                                autoprefixer: {\n                                    add: true,\n                                    remove: true,\n                                    browsers: [&apos;last 2 versions&apos;],\n                                },\n                                discardComments: {\n                                    removeAll: true,\n                                },\n                                discardUnused: false,\n                                mergeIdents: false,\n                                reduceIdents: false,\n                                safe: true\n                            }\n                        }\n                    },\n                    {\n                        loader: &apos;less-loader&apos;,\n                        options: {\n                            javascriptEnabled: true\n                        }\n                    }\n                ]\n            }\n        ],\n    },\n    plugins: [\n        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),\n        new HtmlWebpackPlugin({//此插件可以配置多入口多页面\n            template: __dirname + &quot;/src/index.tmpl.html&quot;,//一个这个插件的实例，并传入相关的参数\n            inject: true,\n            favicon: path.resolve(&apos;favicon.ico&apos;),\n            minify: {\n                collapseWhitespace: true,\n            }\n        }),\n        new webpack.HotModuleReplacementPlugin(),//热加载插件\n        new webpack.optimize.OccurrenceOrderPlugin(),//为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n        new webpack.DefinePlugin({\n            &apos;process.env&apos;: {\n                &apos;http_env&apos;: JSON.stringify(process.env.http_env)\n            }\n        }),\n        new MiniCssExtractPlugin({//压缩JS代码，分离CSS和JS文件\n            filename: &apos;css/style.css&apos;,\n            chunkFilename: &apos;css/style.[contenthash:5].css&apos;\n        }),\n    ],\n}\n</code></pre></li>\n<li><p>Babel</p>\n</li>\n</ol>\n<p>Babel用新不用旧，可以</p>\n<p>Babel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：</p>\n<ul>\n<li>让你能使用最新的JavaScript代码（ES6，ES7…），而不用管新标准是否被当前使用的浏览器完全支持；</li>\n<li>让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；</li>\n<li><p>新建.babelrc文件</p>\n<pre><code>{\n   &quot;presets&quot;: [\n     &quot;es2015&quot;,\n     &quot;react&quot;,\n     [\n       &quot;env&quot;,\n       {\n         &quot;modules&quot;: false,\n         &quot;useBuiltIns&quot;: false,\n         &quot;uglify&quot;: true,\n         &quot;targets&quot;: {\n           &quot;browsers&quot;: [&quot;last 2 versions&quot;]\n         }\n       }\n     ]\n   ],\n   &quot;plugins&quot;: [\n     &quot;transform-decorators-legacy&quot;,\n     &quot;transform-class-properties&quot;,\n     &quot;syntax-dynamic-import&quot;,\n     [&quot;transform-runtime&quot;,{&quot;polyfill&quot;: false}],\n     [&quot;transform-object-rest-spread&quot;,{&quot;useBuiltIns&quot;: true}],\n     [&quot;import&quot;, { &quot;libraryName&quot;: &quot;antd&quot;, &quot;style&quot;: true }]\n   ]\n }\n</code></pre></li>\n</ul>\n<p>其中transform-decorators-legacy为装饰器。</p>\n<p>Babel其实可以完全在 webpack.config.js 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。</p>\n<ol start=\"3\">\n<li>同理postcss的配置也可以单独配置，减轻webpack的压力和复杂度。</li>\n</ol>\n<p>在根目录新建postcss.config.js</p>\n<pre><code>// postcss.config.js\nmodule.exports = {\n    plugins: [\n        require(&apos;autoprefixer&apos;)\n    ]\n}\n</code></pre><p>4.新建webpack.production.config.js文件，比webpack.config.js多了output的配置，少了本地服务器的配置，其余可以不变。</p>\n<pre><code>const webpack = require(&apos;webpack&apos;);\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nconst CleanWebpackPlugin = require(&quot;clean-webpack-plugin&quot;);\nconst path = require(&apos;path&apos;);\nconst MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);\nconst CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;);\n\nmodule.exports = {\n    devtool: &quot;null&quot;,\n    entry: __dirname + &quot;/src/index.js&quot;, //已多次提及的唯一入口文件\n    output: {\n        path: __dirname + &quot;/dist&quot;, //打包后的文件存放的地方\n        filename: &quot;js/bundle.js&quot; //打包后输出文件的文件名\n    },\n    resolve: {\n        alias: {\n            &apos;@&apos;: path.resolve(&quot;src&quot;)\n        },\n        extensions: [&apos;*&apos;, &apos;.js&apos;, &apos;.jsx&apos;, &apos;.json&apos;, &apos;.less&apos;, &apos;.css&apos;]\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: &quot;babel-loader&quot;\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n                loader: &apos;url-loader&apos;,\n                options: {\n                    limit: 10000,\n                    outputPath: &quot;images&quot;\n                }\n            },\n            {\n                test: /(\\.less|\\.css)$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    {\n                        loader: &apos;css-loader&apos;,\n                        options: {\n                            importLoaders: 1,\n                            minimize: {\n                                autoprefixer: {\n                                    add: true,\n                                    remove: true,\n                                    browsers: [&apos;last 2 versions&apos;],\n                                },\n                                discardComments: {\n                                    removeAll: true,\n                                },\n                                discardUnused: false,\n                                mergeIdents: false,\n                                reduceIdents: false,\n                                safe: true\n                            }\n                        }\n                    },\n                    {\n                        loader: &apos;less-loader&apos;,\n                        options: {\n                            javascriptEnabled: true\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new CleanWebpackPlugin([&apos;dist&apos;, &apos;build&apos;], { root: __dirname, verbose: true, dry: false }),\n        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),\n        new HtmlWebpackPlugin({//此插件可以配置多入口多页面\n            template: __dirname + &quot;/src/index.tmpl.html&quot;,//一个这个插件的实例，并传入相关的参数\n            inject: true,\n            favicon: path.resolve(&apos;favicon.ico&apos;),\n            minify: {\n                collapseWhitespace: true,\n            }\n        }),\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.optimize.OccurrenceOrderPlugin(),\n        new webpack.DefinePlugin({\n            &apos;process.env&apos;: {\n                &apos;http_env&apos;: JSON.stringify(process.env.http_env)\n            }\n        }),\n        new MiniCssExtractPlugin({\n            filename: &apos;css/style.css&apos;,\n            chunkFilename: &apos;css/style.[contenthash:5].css&apos;\n        }),\n        new CopyWebpackPlugin([{\n            from: path.join(__dirname, &apos;src/static&apos;),\n            to: path.join(__dirname, &apos;dist&apos;, &apos;static&apos;)\n        }])\n    ]\n}\n</code></pre><h2 id=\"五，修改package-json文件的script字段\"><a href=\"#五，修改package-json文件的script字段\" class=\"headerlink\" title=\"五，修改package.json文件的script字段\"></a>五，修改package.json文件的script字段</h2><h3 id=\"script-是指定义了npm的脚本字段\"><a href=\"#script-是指定义了npm的脚本字段\" class=\"headerlink\" title=\"script 是指定义了npm的脚本字段\"></a>script 是指定义了npm的脚本字段</h3><p>start：用以开启本地服务器<br>build： 执行webpack.production.config.js文件</p>\n<p>说明：cross-env为跨平台传参 NODE_ENV 和 http_env ，NODE_ENV是要指定开发环境还是生产环境，http_env是自定义的api主机ip地址，为测试环境和生产环境区分开来。支持多生产环境。</p>\n<pre><code>{\n  &quot;name&quot;: &quot;zzj-webpack-sample-project&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;这是我的第一个webpack个人搭建&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n    &quot;start&quot;: &quot;webpack&quot;,\n    &quot;server&quot;: &quot;cross-env NODE_ENV=development http_env=development webpack-dev-server --open --mode development&quot;,\n    &quot;build&quot;: &quot;cross-env NODE_ENV=production http_env=production webpack --config ./webpack.production.config.js --progress --mode production&quot;\n  },\n  &quot;main&quot;: &quot;main.js&quot;,\n  &quot;dependencies&quot;: {\n    &quot;@antv/data-set&quot;: &quot;^0.9.6&quot;,\n    &quot;@antv/g2&quot;: &quot;^3.2.7&quot;,\n    &quot;antd&quot;: &quot;^3.10.8&quot;,\n    &quot;axios&quot;: &quot;^0.18.0&quot;,\n    &quot;babel-plugin-transform-object-assign&quot;: &quot;^6.22.0&quot;,\n    &quot;babel-polyfill&quot;: &quot;^6.26.0&quot;,\n    &quot;codemirror&quot;: &quot;^5.40.0&quot;,\n    &quot;crypto-js&quot;: &quot;^3.1.9-1&quot;,\n    &quot;extract-text-webpack-plugin&quot;: &quot;^4.0.0-beta.0&quot;,\n    &quot;immutability-helper&quot;: &quot;^2.8.1&quot;,\n    &quot;jquery&quot;: &quot;^3.3.1&quot;,\n    &quot;js-cookie&quot;: &quot;^2.2.0&quot;,\n    &quot;layui-layer&quot;: &quot;^1.0.9&quot;,\n    &quot;mobx&quot;: &quot;^4.1.0&quot;,\n    &quot;mobx-react&quot;: &quot;^5.0.0&quot;,\n    &quot;object-assign&quot;: &quot;^4.1.1&quot;,\n    &quot;postcss-flexbugs-fixes&quot;: &quot;^4.1.0&quot;,\n    &quot;promise&quot;: &quot;^8.0.1&quot;,\n    &quot;react&quot;: &quot;^16.2.0&quot;,\n    &quot;react-codemirror&quot;: &quot;^1.0.0&quot;,\n    &quot;react-codemirror2&quot;: &quot;^5.1.0&quot;,\n    &quot;react-dnd&quot;: &quot;^5.0.0&quot;,\n    &quot;react-dnd-html5-backend&quot;: &quot;^5.0.1&quot;,\n    &quot;react-dom&quot;: &quot;^16.2.0&quot;,\n    &quot;react-loadable&quot;: &quot;^5.3.1&quot;,\n    &quot;react-router-dom&quot;: &quot;^4.2.2&quot;,\n    &quot;viser-react&quot;: &quot;^2.3.3&quot;,\n    &quot;webpack&quot;: &quot;^4.26.0&quot;,\n    &quot;whatwg-fetch&quot;: &quot;^2.0.4&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;autoprefixer&quot;: &quot;^9.3.1&quot;,\n    &quot;babel-cli&quot;: &quot;^6.26.0&quot;,\n    &quot;babel-core&quot;: &quot;^6.26.0&quot;,\n    &quot;babel-loader&quot;: &quot;^7.1.3&quot;,\n    &quot;babel-plugin-import&quot;: &quot;^1.6.6&quot;,\n    &quot;babel-plugin-react-transform&quot;: &quot;^3.0.0&quot;,\n    &quot;babel-plugin-syntax-dynamic-import&quot;: &quot;^6.18.0&quot;,\n    &quot;babel-plugin-transform-class-properties&quot;: &quot;^6.24.1&quot;,\n    &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.4&quot;,\n    &quot;babel-plugin-transform-object-rest-spread&quot;: &quot;^6.26.0&quot;,\n    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.23.0&quot;,\n    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,\n    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;,\n    &quot;babel-preset-react&quot;: &quot;^6.24.1&quot;,\n    &quot;babel-runtime&quot;: &quot;^6.26.0&quot;,\n    &quot;clean-webpack-plugin&quot;: &quot;^1.0.0&quot;,\n    &quot;compression&quot;: &quot;^1.7.2&quot;,\n    &quot;copy-webpack-plugin&quot;: &quot;^4.5.1&quot;,\n    &quot;cross-env&quot;: &quot;^5.1.3&quot;,\n    &quot;css-loader&quot;: &quot;^0.28.11&quot;,\n    &quot;express&quot;: &quot;^4.16.2&quot;,\n    &quot;file-loader&quot;: &quot;^1.1.11&quot;,\n    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,\n    &quot;less&quot;: &quot;^2.7.3&quot;,\n    &quot;less-loader&quot;: &quot;^4.1.0&quot;,\n    &quot;mini-css-extract-plugin&quot;: &quot;^0.4.5&quot;,\n    &quot;opn&quot;: &quot;^5.2.0&quot;,\n    &quot;ora&quot;: &quot;^2.0.0&quot;,\n    &quot;postcss-loader&quot;: &quot;^3.0.0&quot;,\n    &quot;rimraf&quot;: &quot;^2.6.2&quot;,\n    &quot;style-loader&quot;: &quot;^0.21.0&quot;,\n    &quot;url-loader&quot;: &quot;^1.0.1&quot;,\n    &quot;webpack-cli&quot;: &quot;^3.1.1&quot;,\n    &quot;webpack-dev-middleware&quot;: &quot;^3.1.3&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^3.1.10&quot;,\n    &quot;webpack-hot-middleware&quot;: &quot;^2.22.1&quot;\n  },\n  &quot;author&quot;: &quot;Tsang&quot;,\n  &quot;license&quot;: &quot;ISC&quot;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webpack-react-antd-css-modules\"><a href=\"#webpack-react-antd-css-modules\" class=\"headerlink\" title=\"webpack + react + antd + css_modules\"></a>webpack + react + antd + css_modules</h1><hr>\n<p>###下图是项目目录结构图，红色部分可直接忽略。</p>\n<p><img src=\"https://i.imgur.com/GyCWtfh.png\" alt=\"\"></p>\n<h2 id=\"一，初始化项目\"><a href=\"#一，初始化项目\" class=\"headerlink\" title=\"一，初始化项目\"></a>一，初始化项目</h2><p>###新建项目文件夹，进入目录执行命令</p>\n<pre><code>npm init\n</code></pre><p>可以自动创建一个package.json文件。这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。</p>\n<h2 id=\"二，安装webpack\"><a href=\"#二，安装webpack\" class=\"headerlink\" title=\"二，安装webpack\"></a>二，安装webpack</h2><pre><code>//全局安装\nnpm install -g webpack\n//安装到你的项目目录，在本项目中安装Webpack作为依赖包\nnpm install --save-dev webpack\n</code></pre><h2 id=\"三，新建模板页面和入口js文件。\"><a href=\"#三，新建模板页面和入口js文件。\" class=\"headerlink\" title=\"三，新建模板页面和入口js文件。\"></a>三，新建模板页面和入口js文件。</h2><h3 id=\"在根目录下吸纳建src目录，此目录为存放源代码的目录。-进入src目录：\"><a href=\"#在根目录下吸纳建src目录，此目录为存放源代码的目录。-进入src目录：\" class=\"headerlink\" title=\"在根目录下吸纳建src目录，此目录为存放源代码的目录。 进入src目录：\"></a>在根目录下吸纳建src目录，此目录为存放源代码的目录。 进入src目录：</h3><ol>\n<li><p>新建index.tmpl.html文件</p>\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n    &lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;./static/layui/layui.all.js&quot;&gt;&lt;/script&gt; --&gt;\n    &lt;!-- CDN外链的js引入可以写在这里，打包时候把js的整个文件夹copy到输出目录即可 --&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre></li>\n</ol>\n<p>2.新建index.js文件</p>\n<pre><code>import React from &apos;react&apos;;\nimport { render } from &apos;react-dom&apos;;\nimport &quot;babel-polyfill&quot;;\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            &lt;div&gt;\n                //此处可以用一级路由来分拨路由页面。 省略\n            &lt;/div&gt;\n        )\n    }\n}\n\nrender(&lt;App /&gt;, document.getElementById(&apos;root&apos;))\n</code></pre><h2 id=\"四，正式使用webpack（一切皆模块）\"><a href=\"#四，正式使用webpack（一切皆模块）\" class=\"headerlink\" title=\"四，正式使用webpack（一切皆模块）\"></a>四，正式使用webpack（一切皆模块）</h2><p>webpack可以用本地开发服务器作为环境，亦可打包输出后在生产环境上执行。 因此开发环境和生产环境分开配置比较友好。</p>\n<p>Webpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。</p>\n<p>webpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(…)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3><p>进入根目录</p>\n<ol>\n<li><p>新建webpack.config.js文件。</p>\n<pre><code>const webpack = require(&apos;webpack&apos;);\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);//第三方插件，需要安装\nconst path = require(&apos;path&apos;);\nconst MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);//第三方插件，需要安装\n\nmodule.exports = {\n    devtool: &apos;eval-source-map&apos;,//配置source maps，四种之一\n    devServer: {\n        contentBase: &quot;./dist&quot;,//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true,//实时刷新\n        hot: true\n    },\n    resolve: {\n        alias: {\n            &apos;@&apos;: path.resolve(&quot;src&quot;)//别名，在js文件访问src文件时候，可以直接用别名@代替\n        },\n        extensions: [&apos;*&apos;, &apos;.js&apos;, &apos;.jsx&apos;, &apos;.json&apos;, &apos;.less&apos;, &apos;.css&apos;]\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: &quot;babel-loader&quot;\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n                loader: &apos;url-loader&apos;,\n                options: {\n                    limit: 10000,\n                    outputPath: &quot;images&quot;\n                }\n            },\n            {\n                test: /(\\.less|\\.css)$/,\n                use: [//从下往上来选择解析\n                    MiniCssExtractPlugin.loader,\n                    {\n                        loader: &apos;css-loader&apos;,\n                        options: {\n                            importLoaders: 1,\n                            minimize: {\n                                autoprefixer: {\n                                    add: true,\n                                    remove: true,\n                                    browsers: [&apos;last 2 versions&apos;],\n                                },\n                                discardComments: {\n                                    removeAll: true,\n                                },\n                                discardUnused: false,\n                                mergeIdents: false,\n                                reduceIdents: false,\n                                safe: true\n                            }\n                        }\n                    },\n                    {\n                        loader: &apos;less-loader&apos;,\n                        options: {\n                            javascriptEnabled: true\n                        }\n                    }\n                ]\n            }\n        ],\n    },\n    plugins: [\n        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),\n        new HtmlWebpackPlugin({//此插件可以配置多入口多页面\n            template: __dirname + &quot;/src/index.tmpl.html&quot;,//一个这个插件的实例，并传入相关的参数\n            inject: true,\n            favicon: path.resolve(&apos;favicon.ico&apos;),\n            minify: {\n                collapseWhitespace: true,\n            }\n        }),\n        new webpack.HotModuleReplacementPlugin(),//热加载插件\n        new webpack.optimize.OccurrenceOrderPlugin(),//为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n        new webpack.DefinePlugin({\n            &apos;process.env&apos;: {\n                &apos;http_env&apos;: JSON.stringify(process.env.http_env)\n            }\n        }),\n        new MiniCssExtractPlugin({//压缩JS代码，分离CSS和JS文件\n            filename: &apos;css/style.css&apos;,\n            chunkFilename: &apos;css/style.[contenthash:5].css&apos;\n        }),\n    ],\n}\n</code></pre></li>\n<li><p>Babel</p>\n</li>\n</ol>\n<p>Babel用新不用旧，可以</p>\n<p>Babel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：</p>\n<ul>\n<li>让你能使用最新的JavaScript代码（ES6，ES7…），而不用管新标准是否被当前使用的浏览器完全支持；</li>\n<li>让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；</li>\n<li><p>新建.babelrc文件</p>\n<pre><code>{\n   &quot;presets&quot;: [\n     &quot;es2015&quot;,\n     &quot;react&quot;,\n     [\n       &quot;env&quot;,\n       {\n         &quot;modules&quot;: false,\n         &quot;useBuiltIns&quot;: false,\n         &quot;uglify&quot;: true,\n         &quot;targets&quot;: {\n           &quot;browsers&quot;: [&quot;last 2 versions&quot;]\n         }\n       }\n     ]\n   ],\n   &quot;plugins&quot;: [\n     &quot;transform-decorators-legacy&quot;,\n     &quot;transform-class-properties&quot;,\n     &quot;syntax-dynamic-import&quot;,\n     [&quot;transform-runtime&quot;,{&quot;polyfill&quot;: false}],\n     [&quot;transform-object-rest-spread&quot;,{&quot;useBuiltIns&quot;: true}],\n     [&quot;import&quot;, { &quot;libraryName&quot;: &quot;antd&quot;, &quot;style&quot;: true }]\n   ]\n }\n</code></pre></li>\n</ul>\n<p>其中transform-decorators-legacy为装饰器。</p>\n<p>Babel其实可以完全在 webpack.config.js 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。</p>\n<ol start=\"3\">\n<li>同理postcss的配置也可以单独配置，减轻webpack的压力和复杂度。</li>\n</ol>\n<p>在根目录新建postcss.config.js</p>\n<pre><code>// postcss.config.js\nmodule.exports = {\n    plugins: [\n        require(&apos;autoprefixer&apos;)\n    ]\n}\n</code></pre><p>4.新建webpack.production.config.js文件，比webpack.config.js多了output的配置，少了本地服务器的配置，其余可以不变。</p>\n<pre><code>const webpack = require(&apos;webpack&apos;);\nconst HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\nconst CleanWebpackPlugin = require(&quot;clean-webpack-plugin&quot;);\nconst path = require(&apos;path&apos;);\nconst MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);\nconst CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;);\n\nmodule.exports = {\n    devtool: &quot;null&quot;,\n    entry: __dirname + &quot;/src/index.js&quot;, //已多次提及的唯一入口文件\n    output: {\n        path: __dirname + &quot;/dist&quot;, //打包后的文件存放的地方\n        filename: &quot;js/bundle.js&quot; //打包后输出文件的文件名\n    },\n    resolve: {\n        alias: {\n            &apos;@&apos;: path.resolve(&quot;src&quot;)\n        },\n        extensions: [&apos;*&apos;, &apos;.js&apos;, &apos;.jsx&apos;, &apos;.json&apos;, &apos;.less&apos;, &apos;.css&apos;]\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: &quot;babel-loader&quot;\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n                loader: &apos;url-loader&apos;,\n                options: {\n                    limit: 10000,\n                    outputPath: &quot;images&quot;\n                }\n            },\n            {\n                test: /(\\.less|\\.css)$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    {\n                        loader: &apos;css-loader&apos;,\n                        options: {\n                            importLoaders: 1,\n                            minimize: {\n                                autoprefixer: {\n                                    add: true,\n                                    remove: true,\n                                    browsers: [&apos;last 2 versions&apos;],\n                                },\n                                discardComments: {\n                                    removeAll: true,\n                                },\n                                discardUnused: false,\n                                mergeIdents: false,\n                                reduceIdents: false,\n                                safe: true\n                            }\n                        }\n                    },\n                    {\n                        loader: &apos;less-loader&apos;,\n                        options: {\n                            javascriptEnabled: true\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new CleanWebpackPlugin([&apos;dist&apos;, &apos;build&apos;], { root: __dirname, verbose: true, dry: false }),\n        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),\n        new HtmlWebpackPlugin({//此插件可以配置多入口多页面\n            template: __dirname + &quot;/src/index.tmpl.html&quot;,//一个这个插件的实例，并传入相关的参数\n            inject: true,\n            favicon: path.resolve(&apos;favicon.ico&apos;),\n            minify: {\n                collapseWhitespace: true,\n            }\n        }),\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.optimize.OccurrenceOrderPlugin(),\n        new webpack.DefinePlugin({\n            &apos;process.env&apos;: {\n                &apos;http_env&apos;: JSON.stringify(process.env.http_env)\n            }\n        }),\n        new MiniCssExtractPlugin({\n            filename: &apos;css/style.css&apos;,\n            chunkFilename: &apos;css/style.[contenthash:5].css&apos;\n        }),\n        new CopyWebpackPlugin([{\n            from: path.join(__dirname, &apos;src/static&apos;),\n            to: path.join(__dirname, &apos;dist&apos;, &apos;static&apos;)\n        }])\n    ]\n}\n</code></pre><h2 id=\"五，修改package-json文件的script字段\"><a href=\"#五，修改package-json文件的script字段\" class=\"headerlink\" title=\"五，修改package.json文件的script字段\"></a>五，修改package.json文件的script字段</h2><h3 id=\"script-是指定义了npm的脚本字段\"><a href=\"#script-是指定义了npm的脚本字段\" class=\"headerlink\" title=\"script 是指定义了npm的脚本字段\"></a>script 是指定义了npm的脚本字段</h3><p>start：用以开启本地服务器<br>build： 执行webpack.production.config.js文件</p>\n<p>说明：cross-env为跨平台传参 NODE_ENV 和 http_env ，NODE_ENV是要指定开发环境还是生产环境，http_env是自定义的api主机ip地址，为测试环境和生产环境区分开来。支持多生产环境。</p>\n<pre><code>{\n  &quot;name&quot;: &quot;zzj-webpack-sample-project&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;这是我的第一个webpack个人搭建&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n    &quot;start&quot;: &quot;webpack&quot;,\n    &quot;server&quot;: &quot;cross-env NODE_ENV=development http_env=development webpack-dev-server --open --mode development&quot;,\n    &quot;build&quot;: &quot;cross-env NODE_ENV=production http_env=production webpack --config ./webpack.production.config.js --progress --mode production&quot;\n  },\n  &quot;main&quot;: &quot;main.js&quot;,\n  &quot;dependencies&quot;: {\n    &quot;@antv/data-set&quot;: &quot;^0.9.6&quot;,\n    &quot;@antv/g2&quot;: &quot;^3.2.7&quot;,\n    &quot;antd&quot;: &quot;^3.10.8&quot;,\n    &quot;axios&quot;: &quot;^0.18.0&quot;,\n    &quot;babel-plugin-transform-object-assign&quot;: &quot;^6.22.0&quot;,\n    &quot;babel-polyfill&quot;: &quot;^6.26.0&quot;,\n    &quot;codemirror&quot;: &quot;^5.40.0&quot;,\n    &quot;crypto-js&quot;: &quot;^3.1.9-1&quot;,\n    &quot;extract-text-webpack-plugin&quot;: &quot;^4.0.0-beta.0&quot;,\n    &quot;immutability-helper&quot;: &quot;^2.8.1&quot;,\n    &quot;jquery&quot;: &quot;^3.3.1&quot;,\n    &quot;js-cookie&quot;: &quot;^2.2.0&quot;,\n    &quot;layui-layer&quot;: &quot;^1.0.9&quot;,\n    &quot;mobx&quot;: &quot;^4.1.0&quot;,\n    &quot;mobx-react&quot;: &quot;^5.0.0&quot;,\n    &quot;object-assign&quot;: &quot;^4.1.1&quot;,\n    &quot;postcss-flexbugs-fixes&quot;: &quot;^4.1.0&quot;,\n    &quot;promise&quot;: &quot;^8.0.1&quot;,\n    &quot;react&quot;: &quot;^16.2.0&quot;,\n    &quot;react-codemirror&quot;: &quot;^1.0.0&quot;,\n    &quot;react-codemirror2&quot;: &quot;^5.1.0&quot;,\n    &quot;react-dnd&quot;: &quot;^5.0.0&quot;,\n    &quot;react-dnd-html5-backend&quot;: &quot;^5.0.1&quot;,\n    &quot;react-dom&quot;: &quot;^16.2.0&quot;,\n    &quot;react-loadable&quot;: &quot;^5.3.1&quot;,\n    &quot;react-router-dom&quot;: &quot;^4.2.2&quot;,\n    &quot;viser-react&quot;: &quot;^2.3.3&quot;,\n    &quot;webpack&quot;: &quot;^4.26.0&quot;,\n    &quot;whatwg-fetch&quot;: &quot;^2.0.4&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;autoprefixer&quot;: &quot;^9.3.1&quot;,\n    &quot;babel-cli&quot;: &quot;^6.26.0&quot;,\n    &quot;babel-core&quot;: &quot;^6.26.0&quot;,\n    &quot;babel-loader&quot;: &quot;^7.1.3&quot;,\n    &quot;babel-plugin-import&quot;: &quot;^1.6.6&quot;,\n    &quot;babel-plugin-react-transform&quot;: &quot;^3.0.0&quot;,\n    &quot;babel-plugin-syntax-dynamic-import&quot;: &quot;^6.18.0&quot;,\n    &quot;babel-plugin-transform-class-properties&quot;: &quot;^6.24.1&quot;,\n    &quot;babel-plugin-transform-decorators-legacy&quot;: &quot;^1.3.4&quot;,\n    &quot;babel-plugin-transform-object-rest-spread&quot;: &quot;^6.26.0&quot;,\n    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.23.0&quot;,\n    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,\n    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;,\n    &quot;babel-preset-react&quot;: &quot;^6.24.1&quot;,\n    &quot;babel-runtime&quot;: &quot;^6.26.0&quot;,\n    &quot;clean-webpack-plugin&quot;: &quot;^1.0.0&quot;,\n    &quot;compression&quot;: &quot;^1.7.2&quot;,\n    &quot;copy-webpack-plugin&quot;: &quot;^4.5.1&quot;,\n    &quot;cross-env&quot;: &quot;^5.1.3&quot;,\n    &quot;css-loader&quot;: &quot;^0.28.11&quot;,\n    &quot;express&quot;: &quot;^4.16.2&quot;,\n    &quot;file-loader&quot;: &quot;^1.1.11&quot;,\n    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,\n    &quot;less&quot;: &quot;^2.7.3&quot;,\n    &quot;less-loader&quot;: &quot;^4.1.0&quot;,\n    &quot;mini-css-extract-plugin&quot;: &quot;^0.4.5&quot;,\n    &quot;opn&quot;: &quot;^5.2.0&quot;,\n    &quot;ora&quot;: &quot;^2.0.0&quot;,\n    &quot;postcss-loader&quot;: &quot;^3.0.0&quot;,\n    &quot;rimraf&quot;: &quot;^2.6.2&quot;,\n    &quot;style-loader&quot;: &quot;^0.21.0&quot;,\n    &quot;url-loader&quot;: &quot;^1.0.1&quot;,\n    &quot;webpack-cli&quot;: &quot;^3.1.1&quot;,\n    &quot;webpack-dev-middleware&quot;: &quot;^3.1.3&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^3.1.10&quot;,\n    &quot;webpack-hot-middleware&quot;: &quot;^2.22.1&quot;\n  },\n  &quot;author&quot;: &quot;Tsang&quot;,\n  &quot;license&quot;: &quot;ISC&quot;\n}\n</code></pre>"},{"title":"浏览器全屏显示","date":"2018-07-02T03:34:59.000Z","description":"项目中需要将后台浏览器的窗口全屏，也就是我们点击一个按钮要实现按F11全屏的效果。 在HTML5中,W3C制定了关于全屏的API，就可以实现全屏幕的效果，也可以让页面中的图片，视频等全屏目前只有google chrome 15 +, safri5.1+,firfox10+,IE11支持","_content":"\n### 全屏\n\n\tvar docElm = document.documentElement;\n\t//W3C  \n\tif (docElm.requestFullscreen) {\n\t\tdocElm.requestFullscreen();  \n\t}\n\t//FireFox\n\telse if (docElm.mozRequestFullScreen) {\n\t\tdocElm.mozRequestFullScreen();  \n\t}//Chrome等\n\telse if (docElm.webkitRequestFullScreen) {\n\t\tdocElm.webkitRequestFullScreen();  \n\t}\n\t//IE11\n\telse if (elem.msRequestFullscreen) {\n\t  elem.msRequestFullscreen();\n\t}\n\n\n### 退出全屏\n\n\tif (document.exitFullscreen) {  \n\t    document.exitFullscreen();  \n\t}  \n\telse if (document.mozCancelFullScreen) {  \n\t    document.mozCancelFullScreen();  \n\t}  \n\telse if (document.webkitCancelFullScreen) {  \n\t    document.webkitCancelFullScreen();  \n\t}\n\telse if (document.msExitFullscreen) {\n\t      document.msExitFullscreen();\n\t}","source":"_posts/浏览器全屏显示.md","raw":"---\ntitle: 浏览器全屏显示\ndate: 2018-07-02 11:34:59\ntags: [js, html5]\ncategories: '前端'\ndescription: '项目中需要将后台浏览器的窗口全屏，也就是我们点击一个按钮要实现按F11全屏的效果。 在HTML5中,W3C制定了关于全屏的API，就可以实现全屏幕的效果，也可以让页面中的图片，视频等全屏目前只有google chrome 15 +, safri5.1+,firfox10+,IE11支持'\n\n---\n\n### 全屏\n\n\tvar docElm = document.documentElement;\n\t//W3C  \n\tif (docElm.requestFullscreen) {\n\t\tdocElm.requestFullscreen();  \n\t}\n\t//FireFox\n\telse if (docElm.mozRequestFullScreen) {\n\t\tdocElm.mozRequestFullScreen();  \n\t}//Chrome等\n\telse if (docElm.webkitRequestFullScreen) {\n\t\tdocElm.webkitRequestFullScreen();  \n\t}\n\t//IE11\n\telse if (elem.msRequestFullscreen) {\n\t  elem.msRequestFullscreen();\n\t}\n\n\n### 退出全屏\n\n\tif (document.exitFullscreen) {  \n\t    document.exitFullscreen();  \n\t}  \n\telse if (document.mozCancelFullScreen) {  \n\t    document.mozCancelFullScreen();  \n\t}  \n\telse if (document.webkitCancelFullScreen) {  \n\t    document.webkitCancelFullScreen();  \n\t}\n\telse if (document.msExitFullscreen) {\n\t      document.msExitFullscreen();\n\t}","slug":"浏览器全屏显示","published":1,"updated":"2018-12-17T13:37:49.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0idm001w1wu0iaezhc7y","content":"<h3 id=\"全屏\"><a href=\"#全屏\" class=\"headerlink\" title=\"全屏\"></a>全屏</h3><pre><code>var docElm = document.documentElement;\n//W3C  \nif (docElm.requestFullscreen) {\n    docElm.requestFullscreen();  \n}\n//FireFox\nelse if (docElm.mozRequestFullScreen) {\n    docElm.mozRequestFullScreen();  \n}//Chrome等\nelse if (docElm.webkitRequestFullScreen) {\n    docElm.webkitRequestFullScreen();  \n}\n//IE11\nelse if (elem.msRequestFullscreen) {\n  elem.msRequestFullscreen();\n}\n</code></pre><h3 id=\"退出全屏\"><a href=\"#退出全屏\" class=\"headerlink\" title=\"退出全屏\"></a>退出全屏</h3><pre><code>if (document.exitFullscreen) {  \n    document.exitFullscreen();  \n}  \nelse if (document.mozCancelFullScreen) {  \n    document.mozCancelFullScreen();  \n}  \nelse if (document.webkitCancelFullScreen) {  \n    document.webkitCancelFullScreen();  \n}\nelse if (document.msExitFullscreen) {\n      document.msExitFullscreen();\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"全屏\"><a href=\"#全屏\" class=\"headerlink\" title=\"全屏\"></a>全屏</h3><pre><code>var docElm = document.documentElement;\n//W3C  \nif (docElm.requestFullscreen) {\n    docElm.requestFullscreen();  \n}\n//FireFox\nelse if (docElm.mozRequestFullScreen) {\n    docElm.mozRequestFullScreen();  \n}//Chrome等\nelse if (docElm.webkitRequestFullScreen) {\n    docElm.webkitRequestFullScreen();  \n}\n//IE11\nelse if (elem.msRequestFullscreen) {\n  elem.msRequestFullscreen();\n}\n</code></pre><h3 id=\"退出全屏\"><a href=\"#退出全屏\" class=\"headerlink\" title=\"退出全屏\"></a>退出全屏</h3><pre><code>if (document.exitFullscreen) {  \n    document.exitFullscreen();  \n}  \nelse if (document.mozCancelFullScreen) {  \n    document.mozCancelFullScreen();  \n}  \nelse if (document.webkitCancelFullScreen) {  \n    document.webkitCancelFullScreen();  \n}\nelse if (document.msExitFullscreen) {\n      document.msExitFullscreen();\n}\n</code></pre>"},{"title":"整合react + mobx + axios + react-router4","date":"2018-12-01T02:27:12.000Z","description":"一步步整个整合react + mobx + axios + react-router4","_content":"\n# react + mobx + axios + react-router4\n\n----------\n\n![](https://i.imgur.com/SrLftUC.png)\n\n## 一，定义axios的api接口\n### aService.js\n\n\timport axios from 'axios';\n\tconst errorHandler = error => {\n\t    console.log(\"出错信息如下\");\n\t    console.log(error);\n\t}\n\tconst host = 'http://www.example.com';\n\n\texport default {\n\t\tgetList(){\n\t\t\treturn axios.get(`${host}/api/XXX`).catch(errorHandler);//get, post, put, delete方法都有\n\t\t},\n\t\tgetDetail(id) {\n\t\t\treturn axios.get(`${host}/api/XXX?id=${id}`).catch(errorHandler);\n\t\t}\n\t}\n\t//bService.js 同理\n\n<br />\n\n## 二，定义mobx数据仓库\n原则上一个页面级组件及其的子组件都公用一个实例化的数据仓库\n### AStore.js\n\n\timport { observable, action, toJS, computed } from 'mobx';\n\timport aService from 'aService';\n\t\n\t/**\n\t * A 自己的store\n\t * 在 页面级 通过 Provider 渗透到所有子组件。\n\t * 在子组件内用 @inject('store')，将 store 注入到自己的 props 上。\n\t */\n\tclass Store {\n\t\tconstructor() {\n\t        this.getListForApi = this.getListForApi.bind(this);\n\t    }\n\n\t    @observable list = []; //被观察的属性数据\n\t\t@computed get getList(){ return toJS(this.list) } //get方法, 把observer类型转为js的类型返回\n\t\t@action.bound setList(value) { this.list = value; } //set方法\n\t\t\n\t\tgetListForApi(){\n\t\t\taService.getList().then(this.getListForApiCallBack);\n\t\t}\n\t\t@action.bound getListForApiCallBack(res){\n\t\t\t//这里的api回调必须这样分开写才可以被观察到\n\t\t\t//这里调用api，拿到后台返回的数据后，把list赋值\n\t\t}\n\t}\n\t\n\texport default new Store\n\t// 导出一个new的Store，确保渗透的数据仓库都用同一份数据，同一个实例\n\n### ADetailStore.js\n\n\timport { observable, action, toJS, computed } from 'mobx';\n\timport aService from 'aService';\n\n\tclass Store {\n\t\tconstructor() {\n\t        this.getDetailForApi = this.getDetailForApi.bind(this);\n\t    }\n\t\t\n\t\t@observable id = '';\n\t\t@computed get getId(){ return toJS(this.id) } //get方法\n\t\t@action.bound setId(value) { this.id = value; } //set方法\n\n\t    @observable info = {\n\t\t\tname: '',\n\t\t\tcode: '',\n\t\t\tget getName(){ return toJS(this.name) },\n\t\t\tsetName(value){ this.name = value; },\n\t\t\tget getCode(){ return toJS(this.code) },\n\t\t\tsetCode(value){ this.code = value; }\n\t\t}\n\t\t\n\t\tgetDetailForApi(){\n\t\t\taService.getDetail(this.getId).then(this.getDetailForApi);\n\t\t}\n\t\t@action.bound getDetailForApiCallBack(res){\n\t\t\t//todo\n\t\t}\n\t}\n\t\n\texport default new Store\n\n<br />\n## 三，定义页面级组件\n### A.js\n\n\timport React from 'react';\n\timport PropTypes form 'prop-types';\n\timport { observer, Provider } from 'mobx-react';\n\timport store from 'AStore';\n\timport { withRouter } from 'react-router-dom';\n\n\t@withRouter\t//可获取路由信息并且有改变路由的权限\n\tclass A extends React.Component{\n\t\tconstructor(props) {\n\t        super(props);\n\t    }\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{store.getList.map((item, i)=>\n\t\t\t\t\t\t\t<li key={i}>{item.name}</li>\n\t\t\t\t\t\t)}\t//获取store的数据并且循环渲染\n\t\t\t\t\t</ul>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={()=>this.props.history.push('/a/123')} //跳转到A的详情页面并且附带参数值123\n\t\t\t\t\t></buton>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\tA.propTypes = {\n\t\tname: PropTypes.string.isRequired\n\t}\n\tA.defaultProps = {name: ''}\n\texport default A; \n\t//B同理\n\t//用了mobx的数据仓库可以用全局的数据来控制，用引进的store做数据仓库propTypes和defaultProps可不写\n\n### ADetail.js\n\n\timport React from 'react';\n\timport PropTypes form 'prop-types';\n\timport { observer, Provider } from 'mobx-react';\n\timport store from 'ADetailStore';\n\timport { withRouter } from 'react-router-dom';\n\t\n\t@withRouter\n\tclass ADetail extends React.Component{\n\t\tconstructor(props) {\n\t        super(props);\n\t    }\n\t\tcomponentDidMount() {\n        \tstore.getDetailForApi();\n    \t}\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tID参数值 是｛this.props.match.params.id｝\n\t\t\t\t\t\t//这里可以显示和调用store的方法和数据 \n\t\t\t\t\t</div>\n\t\t\t\t</Provider>\n\t\t\t)\n\t\t}\n\t}\n\texport default ADetail;\n\t//BDetail同理\n\n### ADetailComponent.js\n\n\timport React from 'react';\n\timport { observer, inject } from 'mobx-react';\n\t\n\t@inject('store')\t//inject写在observer之前\n\t@observer\t\t\t//检测页面随着检测的数据变化而发生变化\n\tclass ADetailComponent extends React.Component{\n\t\tconstructor(props) {\n\t        super(props);\n\t    }\n\t\t\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<div >\n\t\t\t\t\t名称 ： {this.props.store.info.getName}\n\t\t\t\t\t//这里可以显示和调用父层组件（不限）ADetail渗透进来的store的方法和数据 \n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\texport default ADetailComponent;\n\n### Error404.js\n\n\timport React from 'react';\n\t\n\tclass Error404 extends React.Component{\n\t\t\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<div >\n\t\t\t\t\t404页面\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\texport default Error404;\n\n## 四，定义路由配置文件 \n### routersConfig.js\n\t//配置不用写登录页和404这种特殊页面，只写菜单导航页即可\n\timport A from 'A';\n\timport ADetail from 'ADetail';\n\timport B from 'B';\n\timport BDetail from 'BDetail';\n\n\texport default\n\t [{\n\t        'path': '/a',\n\t        'component': A,\n\t        'meta': {} //这里是自定义的信息。可写可不写\n\t },{\n\t        'path': '/a/:id', //这里是id是必传的参数如 /a/123\n\t        'component': ADetail\n\t },{\n\t        'path': '/b',\n\t        'component': B\n\t },{\n\t        'path': '/b/:id?', //这里是id是非必传的参数如 /a/123 或者 /a 都不会报错\n\t        'component': BDetail,\n\t },]\n\n<br />\n\n## 五，定义路由入口文件\n### 一级路由index.js\n\n\timport React, { Component } from 'react';\n\timport { Route, Switch, withRouter } from 'react-router-dom';\n\timport LoginPage from 'LoginPage';\n\timport MainPage from 'MainPage';\n\t\n\t@withRouter\n\tclass Index extends Component {\n\t\tconstructor(props) {\n\t        super(props);\n\t    }\n\t\tcomponentWillMount() {\n\t\t\t//判断是否已登录\n\t\t}\n\t\tcomponentWillReceiveProps() {\n\t\t\t//判断是否已登录\n\t\t}\n\t\trender (){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Switch>\n\t                    <Route path=\"/login\" component={LoginPage} />\n\t                    <Route path='/' component={MainPage} />\n\t                </Switch>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\texport default Index\n<br />\n\n### 二级路由MainPage.js\n\n\timport React, { Component } from 'react';\n\timport { Route, Switch, withRouter } from 'react-router-dom';\n\timport routerConfig from 'routerConfig'; //导入路由配置文件作遍历\n\timport Error404 from 'Error404';\n\n\tclass MainPage extends Component {\n\t\tconstructor(props) {\n\t        super(props);\n\t    }\n\t\trender (){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<NavComponent />\n\t                <MainContent />\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\t\n\t//导航组件\n\tclass NavComponent extends Component {\n\t\trender (){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\n\t//页面主组件\n\t@withRouter\n\tclass MainContent extends Component {\n\t\trender (){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Switch>\n                         {routerConfig.map((item, i) =>\n                             <Route key={i} path={item.path} exact render={props =>\n                                 <item.component collapsed={this.props.collapsed} changeCollapsed=\t{this.props.changeCollapsed} meta={item.meta} />\n                                } >\n                             </Route>\n                         )}\n                          <Route exact component={Error404}></Route>\n                    </Switch>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\texport default MainPage\n\n# 完成","source":"_posts/整合react+mobx+axios+react-router4.md","raw":"---\ntitle: 整合react + mobx + axios + react-router4\ndate: 2018-12-01 10:27:12\ndescription: '一步步整个整合react + mobx + axios + react-router4'\ntags: [js, 架构]\ncategories: '前端'\n\n---\n\n# react + mobx + axios + react-router4\n\n----------\n\n![](https://i.imgur.com/SrLftUC.png)\n\n## 一，定义axios的api接口\n### aService.js\n\n\timport axios from 'axios';\n\tconst errorHandler = error => {\n\t    console.log(\"出错信息如下\");\n\t    console.log(error);\n\t}\n\tconst host = 'http://www.example.com';\n\n\texport default {\n\t\tgetList(){\n\t\t\treturn axios.get(`${host}/api/XXX`).catch(errorHandler);//get, post, put, delete方法都有\n\t\t},\n\t\tgetDetail(id) {\n\t\t\treturn axios.get(`${host}/api/XXX?id=${id}`).catch(errorHandler);\n\t\t}\n\t}\n\t//bService.js 同理\n\n<br />\n\n## 二，定义mobx数据仓库\n原则上一个页面级组件及其的子组件都公用一个实例化的数据仓库\n### AStore.js\n\n\timport { observable, action, toJS, computed } from 'mobx';\n\timport aService from 'aService';\n\t\n\t/**\n\t * A 自己的store\n\t * 在 页面级 通过 Provider 渗透到所有子组件。\n\t * 在子组件内用 @inject('store')，将 store 注入到自己的 props 上。\n\t */\n\tclass Store {\n\t\tconstructor() {\n\t        this.getListForApi = this.getListForApi.bind(this);\n\t    }\n\n\t    @observable list = []; //被观察的属性数据\n\t\t@computed get getList(){ return toJS(this.list) } //get方法, 把observer类型转为js的类型返回\n\t\t@action.bound setList(value) { this.list = value; } //set方法\n\t\t\n\t\tgetListForApi(){\n\t\t\taService.getList().then(this.getListForApiCallBack);\n\t\t}\n\t\t@action.bound getListForApiCallBack(res){\n\t\t\t//这里的api回调必须这样分开写才可以被观察到\n\t\t\t//这里调用api，拿到后台返回的数据后，把list赋值\n\t\t}\n\t}\n\t\n\texport default new Store\n\t// 导出一个new的Store，确保渗透的数据仓库都用同一份数据，同一个实例\n\n### ADetailStore.js\n\n\timport { observable, action, toJS, computed } from 'mobx';\n\timport aService from 'aService';\n\n\tclass Store {\n\t\tconstructor() {\n\t        this.getDetailForApi = this.getDetailForApi.bind(this);\n\t    }\n\t\t\n\t\t@observable id = '';\n\t\t@computed get getId(){ return toJS(this.id) } //get方法\n\t\t@action.bound setId(value) { this.id = value; } //set方法\n\n\t    @observable info = {\n\t\t\tname: '',\n\t\t\tcode: '',\n\t\t\tget getName(){ return toJS(this.name) },\n\t\t\tsetName(value){ this.name = value; },\n\t\t\tget getCode(){ return toJS(this.code) },\n\t\t\tsetCode(value){ this.code = value; }\n\t\t}\n\t\t\n\t\tgetDetailForApi(){\n\t\t\taService.getDetail(this.getId).then(this.getDetailForApi);\n\t\t}\n\t\t@action.bound getDetailForApiCallBack(res){\n\t\t\t//todo\n\t\t}\n\t}\n\t\n\texport default new Store\n\n<br />\n## 三，定义页面级组件\n### A.js\n\n\timport React from 'react';\n\timport PropTypes form 'prop-types';\n\timport { observer, Provider } from 'mobx-react';\n\timport store from 'AStore';\n\timport { withRouter } from 'react-router-dom';\n\n\t@withRouter\t//可获取路由信息并且有改变路由的权限\n\tclass A extends React.Component{\n\t\tconstructor(props) {\n\t        super(props);\n\t    }\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{store.getList.map((item, i)=>\n\t\t\t\t\t\t\t<li key={i}>{item.name}</li>\n\t\t\t\t\t\t)}\t//获取store的数据并且循环渲染\n\t\t\t\t\t</ul>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={()=>this.props.history.push('/a/123')} //跳转到A的详情页面并且附带参数值123\n\t\t\t\t\t></buton>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\tA.propTypes = {\n\t\tname: PropTypes.string.isRequired\n\t}\n\tA.defaultProps = {name: ''}\n\texport default A; \n\t//B同理\n\t//用了mobx的数据仓库可以用全局的数据来控制，用引进的store做数据仓库propTypes和defaultProps可不写\n\n### ADetail.js\n\n\timport React from 'react';\n\timport PropTypes form 'prop-types';\n\timport { observer, Provider } from 'mobx-react';\n\timport store from 'ADetailStore';\n\timport { withRouter } from 'react-router-dom';\n\t\n\t@withRouter\n\tclass ADetail extends React.Component{\n\t\tconstructor(props) {\n\t        super(props);\n\t    }\n\t\tcomponentDidMount() {\n        \tstore.getDetailForApi();\n    \t}\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tID参数值 是｛this.props.match.params.id｝\n\t\t\t\t\t\t//这里可以显示和调用store的方法和数据 \n\t\t\t\t\t</div>\n\t\t\t\t</Provider>\n\t\t\t)\n\t\t}\n\t}\n\texport default ADetail;\n\t//BDetail同理\n\n### ADetailComponent.js\n\n\timport React from 'react';\n\timport { observer, inject } from 'mobx-react';\n\t\n\t@inject('store')\t//inject写在observer之前\n\t@observer\t\t\t//检测页面随着检测的数据变化而发生变化\n\tclass ADetailComponent extends React.Component{\n\t\tconstructor(props) {\n\t        super(props);\n\t    }\n\t\t\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<div >\n\t\t\t\t\t名称 ： {this.props.store.info.getName}\n\t\t\t\t\t//这里可以显示和调用父层组件（不限）ADetail渗透进来的store的方法和数据 \n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\texport default ADetailComponent;\n\n### Error404.js\n\n\timport React from 'react';\n\t\n\tclass Error404 extends React.Component{\n\t\t\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<div >\n\t\t\t\t\t404页面\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\texport default Error404;\n\n## 四，定义路由配置文件 \n### routersConfig.js\n\t//配置不用写登录页和404这种特殊页面，只写菜单导航页即可\n\timport A from 'A';\n\timport ADetail from 'ADetail';\n\timport B from 'B';\n\timport BDetail from 'BDetail';\n\n\texport default\n\t [{\n\t        'path': '/a',\n\t        'component': A,\n\t        'meta': {} //这里是自定义的信息。可写可不写\n\t },{\n\t        'path': '/a/:id', //这里是id是必传的参数如 /a/123\n\t        'component': ADetail\n\t },{\n\t        'path': '/b',\n\t        'component': B\n\t },{\n\t        'path': '/b/:id?', //这里是id是非必传的参数如 /a/123 或者 /a 都不会报错\n\t        'component': BDetail,\n\t },]\n\n<br />\n\n## 五，定义路由入口文件\n### 一级路由index.js\n\n\timport React, { Component } from 'react';\n\timport { Route, Switch, withRouter } from 'react-router-dom';\n\timport LoginPage from 'LoginPage';\n\timport MainPage from 'MainPage';\n\t\n\t@withRouter\n\tclass Index extends Component {\n\t\tconstructor(props) {\n\t        super(props);\n\t    }\n\t\tcomponentWillMount() {\n\t\t\t//判断是否已登录\n\t\t}\n\t\tcomponentWillReceiveProps() {\n\t\t\t//判断是否已登录\n\t\t}\n\t\trender (){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Switch>\n\t                    <Route path=\"/login\" component={LoginPage} />\n\t                    <Route path='/' component={MainPage} />\n\t                </Switch>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\texport default Index\n<br />\n\n### 二级路由MainPage.js\n\n\timport React, { Component } from 'react';\n\timport { Route, Switch, withRouter } from 'react-router-dom';\n\timport routerConfig from 'routerConfig'; //导入路由配置文件作遍历\n\timport Error404 from 'Error404';\n\n\tclass MainPage extends Component {\n\t\tconstructor(props) {\n\t        super(props);\n\t    }\n\t\trender (){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<NavComponent />\n\t                <MainContent />\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\t\n\t//导航组件\n\tclass NavComponent extends Component {\n\t\trender (){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\n\t//页面主组件\n\t@withRouter\n\tclass MainContent extends Component {\n\t\trender (){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Switch>\n                         {routerConfig.map((item, i) =>\n                             <Route key={i} path={item.path} exact render={props =>\n                                 <item.component collapsed={this.props.collapsed} changeCollapsed=\t{this.props.changeCollapsed} meta={item.meta} />\n                                } >\n                             </Route>\n                         )}\n                          <Route exact component={Error404}></Route>\n                    </Switch>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\texport default MainPage\n\n# 完成","slug":"整合react+mobx+axios+react-router4","published":1,"updated":"2018-12-17T14:00:32.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0idp001z1wu0hedjvrbs","content":"<h1 id=\"react-mobx-axios-react-router4\"><a href=\"#react-mobx-axios-react-router4\" class=\"headerlink\" title=\"react + mobx + axios + react-router4\"></a>react + mobx + axios + react-router4</h1><hr>\n<p><img src=\"https://i.imgur.com/SrLftUC.png\" alt=\"\"></p>\n<h2 id=\"一，定义axios的api接口\"><a href=\"#一，定义axios的api接口\" class=\"headerlink\" title=\"一，定义axios的api接口\"></a>一，定义axios的api接口</h2><h3 id=\"aService-js\"><a href=\"#aService-js\" class=\"headerlink\" title=\"aService.js\"></a>aService.js</h3><pre><code>import axios from &apos;axios&apos;;\nconst errorHandler = error =&gt; {\n    console.log(&quot;出错信息如下&quot;);\n    console.log(error);\n}\nconst host = &apos;http://www.example.com&apos;;\n\nexport default {\n    getList(){\n        return axios.get(`${host}/api/XXX`).catch(errorHandler);//get, post, put, delete方法都有\n    },\n    getDetail(id) {\n        return axios.get(`${host}/api/XXX?id=${id}`).catch(errorHandler);\n    }\n}\n//bService.js 同理\n</code></pre><p><br></p>\n<h2 id=\"二，定义mobx数据仓库\"><a href=\"#二，定义mobx数据仓库\" class=\"headerlink\" title=\"二，定义mobx数据仓库\"></a>二，定义mobx数据仓库</h2><p>原则上一个页面级组件及其的子组件都公用一个实例化的数据仓库</p>\n<h3 id=\"AStore-js\"><a href=\"#AStore-js\" class=\"headerlink\" title=\"AStore.js\"></a>AStore.js</h3><pre><code>import { observable, action, toJS, computed } from &apos;mobx&apos;;\nimport aService from &apos;aService&apos;;\n\n/**\n * A 自己的store\n * 在 页面级 通过 Provider 渗透到所有子组件。\n * 在子组件内用 @inject(&apos;store&apos;)，将 store 注入到自己的 props 上。\n */\nclass Store {\n    constructor() {\n        this.getListForApi = this.getListForApi.bind(this);\n    }\n\n    @observable list = []; //被观察的属性数据\n    @computed get getList(){ return toJS(this.list) } //get方法, 把observer类型转为js的类型返回\n    @action.bound setList(value) { this.list = value; } //set方法\n\n    getListForApi(){\n        aService.getList().then(this.getListForApiCallBack);\n    }\n    @action.bound getListForApiCallBack(res){\n        //这里的api回调必须这样分开写才可以被观察到\n        //这里调用api，拿到后台返回的数据后，把list赋值\n    }\n}\n\nexport default new Store\n// 导出一个new的Store，确保渗透的数据仓库都用同一份数据，同一个实例\n</code></pre><h3 id=\"ADetailStore-js\"><a href=\"#ADetailStore-js\" class=\"headerlink\" title=\"ADetailStore.js\"></a>ADetailStore.js</h3><pre><code>import { observable, action, toJS, computed } from &apos;mobx&apos;;\nimport aService from &apos;aService&apos;;\n\nclass Store {\n    constructor() {\n        this.getDetailForApi = this.getDetailForApi.bind(this);\n    }\n\n    @observable id = &apos;&apos;;\n    @computed get getId(){ return toJS(this.id) } //get方法\n    @action.bound setId(value) { this.id = value; } //set方法\n\n    @observable info = {\n        name: &apos;&apos;,\n        code: &apos;&apos;,\n        get getName(){ return toJS(this.name) },\n        setName(value){ this.name = value; },\n        get getCode(){ return toJS(this.code) },\n        setCode(value){ this.code = value; }\n    }\n\n    getDetailForApi(){\n        aService.getDetail(this.getId).then(this.getDetailForApi);\n    }\n    @action.bound getDetailForApiCallBack(res){\n        //todo\n    }\n}\n\nexport default new Store\n</code></pre><p><br></p>\n<h2 id=\"三，定义页面级组件\"><a href=\"#三，定义页面级组件\" class=\"headerlink\" title=\"三，定义页面级组件\"></a>三，定义页面级组件</h2><h3 id=\"A-js\"><a href=\"#A-js\" class=\"headerlink\" title=\"A.js\"></a>A.js</h3><pre><code>import React from &apos;react&apos;;\nimport PropTypes form &apos;prop-types&apos;;\nimport { observer, Provider } from &apos;mobx-react&apos;;\nimport store from &apos;AStore&apos;;\nimport { withRouter } from &apos;react-router-dom&apos;;\n\n@withRouter    //可获取路由信息并且有改变路由的权限\nclass A extends React.Component{\n    constructor(props) {\n        super(props);\n    }\n    render(){\n        return (\n            &lt;div&gt;\n                &lt;ul&gt;\n                    {store.getList.map((item, i)=&gt;\n                        &lt;li key={i}&gt;{item.name}&lt;/li&gt;\n                    )}    //获取store的数据并且循环渲染\n                &lt;/ul&gt;\n                &lt;button\n                    onClick={()=&gt;this.props.history.push(&apos;/a/123&apos;)} //跳转到A的详情页面并且附带参数值123\n                &gt;&lt;/buton&gt;\n            &lt;/div&gt;\n        )\n    }\n}\nA.propTypes = {\n    name: PropTypes.string.isRequired\n}\nA.defaultProps = {name: &apos;&apos;}\nexport default A; \n//B同理\n//用了mobx的数据仓库可以用全局的数据来控制，用引进的store做数据仓库propTypes和defaultProps可不写\n</code></pre><h3 id=\"ADetail-js\"><a href=\"#ADetail-js\" class=\"headerlink\" title=\"ADetail.js\"></a>ADetail.js</h3><pre><code>import React from &apos;react&apos;;\nimport PropTypes form &apos;prop-types&apos;;\nimport { observer, Provider } from &apos;mobx-react&apos;;\nimport store from &apos;ADetailStore&apos;;\nimport { withRouter } from &apos;react-router-dom&apos;;\n\n@withRouter\nclass ADetail extends React.Component{\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        store.getDetailForApi();\n    }\n    render(){\n        return (\n            &lt;Provider store={store}&gt;\n                &lt;div&gt;\n                    ID参数值 是｛this.props.match.params.id｝\n                    //这里可以显示和调用store的方法和数据 \n                &lt;/div&gt;\n            &lt;/Provider&gt;\n        )\n    }\n}\nexport default ADetail;\n//BDetail同理\n</code></pre><h3 id=\"ADetailComponent-js\"><a href=\"#ADetailComponent-js\" class=\"headerlink\" title=\"ADetailComponent.js\"></a>ADetailComponent.js</h3><pre><code>import React from &apos;react&apos;;\nimport { observer, inject } from &apos;mobx-react&apos;;\n\n@inject(&apos;store&apos;)    //inject写在observer之前\n@observer            //检测页面随着检测的数据变化而发生变化\nclass ADetailComponent extends React.Component{\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        return (\n            &lt;div &gt;\n                名称 ： {this.props.store.info.getName}\n                //这里可以显示和调用父层组件（不限）ADetail渗透进来的store的方法和数据 \n            &lt;/div&gt;\n        )\n    }\n}\nexport default ADetailComponent;\n</code></pre><h3 id=\"Error404-js\"><a href=\"#Error404-js\" class=\"headerlink\" title=\"Error404.js\"></a>Error404.js</h3><pre><code>import React from &apos;react&apos;;\n\nclass Error404 extends React.Component{\n\n    render(){\n        return (\n            &lt;div &gt;\n                404页面\n            &lt;/div&gt;\n        )\n    }\n}\nexport default Error404;\n</code></pre><h2 id=\"四，定义路由配置文件\"><a href=\"#四，定义路由配置文件\" class=\"headerlink\" title=\"四，定义路由配置文件\"></a>四，定义路由配置文件</h2><h3 id=\"routersConfig-js\"><a href=\"#routersConfig-js\" class=\"headerlink\" title=\"routersConfig.js\"></a>routersConfig.js</h3><pre><code>//配置不用写登录页和404这种特殊页面，只写菜单导航页即可\nimport A from &apos;A&apos;;\nimport ADetail from &apos;ADetail&apos;;\nimport B from &apos;B&apos;;\nimport BDetail from &apos;BDetail&apos;;\n\nexport default\n [{\n        &apos;path&apos;: &apos;/a&apos;,\n        &apos;component&apos;: A,\n        &apos;meta&apos;: {} //这里是自定义的信息。可写可不写\n },{\n        &apos;path&apos;: &apos;/a/:id&apos;, //这里是id是必传的参数如 /a/123\n        &apos;component&apos;: ADetail\n },{\n        &apos;path&apos;: &apos;/b&apos;,\n        &apos;component&apos;: B\n },{\n        &apos;path&apos;: &apos;/b/:id?&apos;, //这里是id是非必传的参数如 /a/123 或者 /a 都不会报错\n        &apos;component&apos;: BDetail,\n },]\n</code></pre><p><br></p>\n<h2 id=\"五，定义路由入口文件\"><a href=\"#五，定义路由入口文件\" class=\"headerlink\" title=\"五，定义路由入口文件\"></a>五，定义路由入口文件</h2><h3 id=\"一级路由index-js\"><a href=\"#一级路由index-js\" class=\"headerlink\" title=\"一级路由index.js\"></a>一级路由index.js</h3><pre><code>import React, { Component } from &apos;react&apos;;\nimport { Route, Switch, withRouter } from &apos;react-router-dom&apos;;\nimport LoginPage from &apos;LoginPage&apos;;\nimport MainPage from &apos;MainPage&apos;;\n\n@withRouter\nclass Index extends Component {\n    constructor(props) {\n        super(props);\n    }\n    componentWillMount() {\n        //判断是否已登录\n    }\n    componentWillReceiveProps() {\n        //判断是否已登录\n    }\n    render (){\n        return (\n            &lt;div&gt;\n                &lt;Switch&gt;\n                    &lt;Route path=&quot;/login&quot; component={LoginPage} /&gt;\n                    &lt;Route path=&apos;/&apos; component={MainPage} /&gt;\n                &lt;/Switch&gt;\n            &lt;/div&gt;\n        )\n    }\n}\nexport default Index\n</code></pre><p><br></p>\n<h3 id=\"二级路由MainPage-js\"><a href=\"#二级路由MainPage-js\" class=\"headerlink\" title=\"二级路由MainPage.js\"></a>二级路由MainPage.js</h3><pre><code>import React, { Component } from &apos;react&apos;;\nimport { Route, Switch, withRouter } from &apos;react-router-dom&apos;;\nimport routerConfig from &apos;routerConfig&apos;; //导入路由配置文件作遍历\nimport Error404 from &apos;Error404&apos;;\n\nclass MainPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render (){\n        return (\n            &lt;div&gt;\n                &lt;NavComponent /&gt;\n                &lt;MainContent /&gt;\n            &lt;/div&gt;\n        )\n    }\n}\n\n//导航组件\nclass NavComponent extends Component {\n    render (){\n        return (\n            &lt;div&gt;\n            &lt;/div&gt;\n        )\n    }\n}\n\n//页面主组件\n@withRouter\nclass MainContent extends Component {\n    render (){\n        return (\n            &lt;div&gt;\n                &lt;Switch&gt;\n                     {routerConfig.map((item, i) =&gt;\n                         &lt;Route key={i} path={item.path} exact render={props =&gt;\n                             &lt;item.component collapsed={this.props.collapsed} changeCollapsed=    {this.props.changeCollapsed} meta={item.meta} /&gt;\n                            } &gt;\n                         &lt;/Route&gt;\n                     )}\n                      &lt;Route exact component={Error404}&gt;&lt;/Route&gt;\n                &lt;/Switch&gt;\n            &lt;/div&gt;\n        )\n    }\n}\nexport default MainPage\n</code></pre><h1 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"react-mobx-axios-react-router4\"><a href=\"#react-mobx-axios-react-router4\" class=\"headerlink\" title=\"react + mobx + axios + react-router4\"></a>react + mobx + axios + react-router4</h1><hr>\n<p><img src=\"https://i.imgur.com/SrLftUC.png\" alt=\"\"></p>\n<h2 id=\"一，定义axios的api接口\"><a href=\"#一，定义axios的api接口\" class=\"headerlink\" title=\"一，定义axios的api接口\"></a>一，定义axios的api接口</h2><h3 id=\"aService-js\"><a href=\"#aService-js\" class=\"headerlink\" title=\"aService.js\"></a>aService.js</h3><pre><code>import axios from &apos;axios&apos;;\nconst errorHandler = error =&gt; {\n    console.log(&quot;出错信息如下&quot;);\n    console.log(error);\n}\nconst host = &apos;http://www.example.com&apos;;\n\nexport default {\n    getList(){\n        return axios.get(`${host}/api/XXX`).catch(errorHandler);//get, post, put, delete方法都有\n    },\n    getDetail(id) {\n        return axios.get(`${host}/api/XXX?id=${id}`).catch(errorHandler);\n    }\n}\n//bService.js 同理\n</code></pre><p><br></p>\n<h2 id=\"二，定义mobx数据仓库\"><a href=\"#二，定义mobx数据仓库\" class=\"headerlink\" title=\"二，定义mobx数据仓库\"></a>二，定义mobx数据仓库</h2><p>原则上一个页面级组件及其的子组件都公用一个实例化的数据仓库</p>\n<h3 id=\"AStore-js\"><a href=\"#AStore-js\" class=\"headerlink\" title=\"AStore.js\"></a>AStore.js</h3><pre><code>import { observable, action, toJS, computed } from &apos;mobx&apos;;\nimport aService from &apos;aService&apos;;\n\n/**\n * A 自己的store\n * 在 页面级 通过 Provider 渗透到所有子组件。\n * 在子组件内用 @inject(&apos;store&apos;)，将 store 注入到自己的 props 上。\n */\nclass Store {\n    constructor() {\n        this.getListForApi = this.getListForApi.bind(this);\n    }\n\n    @observable list = []; //被观察的属性数据\n    @computed get getList(){ return toJS(this.list) } //get方法, 把observer类型转为js的类型返回\n    @action.bound setList(value) { this.list = value; } //set方法\n\n    getListForApi(){\n        aService.getList().then(this.getListForApiCallBack);\n    }\n    @action.bound getListForApiCallBack(res){\n        //这里的api回调必须这样分开写才可以被观察到\n        //这里调用api，拿到后台返回的数据后，把list赋值\n    }\n}\n\nexport default new Store\n// 导出一个new的Store，确保渗透的数据仓库都用同一份数据，同一个实例\n</code></pre><h3 id=\"ADetailStore-js\"><a href=\"#ADetailStore-js\" class=\"headerlink\" title=\"ADetailStore.js\"></a>ADetailStore.js</h3><pre><code>import { observable, action, toJS, computed } from &apos;mobx&apos;;\nimport aService from &apos;aService&apos;;\n\nclass Store {\n    constructor() {\n        this.getDetailForApi = this.getDetailForApi.bind(this);\n    }\n\n    @observable id = &apos;&apos;;\n    @computed get getId(){ return toJS(this.id) } //get方法\n    @action.bound setId(value) { this.id = value; } //set方法\n\n    @observable info = {\n        name: &apos;&apos;,\n        code: &apos;&apos;,\n        get getName(){ return toJS(this.name) },\n        setName(value){ this.name = value; },\n        get getCode(){ return toJS(this.code) },\n        setCode(value){ this.code = value; }\n    }\n\n    getDetailForApi(){\n        aService.getDetail(this.getId).then(this.getDetailForApi);\n    }\n    @action.bound getDetailForApiCallBack(res){\n        //todo\n    }\n}\n\nexport default new Store\n</code></pre><p><br></p>\n<h2 id=\"三，定义页面级组件\"><a href=\"#三，定义页面级组件\" class=\"headerlink\" title=\"三，定义页面级组件\"></a>三，定义页面级组件</h2><h3 id=\"A-js\"><a href=\"#A-js\" class=\"headerlink\" title=\"A.js\"></a>A.js</h3><pre><code>import React from &apos;react&apos;;\nimport PropTypes form &apos;prop-types&apos;;\nimport { observer, Provider } from &apos;mobx-react&apos;;\nimport store from &apos;AStore&apos;;\nimport { withRouter } from &apos;react-router-dom&apos;;\n\n@withRouter    //可获取路由信息并且有改变路由的权限\nclass A extends React.Component{\n    constructor(props) {\n        super(props);\n    }\n    render(){\n        return (\n            &lt;div&gt;\n                &lt;ul&gt;\n                    {store.getList.map((item, i)=&gt;\n                        &lt;li key={i}&gt;{item.name}&lt;/li&gt;\n                    )}    //获取store的数据并且循环渲染\n                &lt;/ul&gt;\n                &lt;button\n                    onClick={()=&gt;this.props.history.push(&apos;/a/123&apos;)} //跳转到A的详情页面并且附带参数值123\n                &gt;&lt;/buton&gt;\n            &lt;/div&gt;\n        )\n    }\n}\nA.propTypes = {\n    name: PropTypes.string.isRequired\n}\nA.defaultProps = {name: &apos;&apos;}\nexport default A; \n//B同理\n//用了mobx的数据仓库可以用全局的数据来控制，用引进的store做数据仓库propTypes和defaultProps可不写\n</code></pre><h3 id=\"ADetail-js\"><a href=\"#ADetail-js\" class=\"headerlink\" title=\"ADetail.js\"></a>ADetail.js</h3><pre><code>import React from &apos;react&apos;;\nimport PropTypes form &apos;prop-types&apos;;\nimport { observer, Provider } from &apos;mobx-react&apos;;\nimport store from &apos;ADetailStore&apos;;\nimport { withRouter } from &apos;react-router-dom&apos;;\n\n@withRouter\nclass ADetail extends React.Component{\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        store.getDetailForApi();\n    }\n    render(){\n        return (\n            &lt;Provider store={store}&gt;\n                &lt;div&gt;\n                    ID参数值 是｛this.props.match.params.id｝\n                    //这里可以显示和调用store的方法和数据 \n                &lt;/div&gt;\n            &lt;/Provider&gt;\n        )\n    }\n}\nexport default ADetail;\n//BDetail同理\n</code></pre><h3 id=\"ADetailComponent-js\"><a href=\"#ADetailComponent-js\" class=\"headerlink\" title=\"ADetailComponent.js\"></a>ADetailComponent.js</h3><pre><code>import React from &apos;react&apos;;\nimport { observer, inject } from &apos;mobx-react&apos;;\n\n@inject(&apos;store&apos;)    //inject写在observer之前\n@observer            //检测页面随着检测的数据变化而发生变化\nclass ADetailComponent extends React.Component{\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        return (\n            &lt;div &gt;\n                名称 ： {this.props.store.info.getName}\n                //这里可以显示和调用父层组件（不限）ADetail渗透进来的store的方法和数据 \n            &lt;/div&gt;\n        )\n    }\n}\nexport default ADetailComponent;\n</code></pre><h3 id=\"Error404-js\"><a href=\"#Error404-js\" class=\"headerlink\" title=\"Error404.js\"></a>Error404.js</h3><pre><code>import React from &apos;react&apos;;\n\nclass Error404 extends React.Component{\n\n    render(){\n        return (\n            &lt;div &gt;\n                404页面\n            &lt;/div&gt;\n        )\n    }\n}\nexport default Error404;\n</code></pre><h2 id=\"四，定义路由配置文件\"><a href=\"#四，定义路由配置文件\" class=\"headerlink\" title=\"四，定义路由配置文件\"></a>四，定义路由配置文件</h2><h3 id=\"routersConfig-js\"><a href=\"#routersConfig-js\" class=\"headerlink\" title=\"routersConfig.js\"></a>routersConfig.js</h3><pre><code>//配置不用写登录页和404这种特殊页面，只写菜单导航页即可\nimport A from &apos;A&apos;;\nimport ADetail from &apos;ADetail&apos;;\nimport B from &apos;B&apos;;\nimport BDetail from &apos;BDetail&apos;;\n\nexport default\n [{\n        &apos;path&apos;: &apos;/a&apos;,\n        &apos;component&apos;: A,\n        &apos;meta&apos;: {} //这里是自定义的信息。可写可不写\n },{\n        &apos;path&apos;: &apos;/a/:id&apos;, //这里是id是必传的参数如 /a/123\n        &apos;component&apos;: ADetail\n },{\n        &apos;path&apos;: &apos;/b&apos;,\n        &apos;component&apos;: B\n },{\n        &apos;path&apos;: &apos;/b/:id?&apos;, //这里是id是非必传的参数如 /a/123 或者 /a 都不会报错\n        &apos;component&apos;: BDetail,\n },]\n</code></pre><p><br></p>\n<h2 id=\"五，定义路由入口文件\"><a href=\"#五，定义路由入口文件\" class=\"headerlink\" title=\"五，定义路由入口文件\"></a>五，定义路由入口文件</h2><h3 id=\"一级路由index-js\"><a href=\"#一级路由index-js\" class=\"headerlink\" title=\"一级路由index.js\"></a>一级路由index.js</h3><pre><code>import React, { Component } from &apos;react&apos;;\nimport { Route, Switch, withRouter } from &apos;react-router-dom&apos;;\nimport LoginPage from &apos;LoginPage&apos;;\nimport MainPage from &apos;MainPage&apos;;\n\n@withRouter\nclass Index extends Component {\n    constructor(props) {\n        super(props);\n    }\n    componentWillMount() {\n        //判断是否已登录\n    }\n    componentWillReceiveProps() {\n        //判断是否已登录\n    }\n    render (){\n        return (\n            &lt;div&gt;\n                &lt;Switch&gt;\n                    &lt;Route path=&quot;/login&quot; component={LoginPage} /&gt;\n                    &lt;Route path=&apos;/&apos; component={MainPage} /&gt;\n                &lt;/Switch&gt;\n            &lt;/div&gt;\n        )\n    }\n}\nexport default Index\n</code></pre><p><br></p>\n<h3 id=\"二级路由MainPage-js\"><a href=\"#二级路由MainPage-js\" class=\"headerlink\" title=\"二级路由MainPage.js\"></a>二级路由MainPage.js</h3><pre><code>import React, { Component } from &apos;react&apos;;\nimport { Route, Switch, withRouter } from &apos;react-router-dom&apos;;\nimport routerConfig from &apos;routerConfig&apos;; //导入路由配置文件作遍历\nimport Error404 from &apos;Error404&apos;;\n\nclass MainPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render (){\n        return (\n            &lt;div&gt;\n                &lt;NavComponent /&gt;\n                &lt;MainContent /&gt;\n            &lt;/div&gt;\n        )\n    }\n}\n\n//导航组件\nclass NavComponent extends Component {\n    render (){\n        return (\n            &lt;div&gt;\n            &lt;/div&gt;\n        )\n    }\n}\n\n//页面主组件\n@withRouter\nclass MainContent extends Component {\n    render (){\n        return (\n            &lt;div&gt;\n                &lt;Switch&gt;\n                     {routerConfig.map((item, i) =&gt;\n                         &lt;Route key={i} path={item.path} exact render={props =&gt;\n                             &lt;item.component collapsed={this.props.collapsed} changeCollapsed=    {this.props.changeCollapsed} meta={item.meta} /&gt;\n                            } &gt;\n                         &lt;/Route&gt;\n                     )}\n                      &lt;Route exact component={Error404}&gt;&lt;/Route&gt;\n                &lt;/Switch&gt;\n            &lt;/div&gt;\n        )\n    }\n}\nexport default MainPage\n</code></pre><h1 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h1>"},{"title":"系统集成项目管理工程师","date":"2018-07-02T02:52:01.000Z","description":"中级项目经理知识点","_content":"\n\n##国家信息化体系的九大战略重点\n- 1，推进国民经济信息化\n- 2，推行电子政务\n- 3，建设先进网络文化\n- 4，推进社会信息化\n- 5，完善综合信息基础设施\n- 6，加强信息资源的开发利用\n- 7，提高信息产业竞争力\n- 8，建设国家信息安全保障体系\n- 9，提高国民信息技术应用能力\n- 口诀 经政文社基开竞安用\n\n##国家信息化体系的六个要素\n- 1，信息技术应用\n- 2，信息资源\n- 3，信息网络\n- 4，信息技术和产业，\n- 5，信息化人才，\n- 6，信息化政策法规和标准规范\n- 口诀 资网技产人政\n\n##EAI（企业应用集成）包括\n- 1，界面集成\n- 2，平台集成\n- 3，数据集成\n- 4，应用集成\n- 5，过程集成\n- 口诀 界平数应过\n\n##系统集成服务的集体内容\n- 1，硬件集成\n- 2，软件集成\n- 3，数据和信息集成\n- 4，技术与管理集成\n- 5，人与组织机构的集成\n- 口诀 硬软数技人\n##模块内聚性由低到高\n- 1，偶然内聚\n- 2，逻辑内聚\n- 3，时间内聚\n- 4，过程内聚\n- 5，通信内聚\n- 6，顺序内聚\n- 7，功能内聚\n- 口诀 偶逻时过通顺功\n\n##模块耦合性由低到高\n- 1，非直接耦合\n- 2，数据耦合\n- 3，标记耦合\n- 4，控制耦合\n- 5，外部耦合\n- 6，公共耦合\n- 7，内容耦合\n- 口诀 非数标控外公内\n\n##OSI/RM（开放系统互连参考模型）由低到高\n- 1，物理层\n- 2，数据链路层\n- 3，网络层\n- 4，传输层\n- 5，会话层\n- 6，表示层\n- 7，应用层\n- 口诀 物数网传会表应","source":"_posts/系统集成项目管理工程师.md","raw":"---\ntitle: 系统集成项目管理工程师\ndate: 2018-07-02 10:52:01\ntags: '软考'\ndescription: '中级项目经理知识点'\ncategories: '管理'\n\n---\n\n\n##国家信息化体系的九大战略重点\n- 1，推进国民经济信息化\n- 2，推行电子政务\n- 3，建设先进网络文化\n- 4，推进社会信息化\n- 5，完善综合信息基础设施\n- 6，加强信息资源的开发利用\n- 7，提高信息产业竞争力\n- 8，建设国家信息安全保障体系\n- 9，提高国民信息技术应用能力\n- 口诀 经政文社基开竞安用\n\n##国家信息化体系的六个要素\n- 1，信息技术应用\n- 2，信息资源\n- 3，信息网络\n- 4，信息技术和产业，\n- 5，信息化人才，\n- 6，信息化政策法规和标准规范\n- 口诀 资网技产人政\n\n##EAI（企业应用集成）包括\n- 1，界面集成\n- 2，平台集成\n- 3，数据集成\n- 4，应用集成\n- 5，过程集成\n- 口诀 界平数应过\n\n##系统集成服务的集体内容\n- 1，硬件集成\n- 2，软件集成\n- 3，数据和信息集成\n- 4，技术与管理集成\n- 5，人与组织机构的集成\n- 口诀 硬软数技人\n##模块内聚性由低到高\n- 1，偶然内聚\n- 2，逻辑内聚\n- 3，时间内聚\n- 4，过程内聚\n- 5，通信内聚\n- 6，顺序内聚\n- 7，功能内聚\n- 口诀 偶逻时过通顺功\n\n##模块耦合性由低到高\n- 1，非直接耦合\n- 2，数据耦合\n- 3，标记耦合\n- 4，控制耦合\n- 5，外部耦合\n- 6，公共耦合\n- 7，内容耦合\n- 口诀 非数标控外公内\n\n##OSI/RM（开放系统互连参考模型）由低到高\n- 1，物理层\n- 2，数据链路层\n- 3，网络层\n- 4，传输层\n- 5，会话层\n- 6，表示层\n- 7，应用层\n- 口诀 物数网传会表应","slug":"系统集成项目管理工程师","published":1,"updated":"2018-12-17T13:37:49.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0idt00221wu03xq1y7il","content":"<p>##国家信息化体系的九大战略重点</p>\n<ul>\n<li>1，推进国民经济信息化</li>\n<li>2，推行电子政务</li>\n<li>3，建设先进网络文化</li>\n<li>4，推进社会信息化</li>\n<li>5，完善综合信息基础设施</li>\n<li>6，加强信息资源的开发利用</li>\n<li>7，提高信息产业竞争力</li>\n<li>8，建设国家信息安全保障体系</li>\n<li>9，提高国民信息技术应用能力</li>\n<li>口诀 经政文社基开竞安用</li>\n</ul>\n<p>##国家信息化体系的六个要素</p>\n<ul>\n<li>1，信息技术应用</li>\n<li>2，信息资源</li>\n<li>3，信息网络</li>\n<li>4，信息技术和产业，</li>\n<li>5，信息化人才，</li>\n<li>6，信息化政策法规和标准规范</li>\n<li>口诀 资网技产人政</li>\n</ul>\n<p>##EAI（企业应用集成）包括</p>\n<ul>\n<li>1，界面集成</li>\n<li>2，平台集成</li>\n<li>3，数据集成</li>\n<li>4，应用集成</li>\n<li>5，过程集成</li>\n<li>口诀 界平数应过</li>\n</ul>\n<p>##系统集成服务的集体内容</p>\n<ul>\n<li>1，硬件集成</li>\n<li>2，软件集成</li>\n<li>3，数据和信息集成</li>\n<li>4，技术与管理集成</li>\n<li>5，人与组织机构的集成</li>\n<li>口诀 硬软数技人<br>##模块内聚性由低到高</li>\n<li>1，偶然内聚</li>\n<li>2，逻辑内聚</li>\n<li>3，时间内聚</li>\n<li>4，过程内聚</li>\n<li>5，通信内聚</li>\n<li>6，顺序内聚</li>\n<li>7，功能内聚</li>\n<li>口诀 偶逻时过通顺功</li>\n</ul>\n<p>##模块耦合性由低到高</p>\n<ul>\n<li>1，非直接耦合</li>\n<li>2，数据耦合</li>\n<li>3，标记耦合</li>\n<li>4，控制耦合</li>\n<li>5，外部耦合</li>\n<li>6，公共耦合</li>\n<li>7，内容耦合</li>\n<li>口诀 非数标控外公内</li>\n</ul>\n<p>##OSI/RM（开放系统互连参考模型）由低到高</p>\n<ul>\n<li>1，物理层</li>\n<li>2，数据链路层</li>\n<li>3，网络层</li>\n<li>4，传输层</li>\n<li>5，会话层</li>\n<li>6，表示层</li>\n<li>7，应用层</li>\n<li>口诀 物数网传会表应</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>##国家信息化体系的九大战略重点</p>\n<ul>\n<li>1，推进国民经济信息化</li>\n<li>2，推行电子政务</li>\n<li>3，建设先进网络文化</li>\n<li>4，推进社会信息化</li>\n<li>5，完善综合信息基础设施</li>\n<li>6，加强信息资源的开发利用</li>\n<li>7，提高信息产业竞争力</li>\n<li>8，建设国家信息安全保障体系</li>\n<li>9，提高国民信息技术应用能力</li>\n<li>口诀 经政文社基开竞安用</li>\n</ul>\n<p>##国家信息化体系的六个要素</p>\n<ul>\n<li>1，信息技术应用</li>\n<li>2，信息资源</li>\n<li>3，信息网络</li>\n<li>4，信息技术和产业，</li>\n<li>5，信息化人才，</li>\n<li>6，信息化政策法规和标准规范</li>\n<li>口诀 资网技产人政</li>\n</ul>\n<p>##EAI（企业应用集成）包括</p>\n<ul>\n<li>1，界面集成</li>\n<li>2，平台集成</li>\n<li>3，数据集成</li>\n<li>4，应用集成</li>\n<li>5，过程集成</li>\n<li>口诀 界平数应过</li>\n</ul>\n<p>##系统集成服务的集体内容</p>\n<ul>\n<li>1，硬件集成</li>\n<li>2，软件集成</li>\n<li>3，数据和信息集成</li>\n<li>4，技术与管理集成</li>\n<li>5，人与组织机构的集成</li>\n<li>口诀 硬软数技人<br>##模块内聚性由低到高</li>\n<li>1，偶然内聚</li>\n<li>2，逻辑内聚</li>\n<li>3，时间内聚</li>\n<li>4，过程内聚</li>\n<li>5，通信内聚</li>\n<li>6，顺序内聚</li>\n<li>7，功能内聚</li>\n<li>口诀 偶逻时过通顺功</li>\n</ul>\n<p>##模块耦合性由低到高</p>\n<ul>\n<li>1，非直接耦合</li>\n<li>2，数据耦合</li>\n<li>3，标记耦合</li>\n<li>4，控制耦合</li>\n<li>5，外部耦合</li>\n<li>6，公共耦合</li>\n<li>7，内容耦合</li>\n<li>口诀 非数标控外公内</li>\n</ul>\n<p>##OSI/RM（开放系统互连参考模型）由低到高</p>\n<ul>\n<li>1，物理层</li>\n<li>2，数据链路层</li>\n<li>3，网络层</li>\n<li>4，传输层</li>\n<li>5，会话层</li>\n<li>6，表示层</li>\n<li>7，应用层</li>\n<li>口诀 物数网传会表应</li>\n</ul>\n"},{"title":"解决远程连接mysql错误1130","date":"2018-03-19T03:01:55.000Z","description":"远程连接Mysql服务器的数据库，错误代码是1130，ERROR 1130: Host xxx.xxx.xxx.xxx  is not allowed to connect to this MySQL server  ","_content":"\n远程连接Mysql服务器的数据库，错误代码是1130，ERROR 1130: Host xxx.xxx.xxx.xxx  is not allowed to connect to this MySQL server  \n猜想是无法给远程连接的用户权限问题。\n这样子操作mysql库，即可解决。 \n \n在本机登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称'%'即可 \n\n\tmysql -u root -p  \n\tmysql;use mysql;  \n\tmysql;select 'host' from user where user='root';  \n\tmysql;update user set host = '%' where user ='root';  \n\tmysql;flush privileges;  \n\tmysql;select 'host'   from user where user='root'; \n \n \n第一句：以权限用户root登录  \n第二句：选择mysql库  \n第三句：查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）  \n第四句：修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址  \n如果这步出错\"ERROR 1062 (23000): Duplicate entry '%-root' for key 'PRIMARY'\" 由说明该记录有了，跳过这步\n第五句：刷新MySQL的系统权限相关表  \n第六句：再重新查看user表时，有修改。。  \n重起mysql服务即可完成。 \n","source":"_posts/解决远程连接mysql错误1130.md","raw":"---\ntitle: 解决远程连接mysql错误1130\ndate: 2018-03-19 11:01:55\ndescription: '远程连接Mysql服务器的数据库，错误代码是1130，ERROR 1130: Host xxx.xxx.xxx.xxx  is not allowed to connect to this MySQL server  '\ntags: 'mysql'\ncategories: 数据库\n\n---\n\n远程连接Mysql服务器的数据库，错误代码是1130，ERROR 1130: Host xxx.xxx.xxx.xxx  is not allowed to connect to this MySQL server  \n猜想是无法给远程连接的用户权限问题。\n这样子操作mysql库，即可解决。 \n \n在本机登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称'%'即可 \n\n\tmysql -u root -p  \n\tmysql;use mysql;  \n\tmysql;select 'host' from user where user='root';  \n\tmysql;update user set host = '%' where user ='root';  \n\tmysql;flush privileges;  \n\tmysql;select 'host'   from user where user='root'; \n \n \n第一句：以权限用户root登录  \n第二句：选择mysql库  \n第三句：查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）  \n第四句：修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址  \n如果这步出错\"ERROR 1062 (23000): Duplicate entry '%-root' for key 'PRIMARY'\" 由说明该记录有了，跳过这步\n第五句：刷新MySQL的系统权限相关表  \n第六句：再重新查看user表时，有修改。。  \n重起mysql服务即可完成。 \n","slug":"解决远程连接mysql错误1130","published":1,"updated":"2018-12-17T13:37:49.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpse0idw00251wu0z79wwhs6","content":"<p>远程连接Mysql服务器的数据库，错误代码是1130，ERROR 1130: Host xxx.xxx.xxx.xxx  is not allowed to connect to this MySQL server<br>猜想是无法给远程连接的用户权限问题。<br>这样子操作mysql库，即可解决。 </p>\n<p>在本机登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称’%’即可 </p>\n<pre><code>mysql -u root -p  \nmysql;use mysql;  \nmysql;select &apos;host&apos; from user where user=&apos;root&apos;;  \nmysql;update user set host = &apos;%&apos; where user =&apos;root&apos;;  \nmysql;flush privileges;  \nmysql;select &apos;host&apos;   from user where user=&apos;root&apos;; \n</code></pre><p>第一句：以权限用户root登录<br>第二句：选择mysql库<br>第三句：查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）<br>第四句：修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址<br>如果这步出错”ERROR 1062 (23000): Duplicate entry ‘%-root’ for key ‘PRIMARY’” 由说明该记录有了，跳过这步<br>第五句：刷新MySQL的系统权限相关表<br>第六句：再重新查看user表时，有修改。。<br>重起mysql服务即可完成。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>远程连接Mysql服务器的数据库，错误代码是1130，ERROR 1130: Host xxx.xxx.xxx.xxx  is not allowed to connect to this MySQL server<br>猜想是无法给远程连接的用户权限问题。<br>这样子操作mysql库，即可解决。 </p>\n<p>在本机登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称’%’即可 </p>\n<pre><code>mysql -u root -p  \nmysql;use mysql;  \nmysql;select &apos;host&apos; from user where user=&apos;root&apos;;  \nmysql;update user set host = &apos;%&apos; where user =&apos;root&apos;;  \nmysql;flush privileges;  \nmysql;select &apos;host&apos;   from user where user=&apos;root&apos;; \n</code></pre><p>第一句：以权限用户root登录<br>第二句：选择mysql库<br>第三句：查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）<br>第四句：修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址<br>如果这步出错”ERROR 1062 (23000): Duplicate entry ‘%-root’ for key ‘PRIMARY’” 由说明该记录有了，跳过这步<br>第五句：刷新MySQL的系统权限相关表<br>第六句：再重新查看user表时，有修改。。<br>重起mysql服务即可完成。 </p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjpse0ibv000a1wu0l875cmqd","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0ica000i1wu051oy4yt2"},{"post_id":"cjpse0ibg00041wu0xpswbkvs","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0ice000n1wu09xkohm9v"},{"post_id":"cjpse0ic5000f1wu0xz52z8rd","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0icg000p1wu0q5aszzeb"},{"post_id":"cjpse0ibk00061wu03eh7ipk5","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0ick000u1wu0iythlhr2"},{"post_id":"cjpse0ic8000h1wu0puevz9ni","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0icm000w1wu0tbkc8nh1"},{"post_id":"cjpse0ibs00091wu0vqfqmj6q","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0icp00101wu01qo7ihsz"},{"post_id":"cjpse0icf000o1wu0cqx2z69d","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0ics00131wu0mic6uehn"},{"post_id":"cjpse0ici000t1wu0w19h9nry","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0icv00161wu0qmy97xbw"},{"post_id":"cjpse0ibz000b1wu0uwa9x01s","category_id":"cjpse0ich000q1wu08dcj5dpa","_id":"cjpse0icx00191wu0qe5bvzu2"},{"post_id":"cjpse0icl000v1wu0czpdl6sd","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0id0001c1wu0tg7zqoax"},{"post_id":"cjpse0ico000z1wu0jtno2rsu","category_id":"cjpse0icn000x1wu0ofw1pfbx","_id":"cjpse0id2001f1wu0sghw528z"},{"post_id":"cjpse0icc000m1wu0axkmok5v","category_id":"cjpse0icn000x1wu0ofw1pfbx","_id":"cjpse0id5001h1wu0mpjq3phl"},{"post_id":"cjpse0icr00121wu0fhbtpuaa","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0id8001l1wu0mbkq53vd"},{"post_id":"cjpse0ict00151wu0qvct8ql5","category_id":"cjpse0icn000x1wu0ofw1pfbx","_id":"cjpse0idb001o1wu08jrpho7k"},{"post_id":"cjpse0icy001b1wu0h24yha7f","category_id":"cjpse0icn000x1wu0ofw1pfbx","_id":"cjpse0idg001r1wu07niu5jkv"},{"post_id":"cjpse0id1001e1wu06j8ksbku","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0idk001u1wu0qt3q42hg"},{"post_id":"cjpse0id3001g1wu00e8jjp9j","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0ido001x1wu01dvxy314"},{"post_id":"cjpse0icw00181wu0jfw1pqvj","category_id":"cjpse0id0001d1wu0ulc690s9","_id":"cjpse0idr00201wu0ex163bx1"},{"post_id":"cjpse0id7001k1wu0p2lff4q8","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0idv00231wu0bi5sbui5"},{"post_id":"cjpse0id9001n1wu0vuo4bgiz","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0idy00261wu0b12et9af"},{"post_id":"cjpse0ide001q1wu0ocf8vkng","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0ie100291wu0yuw6vj8r"},{"post_id":"cjpse0idi001t1wu0308yn54z","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0ie2002a1wu0ubjwnjla"},{"post_id":"cjpse0idm001w1wu0iaezhc7y","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0ie3002c1wu05cjlnl39"},{"post_id":"cjpse0idp001z1wu0hedjvrbs","category_id":"cjpse0ibn00071wu03544fnoo","_id":"cjpse0ie3002e1wu0gag52ay4"},{"post_id":"cjpse0idw00251wu0z79wwhs6","category_id":"cjpse0id0001d1wu0ulc690s9","_id":"cjpse0ie5002g1wu07jtsujmh"},{"post_id":"cjpse0idt00221wu03xq1y7il","category_id":"cjpse0ie000271wu0vsiif6l0","_id":"cjpse0ie5002i1wu0lhfw9x69"}],"PostTag":[{"post_id":"cjpse0ibv000a1wu0l875cmqd","tag_id":"cjpse0ibr00081wu07s76g8k2","_id":"cjpse0ic5000e1wu0f8kcpk15"},{"post_id":"cjpse0ibg00041wu0xpswbkvs","tag_id":"cjpse0ibr00081wu07s76g8k2","_id":"cjpse0ic7000g1wu02hj2qf90"},{"post_id":"cjpse0ibk00061wu03eh7ipk5","tag_id":"cjpse0ibr00081wu07s76g8k2","_id":"cjpse0icc000l1wu0zg8j8frx"},{"post_id":"cjpse0ibs00091wu0vqfqmj6q","tag_id":"cjpse0ibr00081wu07s76g8k2","_id":"cjpse0ici000s1wu0z1fjnukn"},{"post_id":"cjpse0ibz000b1wu0uwa9x01s","tag_id":"cjpse0ich000r1wu0cmh3nn0g","_id":"cjpse0icq00111wu0pxn2vjka"},{"post_id":"cjpse0ic5000f1wu0xz52z8rd","tag_id":"cjpse0icn000y1wu0myuxk3i3","_id":"cjpse0icv00171wu05rnauexx"},{"post_id":"cjpse0ic8000h1wu0puevz9ni","tag_id":"cjpse0ict00141wu0eucir28m","_id":"cjpse0id6001j1wu079g8lwey"},{"post_id":"cjpse0ic8000h1wu0puevz9ni","tag_id":"cjpse0icy001a1wu01774ibhq","_id":"cjpse0id9001m1wu0jiijhkfm"},{"post_id":"cjpse0icc000m1wu0axkmok5v","tag_id":"cjpse0id5001i1wu0f977pbjm","_id":"cjpse0idg001s1wu03a79ahhw"},{"post_id":"cjpse0icf000o1wu0cqx2z69d","tag_id":"cjpse0idc001p1wu0kujxm9co","_id":"cjpse0ido001y1wu03odvrke6"},{"post_id":"cjpse0ici000t1wu0w19h9nry","tag_id":"cjpse0idc001p1wu0kujxm9co","_id":"cjpse0idw00241wu0nnmv622w"},{"post_id":"cjpse0icl000v1wu0czpdl6sd","tag_id":"cjpse0ids00211wu07tq2zpe7","_id":"cjpse0ie3002d1wu0vriu5q7v"},{"post_id":"cjpse0icl000v1wu0czpdl6sd","tag_id":"cjpse0id5001i1wu0f977pbjm","_id":"cjpse0ie4002f1wu0kbvlavcj"},{"post_id":"cjpse0ico000z1wu0jtno2rsu","tag_id":"cjpse0ie2002b1wu00y7cynp3","_id":"cjpse0ie6002k1wu0y51k23vj"},{"post_id":"cjpse0ico000z1wu0jtno2rsu","tag_id":"cjpse0ie5002h1wu0xvslysov","_id":"cjpse0ie6002l1wu0lqr522fm"},{"post_id":"cjpse0icr00121wu0fhbtpuaa","tag_id":"cjpse0ie6002j1wu0qoq79sbj","_id":"cjpse0iea002q1wu0uutegvwf"},{"post_id":"cjpse0icr00121wu0fhbtpuaa","tag_id":"cjpse0ie7002m1wu08xepis49","_id":"cjpse0iea002r1wu0d3dcmvoj"},{"post_id":"cjpse0icr00121wu0fhbtpuaa","tag_id":"cjpse0ie7002n1wu0je2jd06q","_id":"cjpse0ieb002t1wu0v93zpbm0"},{"post_id":"cjpse0icr00121wu0fhbtpuaa","tag_id":"cjpse0ie8002o1wu0xzwijnrc","_id":"cjpse0iec002u1wu0w4zrz6cl"},{"post_id":"cjpse0ict00151wu0qvct8ql5","tag_id":"cjpse0ie9002p1wu06bh325ig","_id":"cjpse0ied002w1wu0ab4b15nn"},{"post_id":"cjpse0icw00181wu0jfw1pqvj","tag_id":"cjpse0ieb002s1wu0p06cjt8q","_id":"cjpse0ied002x1wu0gipdr7ye"},{"post_id":"cjpse0icy001b1wu0h24yha7f","tag_id":"cjpse0iec002v1wu00i938k44","_id":"cjpse0ieg002z1wu015d54ovn"},{"post_id":"cjpse0id1001e1wu06j8ksbku","tag_id":"cjpse0ie6002j1wu0qoq79sbj","_id":"cjpse0ieh00321wu0q2alwzr0"},{"post_id":"cjpse0id1001e1wu06j8ksbku","tag_id":"cjpse0ieg00301wu0y796csyj","_id":"cjpse0iei00331wu0o43ni8f8"},{"post_id":"cjpse0id3001g1wu00e8jjp9j","tag_id":"cjpse0ieh00311wu0equqzllf","_id":"cjpse0iej00351wu0b2nidu23"},{"post_id":"cjpse0id7001k1wu0p2lff4q8","tag_id":"cjpse0iei00341wu098xdaq31","_id":"cjpse0iek00381wu0u44k4khf"},{"post_id":"cjpse0id7001k1wu0p2lff4q8","tag_id":"cjpse0iej00361wu0wm72zmg9","_id":"cjpse0iem00391wu02uu6p48l"},{"post_id":"cjpse0id9001n1wu0vuo4bgiz","tag_id":"cjpse0iek00371wu0cfr4oda1","_id":"cjpse0ieo003b1wu0irrhbuck"},{"post_id":"cjpse0ide001q1wu0ocf8vkng","tag_id":"cjpse0ien003a1wu0mv6efqjr","_id":"cjpse0iep003d1wu075cmyztn"},{"post_id":"cjpse0idi001t1wu0308yn54z","tag_id":"cjpse0ie6002j1wu0qoq79sbj","_id":"cjpse0iet003g1wu09jh4n98r"},{"post_id":"cjpse0idi001t1wu0308yn54z","tag_id":"cjpse0ien003a1wu0mv6efqjr","_id":"cjpse0iet003h1wu06v5g06x1"},{"post_id":"cjpse0idm001w1wu0iaezhc7y","tag_id":"cjpse0ie6002j1wu0qoq79sbj","_id":"cjpse0ieu003j1wu0vmcu2lxk"},{"post_id":"cjpse0idm001w1wu0iaezhc7y","tag_id":"cjpse0icn000y1wu0myuxk3i3","_id":"cjpse0iev003k1wu0v7tamu7d"},{"post_id":"cjpse0idp001z1wu0hedjvrbs","tag_id":"cjpse0ie6002j1wu0qoq79sbj","_id":"cjpse0iex003n1wu0h8gynbfh"},{"post_id":"cjpse0idp001z1wu0hedjvrbs","tag_id":"cjpse0ien003a1wu0mv6efqjr","_id":"cjpse0iey003o1wu0jvxucglm"},{"post_id":"cjpse0idt00221wu03xq1y7il","tag_id":"cjpse0iew003m1wu0o721hzch","_id":"cjpse0iez003q1wu0cz2m9tdt"},{"post_id":"cjpse0idw00251wu0z79wwhs6","tag_id":"cjpse0ieb002s1wu0p06cjt8q","_id":"cjpse0iez003r1wu0wqgy7fz3"}],"Tag":[{"name":"css","_id":"cjpse0ibr00081wu07s76g8k2"},{"name":"建站","_id":"cjpse0ich000r1wu0cmh3nn0g"},{"name":"html5","_id":"cjpse0icn000y1wu0myuxk3i3"},{"name":"DOM","_id":"cjpse0ict00141wu0eucir28m"},{"name":"MIME","_id":"cjpse0icy001a1wu01774ibhq"},{"name":"java","_id":"cjpse0id5001i1wu0f977pbjm"},{"name":"js,","_id":"cjpse0idc001p1wu0kujxm9co"},{"name":"jquery","_id":"cjpse0ids00211wu07tq2zpe7"},{"name":"jstl","_id":"cjpse0ie2002b1wu00y7cynp3"},{"name":"耶鲁表达式","_id":"cjpse0ie5002h1wu0xvslysov"},{"name":"js","_id":"cjpse0ie6002j1wu0qoq79sbj"},{"name":"继承","_id":"cjpse0ie7002m1wu08xepis49"},{"name":"闭包","_id":"cjpse0ie7002n1wu0je2jd06q"},{"name":"vue双向绑定原理","_id":"cjpse0ie8002o1wu0xzwijnrc"},{"name":"linux","_id":"cjpse0ie9002p1wu06bh325ig"},{"name":"mysql","_id":"cjpse0ieb002s1wu0p06cjt8q"},{"name":"php","_id":"cjpse0iec002v1wu00i938k44"},{"name":"原型","_id":"cjpse0ieg00301wu0y796csyj"},{"name":"框架","_id":"cjpse0ieh00311wu0equqzllf"},{"name":"http","_id":"cjpse0iei00341wu098xdaq31"},{"name":"聊天通讯","_id":"cjpse0iej00361wu0wm72zmg9"},{"name":"兼容性","_id":"cjpse0iek00371wu0cfr4oda1"},{"name":"架构","_id":"cjpse0ien003a1wu0mv6efqjr"},{"name":"软考","_id":"cjpse0iew003m1wu0o721hzch"}]}}